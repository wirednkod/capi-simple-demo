/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@deno/shim-deno-test/dist/definitions.js":
/*!***************************************************************!*\
  !*** ./node_modules/@deno/shim-deno-test/dist/definitions.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.testDefinitions = void 0;
/** Reference to the array that `Deno.test` calls insert their definition into. */
exports.testDefinitions = [];


/***/ }),

/***/ "./node_modules/@deno/shim-deno-test/dist/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@deno/shim-deno-test/dist/index.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.testDefinitions = exports.Deno = void 0;
exports.Deno = __webpack_require__(/*! ./test.js */ "./node_modules/@deno/shim-deno-test/dist/test.js");
__exportStar(__webpack_require__(/*! ./test.js */ "./node_modules/@deno/shim-deno-test/dist/test.js"), exports);
var definitions_js_1 = __webpack_require__(/*! ./definitions.js */ "./node_modules/@deno/shim-deno-test/dist/definitions.js");
Object.defineProperty(exports, "testDefinitions", ({ enumerable: true, get: function () { return definitions_js_1.testDefinitions; } }));


/***/ }),

/***/ "./node_modules/@deno/shim-deno-test/dist/test.js":
/*!********************************************************!*\
  !*** ./node_modules/@deno/shim-deno-test/dist/test.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.test = void 0;
const definitions_js_1 = __webpack_require__(/*! ./definitions.js */ "./node_modules/@deno/shim-deno-test/dist/definitions.js");
const test = function test() {
    var _a, _b;
    let testDef;
    const firstArg = arguments[0];
    const secondArg = arguments[1];
    const thirdArg = arguments[2];
    if (typeof firstArg === "string") {
        if (typeof secondArg === "object") {
            if (typeof thirdArg === "function") {
                if (secondArg.fn != null) {
                    throw new TypeError("Unexpected 'fn' field in options, test function is already provided as the third argument.");
                }
            }
            if (secondArg.name != null) {
                throw new TypeError("Unexpected 'name' field in options, test name is already provided as the first argument.");
            }
            // name, options, fn
            testDef = { name: firstArg, fn: thirdArg, ...secondArg };
        }
        else {
            // name, fn
            testDef = { name: firstArg, fn: secondArg };
        }
    }
    else if (firstArg instanceof Function) {
        // function only
        if (firstArg.name.length === 0) {
            throw new TypeError("The test function must have a name");
        }
        testDef = { fn: firstArg, name: firstArg.name };
        if (secondArg != null) {
            throw new TypeError("Unexpected second argument to Deno.test()");
        }
    }
    else if (typeof firstArg === "object") {
        testDef = { ...firstArg };
        if (typeof secondArg === "function") {
            // options, fn
            testDef.fn = secondArg;
            if (firstArg.fn != null) {
                throw new TypeError("Unexpected 'fn' field in options, test function is already provided as the second argument.");
            }
            if (testDef.name == null) {
                if (secondArg.name.length === 0) {
                    throw new TypeError("The test function must have a name");
                }
                // options without name, fn
                testDef.name = secondArg.name;
            }
        }
        else {
            if (typeof firstArg.fn !== "function") {
                throw new TypeError("Expected 'fn' field in the first argument to be a test function.");
            }
        }
    }
    else {
        throw new TypeError("Unknown test overload");
    }
    if (typeof testDef.fn !== "function") {
        throw new TypeError("Missing test function");
    }
    if (((_b = (_a = testDef.name) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) === 0) {
        throw new TypeError("The test name can't be empty");
    }
    definitions_js_1.testDefinitions.push(testDef);
};
exports.test = test;


/***/ }),

/***/ "./node_modules/capi/node_modules/tslib/tslib.es6.js":
/*!***********************************************************!*\
  !*** ./node_modules/capi/node_modules/tslib/tslib.es6.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "__assign": function() { return /* binding */ __assign; },
/* harmony export */   "__asyncDelegator": function() { return /* binding */ __asyncDelegator; },
/* harmony export */   "__asyncGenerator": function() { return /* binding */ __asyncGenerator; },
/* harmony export */   "__asyncValues": function() { return /* binding */ __asyncValues; },
/* harmony export */   "__await": function() { return /* binding */ __await; },
/* harmony export */   "__awaiter": function() { return /* binding */ __awaiter; },
/* harmony export */   "__classPrivateFieldGet": function() { return /* binding */ __classPrivateFieldGet; },
/* harmony export */   "__classPrivateFieldSet": function() { return /* binding */ __classPrivateFieldSet; },
/* harmony export */   "__createBinding": function() { return /* binding */ __createBinding; },
/* harmony export */   "__decorate": function() { return /* binding */ __decorate; },
/* harmony export */   "__exportStar": function() { return /* binding */ __exportStar; },
/* harmony export */   "__extends": function() { return /* binding */ __extends; },
/* harmony export */   "__generator": function() { return /* binding */ __generator; },
/* harmony export */   "__importDefault": function() { return /* binding */ __importDefault; },
/* harmony export */   "__importStar": function() { return /* binding */ __importStar; },
/* harmony export */   "__makeTemplateObject": function() { return /* binding */ __makeTemplateObject; },
/* harmony export */   "__metadata": function() { return /* binding */ __metadata; },
/* harmony export */   "__param": function() { return /* binding */ __param; },
/* harmony export */   "__read": function() { return /* binding */ __read; },
/* harmony export */   "__rest": function() { return /* binding */ __rest; },
/* harmony export */   "__spread": function() { return /* binding */ __spread; },
/* harmony export */   "__spreadArray": function() { return /* binding */ __spreadArray; },
/* harmony export */   "__spreadArrays": function() { return /* binding */ __spreadArrays; },
/* harmony export */   "__values": function() { return /* binding */ __values; }
/* harmony export */ });
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    }
    return __assign.apply(this, arguments);
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var __createBinding = Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});

function __exportStar(m, o) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

/** @deprecated */
function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

/** @deprecated */
function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
}

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

var __setModuleDefault = Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}

function __classPrivateFieldSet(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
}


/***/ }),

/***/ "./node_modules/regenerator-runtime/runtime.js":
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/***/ (function(module) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = GeneratorFunctionPrototype;
  define(Gp, "constructor", GeneratorFunctionPrototype);
  define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  });
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  define(Gp, iteratorSymbol, function() {
    return this;
  });

  define(Gp, "toString", function() {
    return "[object Generator]";
  });

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   true ? module.exports : 0
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, in modern engines
  // we can explicitly access globalThis. In older engines we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}


/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var regenerator_runtime_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! regenerator-runtime/runtime */ "./node_modules/regenerator-runtime/runtime.js");
/* harmony import */ var regenerator_runtime_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(regenerator_runtime_runtime__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _view__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./view */ "./src/view.ts");
/* harmony import */ var capi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! capi */ "./node_modules/capi/esm/mod.js");
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable @typescript-eslint/no-unsafe-assignment */
/* eslint-disable @typescript-eslint/no-unsafe-call */
/* eslint-disable @typescript-eslint/no-floating-promises */
/* eslint-disable @typescript-eslint/restrict-template-expressions */



window.onload = () => {
    const loadTime = performance.now();
    const ui = new _view__WEBPACK_IMPORTED_MODULE_1__["default"]({ containerId: "messages" }, { loadTime });
    ui.showSyncing();
    void (async () => {
        try {
            const { block: { block } } = await capi__WEBPACK_IMPORTED_MODULE_2__.readBlock(capi__WEBPACK_IMPORTED_MODULE_2__.westend).run();
            ui.showSynced();
            ui.log(`${_view__WEBPACK_IMPORTED_MODULE_1__.emojis.seedling} Chain is ready (powered by CAPI) - Reading at block #${parseInt(block.header.number, 0)}`, true);
            const chainName = await capi__WEBPACK_IMPORTED_MODULE_2__.rpcCall(capi__WEBPACK_IMPORTED_MODULE_2__.westend, "system_chain", []).select("result").run();
            const health = await capi__WEBPACK_IMPORTED_MODULE_2__.rpcCall(capi__WEBPACK_IMPORTED_MODULE_2__.westend, "system_health", []).select("result").run();
            const genesisHash = await capi__WEBPACK_IMPORTED_MODULE_2__.rpcCall(capi__WEBPACK_IMPORTED_MODULE_2__.westend, "chain_getBlockHash", [0]).select("result").run();
            ui.log(`${_view__WEBPACK_IMPORTED_MODULE_1__.emojis.info} Connected to ${chainName} with ${health.peers} peers.`);
            ui.log(`${_view__WEBPACK_IMPORTED_MODULE_1__.emojis.chequeredFlag} Genesis hash is ${genesisHash}`);
            ui.log(`${_view__WEBPACK_IMPORTED_MODULE_1__.emojis.newspaper} Subscribing to new block headers`);
            const rpc = capi__WEBPACK_IMPORTED_MODULE_2__.rpcSubscription(capi__WEBPACK_IMPORTED_MODULE_2__.westend, "chain_subscribeNewHead", [], () => (m) => ui.log(`${_view__WEBPACK_IMPORTED_MODULE_1__.emojis.brick} New block #${parseInt(m.params.result.number, 0)} has hash ${m.params.result.parentHash}`));
            await capi__WEBPACK_IMPORTED_MODULE_2__.run(rpc);
        }
        catch (error) {
            ui.error(error);
        }
    })();
};


/***/ }),

/***/ "./src/view.ts":
/*!*********************!*\
  !*** ./src/view.ts ***!
  \*********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ UI; },
/* harmony export */   "emojis": function() { return /* binding */ emojis; }
/* harmony export */ });
const emojis = {
    banknote: "💵",
    brick: "🧱",
    chain: "🔗",
    chequeredFlag: "🏁",
    clock: "🕒",
    info: "ℹ️",
    newspaper: "🗞️",
    seedling: "🌱",
    stethoscope: "🩺",
    tick: "✅",
};
class UI {
    options;
    model;
    container;
    syncState;
    syncMessage;
    constructor(options, model) {
        this.options = options;
        this.model = model;
        const container = document.getElementById(this.options.containerId);
        if (container === null) {
            throw Error("Could not find the container. Did you change the Html?");
        }
        this.container = container;
    }
    timeElapsed = (from, till) => {
        return ((till - from) / 1000).toFixed(2);
    };
    timestampHtml = (withTime) => {
        const timestampDiv = document.createElement("time");
        if (!withTime) {
            return timestampDiv;
        }
        const time = performance.now();
        timestampDiv.appendChild(document.createTextNode(`${new Date().toLocaleTimeString()} (${this.timeElapsed(this.model.loadTime, time)}s)`));
        return timestampDiv;
    };
    messageHtml = (message, withTime) => {
        const messageDiv = document.createElement("div");
        messageDiv.classList.add("message");
        messageDiv.appendChild(this.timestampHtml(withTime));
        messageDiv.appendChild(document.createTextNode(message));
        return messageDiv;
    };
    errorHtml = (message) => {
        const messageDiv = document.createElement("div");
        messageDiv.classList.add("message");
        messageDiv.classList.add("error");
        messageDiv.appendChild(document.createTextNode(message));
        return messageDiv;
    };
    displayMessage = (message) => {
        this.container.appendChild(message);
    };
    error = (error) => {
        this.displayMessage(this.errorHtml(error.message));
        throw error;
    };
    log = (message, withTime) => {
        this.displayMessage(this.messageHtml(message, withTime));
    };
    insertAtTopOfContainer = (el) => {
        if (this.container.firstChild == null) {
            this.container.appendChild(el);
        }
        else {
            this.container.insertBefore(el, this.container.firstChild);
        }
    };
    ensureClassOn = (el, className) => {
        if (!el.classList.contains(className)) {
            el.classList.add(className);
        }
    };
    showSyncing = () => {
        if (!this.syncMessage) {
            // message container
            const syncState = document.createElement("div");
            syncState.classList.add("message");
            //contents - empty timestamp and pulsing message
            syncState.appendChild(this.timestampHtml());
            const syncMessage = document.createElement("em");
            syncMessage.classList.add("pulse");
            syncMessage.innerHTML = `${emojis.chain} Chain is syncing...`;
            syncState.appendChild(syncMessage);
            this.syncMessage = syncMessage;
            this.syncState = syncState;
            this.insertAtTopOfContainer(this.syncState);
        }
        else {
            // Cover case that we change from synced state back to syncing.
            this.syncMessage.innerHTML = `${emojis.chain} Chain is syncing...`;
            this.ensureClassOn(this.syncMessage, "pulse");
        }
    };
    showSynced = () => {
        if (!this.syncState || !this.syncMessage) {
            throw new Error("There is no sync state UI to update. You should have called `showSyncing()` first.");
        }
        this.syncMessage.classList.remove("pulse");
        this.syncMessage.innerHTML = `${emojis.tick} Chain synced!`;
    };
}


/***/ }),

/***/ "./node_modules/@noble/hashes/esm/_assert.js":
/*!***************************************************!*\
  !*** ./node_modules/@noble/hashes/esm/_assert.js ***!
  \***************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bool": function() { return /* binding */ bool; },
/* harmony export */   "bytes": function() { return /* binding */ bytes; },
/* harmony export */   "exists": function() { return /* binding */ exists; },
/* harmony export */   "hash": function() { return /* binding */ hash; },
/* harmony export */   "number": function() { return /* binding */ number; },
/* harmony export */   "output": function() { return /* binding */ output; }
/* harmony export */ });
function number(n) {
    if (!Number.isSafeInteger(n) || n < 0)
        throw new Error(`Wrong positive integer: ${n}`);
}
function bool(b) {
    if (typeof b !== 'boolean')
        throw new Error(`Expected boolean, not ${b}`);
}
function bytes(b, ...lengths) {
    if (!(b instanceof Uint8Array))
        throw new TypeError('Expected Uint8Array');
    if (lengths.length > 0 && !lengths.includes(b.length))
        throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);
}
function hash(hash) {
    if (typeof hash !== 'function' || typeof hash.create !== 'function')
        throw new Error('Hash should be wrapped by utils.wrapConstructor');
    number(hash.outputLen);
    number(hash.blockLen);
}
function exists(instance, checkFinished = true) {
    if (instance.destroyed)
        throw new Error('Hash instance has been destroyed');
    if (checkFinished && instance.finished)
        throw new Error('Hash#digest() has already been called');
}
function output(out, instance) {
    bytes(out);
    const min = instance.outputLen;
    if (out.length < min) {
        throw new Error(`digestInto() expects output buffer of length at least ${min}`);
    }
}
const assert = {
    number,
    bool,
    bytes,
    hash,
    exists,
    output,
};
/* harmony default export */ __webpack_exports__["default"] = (assert);


/***/ }),

/***/ "./node_modules/@noble/hashes/esm/_blake2.js":
/*!***************************************************!*\
  !*** ./node_modules/@noble/hashes/esm/_blake2.js ***!
  \***************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BLAKE2": function() { return /* binding */ BLAKE2; },
/* harmony export */   "SIGMA": function() { return /* binding */ SIGMA; }
/* harmony export */ });
/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_assert.js */ "./node_modules/@noble/hashes/esm/_assert.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ "./node_modules/@noble/hashes/esm/utils.js");


// prettier-ignore
const SIGMA = new Uint8Array([
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
    14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3,
    11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4,
    7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8,
    9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13,
    2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9,
    12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11,
    13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10,
    6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5,
    10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0,
    // For BLAKE2b, the two extra permutations for rounds 10 and 11 are SIGMA[10..11] = SIGMA[0..1].
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
    14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3,
]);
class BLAKE2 extends _utils_js__WEBPACK_IMPORTED_MODULE_1__.Hash {
    constructor(blockLen, outputLen, opts = {}, keyLen, saltLen, persLen) {
        super();
        this.blockLen = blockLen;
        this.outputLen = outputLen;
        this.length = 0;
        this.pos = 0;
        this.finished = false;
        this.destroyed = false;
        _assert_js__WEBPACK_IMPORTED_MODULE_0__["default"].number(blockLen);
        _assert_js__WEBPACK_IMPORTED_MODULE_0__["default"].number(outputLen);
        _assert_js__WEBPACK_IMPORTED_MODULE_0__["default"].number(keyLen);
        if (outputLen < 0 || outputLen > keyLen)
            throw new Error('Blake2: outputLen bigger than keyLen');
        if (opts.key !== undefined && (opts.key.length < 1 || opts.key.length > keyLen))
            throw new Error(`Key should be up 1..${keyLen} byte long or undefined`);
        if (opts.salt !== undefined && opts.salt.length !== saltLen)
            throw new Error(`Salt should be ${saltLen} byte long or undefined`);
        if (opts.personalization !== undefined && opts.personalization.length !== persLen)
            throw new Error(`Personalization should be ${persLen} byte long or undefined`);
        this.buffer32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u32)((this.buffer = new Uint8Array(blockLen)));
    }
    update(data) {
        _assert_js__WEBPACK_IMPORTED_MODULE_0__["default"].exists(this);
        // Main difference with other hashes: there is flag for last block,
        // so we cannot process current block before we know that there
        // is the next one. This significantly complicates logic and reduces ability
        // to do zero-copy processing
        const { blockLen, buffer, buffer32 } = this;
        data = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toBytes)(data);
        const len = data.length;
        for (let pos = 0; pos < len;) {
            // If buffer is full and we still have input (don't process last block, same as blake2s)
            if (this.pos === blockLen) {
                this.compress(buffer32, 0, false);
                this.pos = 0;
            }
            const take = Math.min(blockLen - this.pos, len - pos);
            const dataOffset = data.byteOffset + pos;
            // full block && aligned to 4 bytes && not last in input
            if (take === blockLen && !(dataOffset % 4) && pos + take < len) {
                const data32 = new Uint32Array(data.buffer, dataOffset, Math.floor((len - pos) / 4));
                for (let pos32 = 0; pos + blockLen < len; pos32 += buffer32.length, pos += blockLen) {
                    this.length += blockLen;
                    this.compress(data32, pos32, false);
                }
                continue;
            }
            buffer.set(data.subarray(pos, pos + take), this.pos);
            this.pos += take;
            this.length += take;
            pos += take;
        }
        return this;
    }
    digestInto(out) {
        _assert_js__WEBPACK_IMPORTED_MODULE_0__["default"].exists(this);
        _assert_js__WEBPACK_IMPORTED_MODULE_0__["default"].output(out, this);
        const { pos, buffer32 } = this;
        this.finished = true;
        // Padding
        this.buffer.subarray(pos).fill(0);
        this.compress(buffer32, 0, true);
        const out32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u32)(out);
        this.get().forEach((v, i) => (out32[i] = v));
    }
    digest() {
        const { buffer, outputLen } = this;
        this.digestInto(buffer);
        const res = buffer.slice(0, outputLen);
        this.destroy();
        return res;
    }
    _cloneInto(to) {
        const { buffer, length, finished, destroyed, outputLen, pos } = this;
        to || (to = new this.constructor({ dkLen: outputLen }));
        to.set(...this.get());
        to.length = length;
        to.finished = finished;
        to.destroyed = destroyed;
        to.outputLen = outputLen;
        to.buffer.set(buffer);
        to.pos = pos;
        return to;
    }
}


/***/ }),

/***/ "./node_modules/@noble/hashes/esm/_u64.js":
/*!************************************************!*\
  !*** ./node_modules/@noble/hashes/esm/_u64.js ***!
  \************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "add": function() { return /* binding */ add; },
/* harmony export */   "fromBig": function() { return /* binding */ fromBig; },
/* harmony export */   "split": function() { return /* binding */ split; },
/* harmony export */   "toBig": function() { return /* binding */ toBig; }
/* harmony export */ });
const U32_MASK64 = BigInt(2 ** 32 - 1);
const _32n = BigInt(32);
// We are not using BigUint64Array, because they are extremely slow as per 2022
function fromBig(n, le = false) {
    if (le)
        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };
    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };
}
function split(lst, le = false) {
    let Ah = new Uint32Array(lst.length);
    let Al = new Uint32Array(lst.length);
    for (let i = 0; i < lst.length; i++) {
        const { h, l } = fromBig(lst[i], le);
        [Ah[i], Al[i]] = [h, l];
    }
    return [Ah, Al];
}
const toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);
// for Shift in [0, 32)
const shrSH = (h, l, s) => h >>> s;
const shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);
// Right rotate for Shift in [1, 32)
const rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));
const rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);
// Right rotate for Shift in (32, 64), NOTE: 32 is special case.
const rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));
const rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));
// Right rotate for shift===32 (just swaps l&h)
const rotr32H = (h, l) => l;
const rotr32L = (h, l) => h;
// Left rotate for Shift in [1, 32)
const rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));
const rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));
// Left rotate for Shift in (32, 64), NOTE: 32 is special case.
const rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));
const rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));
// JS uses 32-bit signed integers for bitwise operations which means we cannot
// simple take carry out of low bit sum by shift, we need to use division.
// Removing "export" has 5% perf penalty -_-
function add(Ah, Al, Bh, Bl) {
    const l = (Al >>> 0) + (Bl >>> 0);
    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };
}
// Addition with more than 2 elements
const add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
const add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;
const add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
const add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;
const add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
const add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;
// prettier-ignore
const u64 = {
    fromBig, split, toBig,
    shrSH, shrSL,
    rotrSH, rotrSL, rotrBH, rotrBL,
    rotr32H, rotr32L,
    rotlSH, rotlSL, rotlBH, rotlBL,
    add, add3L, add3H, add4L, add4H, add5H, add5L,
};
/* harmony default export */ __webpack_exports__["default"] = (u64);


/***/ }),

/***/ "./node_modules/@noble/hashes/esm/blake2b.js":
/*!***************************************************!*\
  !*** ./node_modules/@noble/hashes/esm/blake2b.js ***!
  \***************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "blake2b": function() { return /* binding */ blake2b; }
/* harmony export */ });
/* harmony import */ var _blake2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_blake2.js */ "./node_modules/@noble/hashes/esm/_blake2.js");
/* harmony import */ var _u64_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_u64.js */ "./node_modules/@noble/hashes/esm/_u64.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ "./node_modules/@noble/hashes/esm/utils.js");



// Same as SHA-512 but LE
// prettier-ignore
const IV = new Uint32Array([
    0xf3bcc908, 0x6a09e667, 0x84caa73b, 0xbb67ae85, 0xfe94f82b, 0x3c6ef372, 0x5f1d36f1, 0xa54ff53a,
    0xade682d1, 0x510e527f, 0x2b3e6c1f, 0x9b05688c, 0xfb41bd6b, 0x1f83d9ab, 0x137e2179, 0x5be0cd19
]);
// Temporary buffer
const BUF = new Uint32Array(32);
// Mixing function G splitted in two halfs
function G1(a, b, c, d, msg, x) {
    // NOTE: V is LE here
    const Xl = msg[x], Xh = msg[x + 1]; // prettier-ignore
    let Al = BUF[2 * a], Ah = BUF[2 * a + 1]; // prettier-ignore
    let Bl = BUF[2 * b], Bh = BUF[2 * b + 1]; // prettier-ignore
    let Cl = BUF[2 * c], Ch = BUF[2 * c + 1]; // prettier-ignore
    let Dl = BUF[2 * d], Dh = BUF[2 * d + 1]; // prettier-ignore
    // v[a] = (v[a] + v[b] + x) | 0;
    let ll = _u64_js__WEBPACK_IMPORTED_MODULE_1__["default"].add3L(Al, Bl, Xl);
    Ah = _u64_js__WEBPACK_IMPORTED_MODULE_1__["default"].add3H(ll, Ah, Bh, Xh);
    Al = ll | 0;
    // v[d] = rotr(v[d] ^ v[a], 32)
    ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });
    ({ Dh, Dl } = { Dh: _u64_js__WEBPACK_IMPORTED_MODULE_1__["default"].rotr32H(Dh, Dl), Dl: _u64_js__WEBPACK_IMPORTED_MODULE_1__["default"].rotr32L(Dh, Dl) });
    // v[c] = (v[c] + v[d]) | 0;
    ({ h: Ch, l: Cl } = _u64_js__WEBPACK_IMPORTED_MODULE_1__["default"].add(Ch, Cl, Dh, Dl));
    // v[b] = rotr(v[b] ^ v[c], 24)
    ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });
    ({ Bh, Bl } = { Bh: _u64_js__WEBPACK_IMPORTED_MODULE_1__["default"].rotrSH(Bh, Bl, 24), Bl: _u64_js__WEBPACK_IMPORTED_MODULE_1__["default"].rotrSL(Bh, Bl, 24) });
    (BUF[2 * a] = Al), (BUF[2 * a + 1] = Ah);
    (BUF[2 * b] = Bl), (BUF[2 * b + 1] = Bh);
    (BUF[2 * c] = Cl), (BUF[2 * c + 1] = Ch);
    (BUF[2 * d] = Dl), (BUF[2 * d + 1] = Dh);
}
function G2(a, b, c, d, msg, x) {
    // NOTE: V is LE here
    const Xl = msg[x], Xh = msg[x + 1]; // prettier-ignore
    let Al = BUF[2 * a], Ah = BUF[2 * a + 1]; // prettier-ignore
    let Bl = BUF[2 * b], Bh = BUF[2 * b + 1]; // prettier-ignore
    let Cl = BUF[2 * c], Ch = BUF[2 * c + 1]; // prettier-ignore
    let Dl = BUF[2 * d], Dh = BUF[2 * d + 1]; // prettier-ignore
    // v[a] = (v[a] + v[b] + x) | 0;
    let ll = _u64_js__WEBPACK_IMPORTED_MODULE_1__["default"].add3L(Al, Bl, Xl);
    Ah = _u64_js__WEBPACK_IMPORTED_MODULE_1__["default"].add3H(ll, Ah, Bh, Xh);
    Al = ll | 0;
    // v[d] = rotr(v[d] ^ v[a], 16)
    ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });
    ({ Dh, Dl } = { Dh: _u64_js__WEBPACK_IMPORTED_MODULE_1__["default"].rotrSH(Dh, Dl, 16), Dl: _u64_js__WEBPACK_IMPORTED_MODULE_1__["default"].rotrSL(Dh, Dl, 16) });
    // v[c] = (v[c] + v[d]) | 0;
    ({ h: Ch, l: Cl } = _u64_js__WEBPACK_IMPORTED_MODULE_1__["default"].add(Ch, Cl, Dh, Dl));
    // v[b] = rotr(v[b] ^ v[c], 63)
    ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });
    ({ Bh, Bl } = { Bh: _u64_js__WEBPACK_IMPORTED_MODULE_1__["default"].rotrBH(Bh, Bl, 63), Bl: _u64_js__WEBPACK_IMPORTED_MODULE_1__["default"].rotrBL(Bh, Bl, 63) });
    (BUF[2 * a] = Al), (BUF[2 * a + 1] = Ah);
    (BUF[2 * b] = Bl), (BUF[2 * b + 1] = Bh);
    (BUF[2 * c] = Cl), (BUF[2 * c + 1] = Ch);
    (BUF[2 * d] = Dl), (BUF[2 * d + 1] = Dh);
}
class BLAKE2b extends _blake2_js__WEBPACK_IMPORTED_MODULE_0__.BLAKE2 {
    constructor(opts = {}) {
        super(128, opts.dkLen === undefined ? 64 : opts.dkLen, opts, 64, 16, 16);
        // Same as SHA-512, but LE
        this.v0l = IV[0] | 0;
        this.v0h = IV[1] | 0;
        this.v1l = IV[2] | 0;
        this.v1h = IV[3] | 0;
        this.v2l = IV[4] | 0;
        this.v2h = IV[5] | 0;
        this.v3l = IV[6] | 0;
        this.v3h = IV[7] | 0;
        this.v4l = IV[8] | 0;
        this.v4h = IV[9] | 0;
        this.v5l = IV[10] | 0;
        this.v5h = IV[11] | 0;
        this.v6l = IV[12] | 0;
        this.v6h = IV[13] | 0;
        this.v7l = IV[14] | 0;
        this.v7h = IV[15] | 0;
        const keyLength = opts.key ? opts.key.length : 0;
        this.v0l ^= this.outputLen | (keyLength << 8) | (0x01 << 16) | (0x01 << 24);
        if (opts.salt) {
            const salt = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.u32)((0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.toBytes)(opts.salt));
            this.v4l ^= salt[0];
            this.v4h ^= salt[1];
            this.v5l ^= salt[2];
            this.v5h ^= salt[3];
        }
        if (opts.personalization) {
            const pers = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.u32)((0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.toBytes)(opts.personalization));
            this.v6l ^= pers[0];
            this.v6h ^= pers[1];
            this.v7l ^= pers[2];
            this.v7h ^= pers[3];
        }
        if (opts.key) {
            // Pad to blockLen and update
            const tmp = new Uint8Array(this.blockLen);
            tmp.set((0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.toBytes)(opts.key));
            this.update(tmp);
        }
    }
    // prettier-ignore
    get() {
        let { v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h } = this;
        return [v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h];
    }
    // prettier-ignore
    set(v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h) {
        this.v0l = v0l | 0;
        this.v0h = v0h | 0;
        this.v1l = v1l | 0;
        this.v1h = v1h | 0;
        this.v2l = v2l | 0;
        this.v2h = v2h | 0;
        this.v3l = v3l | 0;
        this.v3h = v3h | 0;
        this.v4l = v4l | 0;
        this.v4h = v4h | 0;
        this.v5l = v5l | 0;
        this.v5h = v5h | 0;
        this.v6l = v6l | 0;
        this.v6h = v6h | 0;
        this.v7l = v7l | 0;
        this.v7h = v7h | 0;
    }
    compress(msg, offset, isLast) {
        this.get().forEach((v, i) => (BUF[i] = v)); // First half from state.
        BUF.set(IV, 16); // Second half from IV.
        let { h, l } = _u64_js__WEBPACK_IMPORTED_MODULE_1__["default"].fromBig(BigInt(this.length));
        BUF[24] = IV[8] ^ l; // Low word of the offset.
        BUF[25] = IV[9] ^ h; // High word.
        // Invert all bits for last block
        if (isLast) {
            BUF[28] = ~BUF[28];
            BUF[29] = ~BUF[29];
        }
        let j = 0;
        const s = _blake2_js__WEBPACK_IMPORTED_MODULE_0__.SIGMA;
        for (let i = 0; i < 12; i++) {
            G1(0, 4, 8, 12, msg, offset + 2 * s[j++]);
            G2(0, 4, 8, 12, msg, offset + 2 * s[j++]);
            G1(1, 5, 9, 13, msg, offset + 2 * s[j++]);
            G2(1, 5, 9, 13, msg, offset + 2 * s[j++]);
            G1(2, 6, 10, 14, msg, offset + 2 * s[j++]);
            G2(2, 6, 10, 14, msg, offset + 2 * s[j++]);
            G1(3, 7, 11, 15, msg, offset + 2 * s[j++]);
            G2(3, 7, 11, 15, msg, offset + 2 * s[j++]);
            G1(0, 5, 10, 15, msg, offset + 2 * s[j++]);
            G2(0, 5, 10, 15, msg, offset + 2 * s[j++]);
            G1(1, 6, 11, 12, msg, offset + 2 * s[j++]);
            G2(1, 6, 11, 12, msg, offset + 2 * s[j++]);
            G1(2, 7, 8, 13, msg, offset + 2 * s[j++]);
            G2(2, 7, 8, 13, msg, offset + 2 * s[j++]);
            G1(3, 4, 9, 14, msg, offset + 2 * s[j++]);
            G2(3, 4, 9, 14, msg, offset + 2 * s[j++]);
        }
        this.v0l ^= BUF[0] ^ BUF[16];
        this.v0h ^= BUF[1] ^ BUF[17];
        this.v1l ^= BUF[2] ^ BUF[18];
        this.v1h ^= BUF[3] ^ BUF[19];
        this.v2l ^= BUF[4] ^ BUF[20];
        this.v2h ^= BUF[5] ^ BUF[21];
        this.v3l ^= BUF[6] ^ BUF[22];
        this.v3h ^= BUF[7] ^ BUF[23];
        this.v4l ^= BUF[8] ^ BUF[24];
        this.v4h ^= BUF[9] ^ BUF[25];
        this.v5l ^= BUF[10] ^ BUF[26];
        this.v5h ^= BUF[11] ^ BUF[27];
        this.v6l ^= BUF[12] ^ BUF[28];
        this.v6h ^= BUF[13] ^ BUF[29];
        this.v7l ^= BUF[14] ^ BUF[30];
        this.v7h ^= BUF[15] ^ BUF[31];
        BUF.fill(0);
    }
    destroy() {
        this.destroyed = true;
        this.buffer32.fill(0);
        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
}
/**
 * BLAKE2b - optimized for 64-bit platforms. JS doesn't have uint64, so it's slower than BLAKE2s.
 * @param msg - message that would be hashed
 * @param opts - dkLen, key, salt, personalization
 */
const blake2b = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.wrapConstructorWithOpts)((opts) => new BLAKE2b(opts));


/***/ }),

/***/ "./node_modules/@noble/hashes/esm/cryptoBrowser.js":
/*!*********************************************************!*\
  !*** ./node_modules/@noble/hashes/esm/cryptoBrowser.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "crypto": function() { return /* binding */ crypto; }
/* harmony export */ });
const crypto = {
    node: undefined,
    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,
};


/***/ }),

/***/ "./node_modules/@noble/hashes/esm/utils.js":
/*!*************************************************!*\
  !*** ./node_modules/@noble/hashes/esm/utils.js ***!
  \*************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Hash": function() { return /* binding */ Hash; },
/* harmony export */   "asyncLoop": function() { return /* binding */ asyncLoop; },
/* harmony export */   "bytesToHex": function() { return /* binding */ bytesToHex; },
/* harmony export */   "checkOpts": function() { return /* binding */ checkOpts; },
/* harmony export */   "concatBytes": function() { return /* binding */ concatBytes; },
/* harmony export */   "createView": function() { return /* binding */ createView; },
/* harmony export */   "hexToBytes": function() { return /* binding */ hexToBytes; },
/* harmony export */   "isLE": function() { return /* binding */ isLE; },
/* harmony export */   "nextTick": function() { return /* binding */ nextTick; },
/* harmony export */   "randomBytes": function() { return /* binding */ randomBytes; },
/* harmony export */   "rotr": function() { return /* binding */ rotr; },
/* harmony export */   "toBytes": function() { return /* binding */ toBytes; },
/* harmony export */   "u32": function() { return /* binding */ u32; },
/* harmony export */   "u8": function() { return /* binding */ u8; },
/* harmony export */   "utf8ToBytes": function() { return /* binding */ utf8ToBytes; },
/* harmony export */   "wrapConstructor": function() { return /* binding */ wrapConstructor; },
/* harmony export */   "wrapConstructorWithOpts": function() { return /* binding */ wrapConstructorWithOpts; }
/* harmony export */ });
/* harmony import */ var _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/crypto */ "./node_modules/@noble/hashes/esm/cryptoBrowser.js");
/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
// The import here is via the package name. This is to ensure
// that exports mapping/resolution does fall into place.

// Cast array to different type
const u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
// Cast array to view
const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
// The rotate right (circular right shift) operation for uint32
const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);
const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;
// There is almost no big endian hardware, but js typed arrays uses platform specific endianness.
// So, just to be sure not to corrupt anything.
if (!isLE)
    throw new Error('Non little-endian hardware is not supported');
const hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));
/**
 * @example bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef]))
 */
function bytesToHex(uint8a) {
    // pre-caching improves the speed 6x
    if (!(uint8a instanceof Uint8Array))
        throw new Error('Uint8Array expected');
    let hex = '';
    for (let i = 0; i < uint8a.length; i++) {
        hex += hexes[uint8a[i]];
    }
    return hex;
}
/**
 * @example hexToBytes('deadbeef')
 */
function hexToBytes(hex) {
    if (typeof hex !== 'string') {
        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);
    }
    if (hex.length % 2)
        throw new Error('hexToBytes: received invalid unpadded hex');
    const array = new Uint8Array(hex.length / 2);
    for (let i = 0; i < array.length; i++) {
        const j = i * 2;
        const hexByte = hex.slice(j, j + 2);
        const byte = Number.parseInt(hexByte, 16);
        if (Number.isNaN(byte) || byte < 0)
            throw new Error('Invalid byte sequence');
        array[i] = byte;
    }
    return array;
}
// There is no setImmediate in browser and setTimeout is slow. However, call to async function will return Promise
// which will be fullfiled only on next scheduler queue processing step and this is exactly what we need.
const nextTick = async () => { };
// Returns control to thread each 'tick' ms to avoid blocking
async function asyncLoop(iters, tick, cb) {
    let ts = Date.now();
    for (let i = 0; i < iters; i++) {
        cb(i);
        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too
        const diff = Date.now() - ts;
        if (diff >= 0 && diff < tick)
            continue;
        await nextTick();
        ts += diff;
    }
}
function utf8ToBytes(str) {
    if (typeof str !== 'string') {
        throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);
    }
    return new TextEncoder().encode(str);
}
function toBytes(data) {
    if (typeof data === 'string')
        data = utf8ToBytes(data);
    if (!(data instanceof Uint8Array))
        throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);
    return data;
}
/**
 * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`
 * @example concatBytes(buf1, buf2)
 */
function concatBytes(...arrays) {
    if (!arrays.every((a) => a instanceof Uint8Array))
        throw new Error('Uint8Array list expected');
    if (arrays.length === 1)
        return arrays[0];
    const length = arrays.reduce((a, arr) => a + arr.length, 0);
    const result = new Uint8Array(length);
    for (let i = 0, pad = 0; i < arrays.length; i++) {
        const arr = arrays[i];
        result.set(arr, pad);
        pad += arr.length;
    }
    return result;
}
// For runtime check if class implements interface
class Hash {
    // Safe version that clones internal state
    clone() {
        return this._cloneInto();
    }
}
// Check if object doens't have custom constructor (like Uint8Array/Array)
const isPlainObject = (obj) => Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;
function checkOpts(defaults, opts) {
    if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))
        throw new TypeError('Options should be object or undefined');
    const merged = Object.assign(defaults, opts);
    return merged;
}
function wrapConstructor(hashConstructor) {
    const hashC = (message) => hashConstructor().update(toBytes(message)).digest();
    const tmp = hashConstructor();
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = () => hashConstructor();
    return hashC;
}
function wrapConstructorWithOpts(hashCons) {
    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
    const tmp = hashCons({});
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = (opts) => hashCons(opts);
    return hashC;
}
/**
 * Secure PRNG
 */
function randomBytes(bytesLength = 32) {
    if (_noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_0__.crypto.web) {
        return _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_0__.crypto.web.getRandomValues(new Uint8Array(bytesLength));
    }
    else if (_noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_0__.crypto.node) {
        return new Uint8Array(_noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_0__.crypto.node.randomBytes(bytesLength).buffer);
    }
    else {
        throw new Error("The environment doesn't have randomBytes function");
    }
}


/***/ }),

/***/ "./node_modules/capi/esm/_dnt.shims.js":
/*!*********************************************!*\
  !*** ./node_modules/capi/esm/_dnt.shims.js ***!
  \*********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Deno": function() { return /* reexport safe */ _deno_shim_deno_test__WEBPACK_IMPORTED_MODULE_0__.Deno; },
/* harmony export */   "dntGlobalThis": function() { return /* binding */ dntGlobalThis; }
/* harmony export */ });
/* harmony import */ var _deno_shim_deno_test__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @deno/shim-deno-test */ "./node_modules/@deno/shim-deno-test/dist/index.js");


const dntGlobals = {
    Deno: _deno_shim_deno_test__WEBPACK_IMPORTED_MODULE_0__.Deno,
};
const dntGlobalThis = createMergeProxy(globalThis, dntGlobals);
// deno-lint-ignore ban-types
function createMergeProxy(baseObj, extObj) {
    return new Proxy(baseObj, {
        get(_target, prop, _receiver) {
            if (prop in extObj) {
                return extObj[prop];
            }
            else {
                return baseObj[prop];
            }
        },
        set(_target, prop, value) {
            if (prop in extObj) {
                delete extObj[prop];
            }
            baseObj[prop] = value;
            return true;
        },
        deleteProperty(_target, prop) {
            let success = false;
            if (prop in extObj) {
                delete extObj[prop];
                success = true;
            }
            if (prop in baseObj) {
                delete baseObj[prop];
                success = true;
            }
            return success;
        },
        ownKeys(_target) {
            const baseKeys = Reflect.ownKeys(baseObj);
            const extKeys = Reflect.ownKeys(extObj);
            const extKeysSet = new Set(extKeys);
            return [...baseKeys.filter((k) => !extKeysSet.has(k)), ...extKeys];
        },
        defineProperty(_target, prop, desc) {
            if (prop in extObj) {
                delete extObj[prop];
            }
            Reflect.defineProperty(baseObj, prop, desc);
            return true;
        },
        getOwnPropertyDescriptor(_target, prop) {
            if (prop in extObj) {
                return Reflect.getOwnPropertyDescriptor(extObj, prop);
            }
            else {
                return Reflect.getOwnPropertyDescriptor(baseObj, prop);
            }
        },
        has(_target, prop) {
            return prop in extObj || prop in baseObj;
        },
    });
}
//# sourceMappingURL=_dnt.shims.js.map

/***/ }),

/***/ "./node_modules/capi/esm/config/mod.js":
/*!*********************************************!*\
  !*** ./node_modules/capi/esm/config/mod.js ***!
  \*********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Config": function() { return /* binding */ Config; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/capi/node_modules/tslib/tslib.es6.js");
var _Config_discoveryValue;

class Config {
    constructor(initDiscoveryValue, addressPrefix) {
        Object.defineProperty(this, "initDiscoveryValue", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: initDiscoveryValue
        });
        Object.defineProperty(this, "addressPrefix", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: addressPrefix
        });
        // TODO: get rid of this gunk
        Object.defineProperty(this, "RpcMethods", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "RpcCallMethods", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "RpcSubscriptionMethods", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "RpcErrorDetails", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        _Config_discoveryValue.set(this, void 0);
    }
    get discoveryValue() {
        if (!(0,tslib__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _Config_discoveryValue, "f")) {
            (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _Config_discoveryValue, this.initDiscoveryValue(), "f");
        }
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _Config_discoveryValue, "f");
    }
}
_Config_discoveryValue = new WeakMap();
//# sourceMappingURL=mod.js.map

/***/ }),

/***/ "./node_modules/capi/esm/deps/blake2b.js":
/*!***********************************************!*\
  !*** ./node_modules/capi/esm/deps/blake2b.js ***!
  \***********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "blake2b": function() { return /* reexport safe */ _noble_hashes_blake2b__WEBPACK_IMPORTED_MODULE_0__.blake2b; }
/* harmony export */ });
/* harmony import */ var _noble_hashes_blake2b__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/blake2b */ "./node_modules/@noble/hashes/esm/blake2b.js");

//# sourceMappingURL=blake2b.js.map

/***/ }),

/***/ "./node_modules/capi/esm/deps/scale.js":
/*!*********************************************!*\
  !*** ./node_modules/capi/esm/deps/scale.js ***!
  \*********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BitSequence": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.BitSequence; },
/* harmony export */   "CodecError": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.CodecError; },
/* harmony export */   "CodecVisitor": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.CodecVisitor; },
/* harmony export */   "Context": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.Context; },
/* harmony export */   "DecodeBuffer": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.DecodeBuffer; },
/* harmony export */   "DecodeError": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.DecodeError; },
/* harmony export */   "EncodeBuffer": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.EncodeBuffer; },
/* harmony export */   "EncodeError": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.EncodeError; },
/* harmony export */   "array": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.array; },
/* harmony export */   "bitSequence": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.bitSequence; },
/* harmony export */   "bool": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.bool; },
/* harmony export */   "compactU128": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.compactU128; },
/* harmony export */   "compactU16": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.compactU16; },
/* harmony export */   "compactU256": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.compactU256; },
/* harmony export */   "compactU32": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.compactU32; },
/* harmony export */   "compactU64": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.compactU64; },
/* harmony export */   "compactU8": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.compactU8; },
/* harmony export */   "constantPattern": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.constantPattern; },
/* harmony export */   "createAsyncCodec": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.createAsyncCodec; },
/* harmony export */   "createCodec": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.createCodec; },
/* harmony export */   "deferred": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.deferred; },
/* harmony export */   "dummy": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.dummy; },
/* harmony export */   "i128": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.i128; },
/* harmony export */   "i16": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.i16; },
/* harmony export */   "i256": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.i256; },
/* harmony export */   "i32": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.i32; },
/* harmony export */   "i64": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.i64; },
/* harmony export */   "i8": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.i8; },
/* harmony export */   "instance": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.instance; },
/* harmony export */   "int": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.int; },
/* harmony export */   "iterable": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.iterable; },
/* harmony export */   "lenPrefixed": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.lenPrefixed; },
/* harmony export */   "map": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.map; },
/* harmony export */   "never": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.never; },
/* harmony export */   "object": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.object; },
/* harmony export */   "option": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.option; },
/* harmony export */   "optionBool": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.optionBool; },
/* harmony export */   "promise": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.promise; },
/* harmony export */   "result": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.result; },
/* harmony export */   "set": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.set; },
/* harmony export */   "sizedArray": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.sizedArray; },
/* harmony export */   "sizedUint8Array": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.sizedUint8Array; },
/* harmony export */   "sizedUint8array": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.sizedUint8array; },
/* harmony export */   "spread": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.spread; },
/* harmony export */   "str": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.str; },
/* harmony export */   "stringUnion": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.stringUnion; },
/* harmony export */   "taggedUnion": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.taggedUnion; },
/* harmony export */   "transform": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.transform; },
/* harmony export */   "tuple": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.tuple; },
/* harmony export */   "u128": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.u128; },
/* harmony export */   "u16": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.u16; },
/* harmony export */   "u256": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.u256; },
/* harmony export */   "u32": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.u32; },
/* harmony export */   "u64": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.u64; },
/* harmony export */   "u8": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.u8; },
/* harmony export */   "uint8Array": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.uint8Array; },
/* harmony export */   "uint8array": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.uint8array; },
/* harmony export */   "union": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.union; },
/* harmony export */   "withMetadata": function() { return /* reexport safe */ parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__.withMetadata; }
/* harmony export */ });
/* harmony import */ var parity_scale_codec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! parity-scale-codec */ "./node_modules/parity-scale-codec/esm/mod.js");

//# sourceMappingURL=scale.js.map

/***/ }),

/***/ "./node_modules/capi/esm/deps/std/async.js":
/*!*************************************************!*\
  !*** ./node_modules/capi/esm/deps/std/async.js ***!
  \*************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DeadlineError": function() { return /* reexport safe */ _deps_2_deno_land_std_0_127_0_async_mod_js__WEBPACK_IMPORTED_MODULE_0__.DeadlineError; },
/* harmony export */   "MuxAsyncIterator": function() { return /* reexport safe */ _deps_2_deno_land_std_0_127_0_async_mod_js__WEBPACK_IMPORTED_MODULE_0__.MuxAsyncIterator; },
/* harmony export */   "deadline": function() { return /* reexport safe */ _deps_2_deno_land_std_0_127_0_async_mod_js__WEBPACK_IMPORTED_MODULE_0__.deadline; },
/* harmony export */   "debounce": function() { return /* reexport safe */ _deps_2_deno_land_std_0_127_0_async_mod_js__WEBPACK_IMPORTED_MODULE_0__.debounce; },
/* harmony export */   "deferred": function() { return /* reexport safe */ _deps_2_deno_land_std_0_127_0_async_mod_js__WEBPACK_IMPORTED_MODULE_0__.deferred; },
/* harmony export */   "delay": function() { return /* reexport safe */ _deps_2_deno_land_std_0_127_0_async_mod_js__WEBPACK_IMPORTED_MODULE_0__.delay; },
/* harmony export */   "pooledMap": function() { return /* reexport safe */ _deps_2_deno_land_std_0_127_0_async_mod_js__WEBPACK_IMPORTED_MODULE_0__.pooledMap; },
/* harmony export */   "tee": function() { return /* reexport safe */ _deps_2_deno_land_std_0_127_0_async_mod_js__WEBPACK_IMPORTED_MODULE_0__.tee; }
/* harmony export */ });
/* harmony import */ var _deps_2_deno_land_std_0_127_0_async_mod_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../deps_2/deno.land/std@0.127.0/async/mod.js */ "./node_modules/capi/esm/deps_2/deno.land/std@0.127.0/async/mod.js");

//# sourceMappingURL=async.js.map

/***/ }),

/***/ "./node_modules/capi/esm/deps/std/encoding/base58.js":
/*!***********************************************************!*\
  !*** ./node_modules/capi/esm/deps/std/encoding/base58.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "decode": function() { return /* reexport safe */ _deps_2_deno_land_std_0_154_0_encoding_base58_js__WEBPACK_IMPORTED_MODULE_0__.decode; },
/* harmony export */   "encode": function() { return /* reexport safe */ _deps_2_deno_land_std_0_154_0_encoding_base58_js__WEBPACK_IMPORTED_MODULE_0__.encode; }
/* harmony export */ });
/* harmony import */ var _deps_2_deno_land_std_0_154_0_encoding_base58_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../deps_2/deno.land/std@0.154.0/encoding/base58.js */ "./node_modules/capi/esm/deps_2/deno.land/std@0.154.0/encoding/base58.js");

//# sourceMappingURL=base58.js.map

/***/ }),

/***/ "./node_modules/capi/esm/deps/std/encoding/hex.js":
/*!********************************************************!*\
  !*** ./node_modules/capi/esm/deps/std/encoding/hex.js ***!
  \********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "decode": function() { return /* reexport safe */ _deps_2_deno_land_std_0_127_0_encoding_hex_js__WEBPACK_IMPORTED_MODULE_0__.decode; },
/* harmony export */   "encode": function() { return /* reexport safe */ _deps_2_deno_land_std_0_127_0_encoding_hex_js__WEBPACK_IMPORTED_MODULE_0__.encode; }
/* harmony export */ });
/* harmony import */ var _deps_2_deno_land_std_0_127_0_encoding_hex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../deps_2/deno.land/std@0.127.0/encoding/hex.js */ "./node_modules/capi/esm/deps_2/deno.land/std@0.127.0/encoding/hex.js");

//# sourceMappingURL=hex.js.map

/***/ }),

/***/ "./node_modules/capi/esm/deps/std/testing/asserts.js":
/*!***********************************************************!*\
  !*** ./node_modules/capi/esm/deps/std/testing/asserts.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AssertionError": function() { return /* reexport safe */ _deps_2_deno_land_std_0_158_0_testing_asserts_js__WEBPACK_IMPORTED_MODULE_0__.AssertionError; },
/* harmony export */   "assert": function() { return /* reexport safe */ _deps_2_deno_land_std_0_158_0_testing_asserts_js__WEBPACK_IMPORTED_MODULE_0__.assert; },
/* harmony export */   "assertAlmostEquals": function() { return /* reexport safe */ _deps_2_deno_land_std_0_158_0_testing_asserts_js__WEBPACK_IMPORTED_MODULE_0__.assertAlmostEquals; },
/* harmony export */   "assertArrayIncludes": function() { return /* reexport safe */ _deps_2_deno_land_std_0_158_0_testing_asserts_js__WEBPACK_IMPORTED_MODULE_0__.assertArrayIncludes; },
/* harmony export */   "assertEquals": function() { return /* reexport safe */ _deps_2_deno_land_std_0_158_0_testing_asserts_js__WEBPACK_IMPORTED_MODULE_0__.assertEquals; },
/* harmony export */   "assertExists": function() { return /* reexport safe */ _deps_2_deno_land_std_0_158_0_testing_asserts_js__WEBPACK_IMPORTED_MODULE_0__.assertExists; },
/* harmony export */   "assertFalse": function() { return /* reexport safe */ _deps_2_deno_land_std_0_158_0_testing_asserts_js__WEBPACK_IMPORTED_MODULE_0__.assertFalse; },
/* harmony export */   "assertInstanceOf": function() { return /* reexport safe */ _deps_2_deno_land_std_0_158_0_testing_asserts_js__WEBPACK_IMPORTED_MODULE_0__.assertInstanceOf; },
/* harmony export */   "assertIsError": function() { return /* reexport safe */ _deps_2_deno_land_std_0_158_0_testing_asserts_js__WEBPACK_IMPORTED_MODULE_0__.assertIsError; },
/* harmony export */   "assertMatch": function() { return /* reexport safe */ _deps_2_deno_land_std_0_158_0_testing_asserts_js__WEBPACK_IMPORTED_MODULE_0__.assertMatch; },
/* harmony export */   "assertNotEquals": function() { return /* reexport safe */ _deps_2_deno_land_std_0_158_0_testing_asserts_js__WEBPACK_IMPORTED_MODULE_0__.assertNotEquals; },
/* harmony export */   "assertNotInstanceOf": function() { return /* reexport safe */ _deps_2_deno_land_std_0_158_0_testing_asserts_js__WEBPACK_IMPORTED_MODULE_0__.assertNotInstanceOf; },
/* harmony export */   "assertNotMatch": function() { return /* reexport safe */ _deps_2_deno_land_std_0_158_0_testing_asserts_js__WEBPACK_IMPORTED_MODULE_0__.assertNotMatch; },
/* harmony export */   "assertNotStrictEquals": function() { return /* reexport safe */ _deps_2_deno_land_std_0_158_0_testing_asserts_js__WEBPACK_IMPORTED_MODULE_0__.assertNotStrictEquals; },
/* harmony export */   "assertObjectMatch": function() { return /* reexport safe */ _deps_2_deno_land_std_0_158_0_testing_asserts_js__WEBPACK_IMPORTED_MODULE_0__.assertObjectMatch; },
/* harmony export */   "assertRejects": function() { return /* reexport safe */ _deps_2_deno_land_std_0_158_0_testing_asserts_js__WEBPACK_IMPORTED_MODULE_0__.assertRejects; },
/* harmony export */   "assertStrictEquals": function() { return /* reexport safe */ _deps_2_deno_land_std_0_158_0_testing_asserts_js__WEBPACK_IMPORTED_MODULE_0__.assertStrictEquals; },
/* harmony export */   "assertStringIncludes": function() { return /* reexport safe */ _deps_2_deno_land_std_0_158_0_testing_asserts_js__WEBPACK_IMPORTED_MODULE_0__.assertStringIncludes; },
/* harmony export */   "assertThrows": function() { return /* reexport safe */ _deps_2_deno_land_std_0_158_0_testing_asserts_js__WEBPACK_IMPORTED_MODULE_0__.assertThrows; },
/* harmony export */   "equal": function() { return /* reexport safe */ _deps_2_deno_land_std_0_158_0_testing_asserts_js__WEBPACK_IMPORTED_MODULE_0__.equal; },
/* harmony export */   "fail": function() { return /* reexport safe */ _deps_2_deno_land_std_0_158_0_testing_asserts_js__WEBPACK_IMPORTED_MODULE_0__.fail; },
/* harmony export */   "unimplemented": function() { return /* reexport safe */ _deps_2_deno_land_std_0_158_0_testing_asserts_js__WEBPACK_IMPORTED_MODULE_0__.unimplemented; },
/* harmony export */   "unreachable": function() { return /* reexport safe */ _deps_2_deno_land_std_0_158_0_testing_asserts_js__WEBPACK_IMPORTED_MODULE_0__.unreachable; }
/* harmony export */ });
/* harmony import */ var _deps_2_deno_land_std_0_158_0_testing_asserts_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../deps_2/deno.land/std@0.158.0/testing/asserts.js */ "./node_modules/capi/esm/deps_2/deno.land/std@0.158.0/testing/asserts.js");

//# sourceMappingURL=asserts.js.map

/***/ }),

/***/ "./node_modules/capi/esm/deps_2/deno.land/std@0.127.0/async/deadline.js":
/*!******************************************************************************!*\
  !*** ./node_modules/capi/esm/deps_2/deno.land/std@0.127.0/async/deadline.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DeadlineError": function() { return /* binding */ DeadlineError; },
/* harmony export */   "deadline": function() { return /* binding */ deadline; }
/* harmony export */ });
/* harmony import */ var _deferred_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./deferred.js */ "./node_modules/capi/esm/deps_2/deno.land/std@0.127.0/async/deferred.js");
// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.

class DeadlineError extends Error {
    constructor() {
        super("Deadline");
        this.name = "DeadlineError";
    }
}
/**
 * Create a promise which will be rejected with DeadlineError when a given delay is exceeded.
 */
function deadline(p, delay) {
    const d = (0,_deferred_js__WEBPACK_IMPORTED_MODULE_0__.deferred)();
    const t = setTimeout(() => d.reject(new DeadlineError()), delay);
    return Promise.race([p, d]).finally(() => clearTimeout(t));
}
//# sourceMappingURL=deadline.js.map

/***/ }),

/***/ "./node_modules/capi/esm/deps_2/deno.land/std@0.127.0/async/debounce.js":
/*!******************************************************************************!*\
  !*** ./node_modules/capi/esm/deps_2/deno.land/std@0.127.0/async/debounce.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "debounce": function() { return /* binding */ debounce; }
/* harmony export */ });
// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.
/**
 * Creates a debounced function that delays the given `func`
 * by a given `wait` time in milliseconds. If the method is called
 * again before the timeout expires, the previous call will be
 * aborted.
 *
 * ```
 * import { debounce } from "./debounce.ts";
 *
 * const log = debounce(
 *   (event: Deno.FsEvent) =>
 *     console.log("[%s] %s", event.kind, event.paths[0]),
 *   200,
 * );
 *
 * for await (const event of Deno.watchFs("./")) {
 *   log(event);
 * }
 * ```
 *
 * @param fn    The function to debounce.
 * @param wait  The time in milliseconds to delay the function.
 */
// deno-lint-ignore no-explicit-any
function debounce(fn, wait) {
    let timeout = null;
    let flush = null;
    const debounced = ((...args) => {
        debounced.clear();
        flush = () => {
            debounced.clear();
            fn.call(debounced, ...args);
        };
        timeout = setTimeout(flush, wait);
    });
    debounced.clear = () => {
        if (typeof timeout === "number") {
            clearTimeout(timeout);
            timeout = null;
            flush = null;
        }
    };
    debounced.flush = () => {
        flush?.();
    };
    Object.defineProperty(debounced, "pending", {
        get: () => typeof timeout === "number",
    });
    return debounced;
}
//# sourceMappingURL=debounce.js.map

/***/ }),

/***/ "./node_modules/capi/esm/deps_2/deno.land/std@0.127.0/async/deferred.js":
/*!******************************************************************************!*\
  !*** ./node_modules/capi/esm/deps_2/deno.land/std@0.127.0/async/deferred.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "deferred": function() { return /* binding */ deferred; }
/* harmony export */ });
/** Creates a Promise with the `reject` and `resolve` functions
 * placed as methods on the promise object itself. It allows you to do:
 *
 * ```ts
 *     import { deferred } from "./deferred.ts";
 *
 *     const p = deferred<number>();
 *     // ...
 *     p.resolve(42);
 * ```
 */
function deferred() {
    let methods;
    let state = "pending";
    const promise = new Promise((resolve, reject) => {
        methods = {
            async resolve(value) {
                await value;
                state = "fulfilled";
                resolve(value);
            },
            // deno-lint-ignore no-explicit-any
            reject(reason) {
                state = "rejected";
                reject(reason);
            },
        };
    });
    Object.defineProperty(promise, "state", { get: () => state });
    return Object.assign(promise, methods);
}
//# sourceMappingURL=deferred.js.map

/***/ }),

/***/ "./node_modules/capi/esm/deps_2/deno.land/std@0.127.0/async/delay.js":
/*!***************************************************************************!*\
  !*** ./node_modules/capi/esm/deps_2/deno.land/std@0.127.0/async/delay.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "delay": function() { return /* binding */ delay; }
/* harmony export */ });
// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.
/* Resolves after the given number of milliseconds. */
function delay(ms, options = {}) {
    const { signal } = options;
    if (signal?.aborted) {
        return Promise.reject(new DOMException("Delay was aborted.", "AbortError"));
    }
    return new Promise((resolve, reject) => {
        const abort = () => {
            clearTimeout(i);
            reject(new DOMException("Delay was aborted.", "AbortError"));
        };
        const done = () => {
            signal?.removeEventListener("abort", abort);
            resolve();
        };
        const i = setTimeout(done, ms);
        signal?.addEventListener("abort", abort, { once: true });
    });
}
//# sourceMappingURL=delay.js.map

/***/ }),

/***/ "./node_modules/capi/esm/deps_2/deno.land/std@0.127.0/async/mod.js":
/*!*************************************************************************!*\
  !*** ./node_modules/capi/esm/deps_2/deno.land/std@0.127.0/async/mod.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DeadlineError": function() { return /* reexport safe */ _deadline_js__WEBPACK_IMPORTED_MODULE_6__.DeadlineError; },
/* harmony export */   "MuxAsyncIterator": function() { return /* reexport safe */ _mux_async_iterator_js__WEBPACK_IMPORTED_MODULE_3__.MuxAsyncIterator; },
/* harmony export */   "deadline": function() { return /* reexport safe */ _deadline_js__WEBPACK_IMPORTED_MODULE_6__.deadline; },
/* harmony export */   "debounce": function() { return /* reexport safe */ _debounce_js__WEBPACK_IMPORTED_MODULE_0__.debounce; },
/* harmony export */   "deferred": function() { return /* reexport safe */ _deferred_js__WEBPACK_IMPORTED_MODULE_1__.deferred; },
/* harmony export */   "delay": function() { return /* reexport safe */ _delay_js__WEBPACK_IMPORTED_MODULE_2__.delay; },
/* harmony export */   "pooledMap": function() { return /* reexport safe */ _pool_js__WEBPACK_IMPORTED_MODULE_4__.pooledMap; },
/* harmony export */   "tee": function() { return /* reexport safe */ _tee_js__WEBPACK_IMPORTED_MODULE_5__.tee; }
/* harmony export */ });
/* harmony import */ var _debounce_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./debounce.js */ "./node_modules/capi/esm/deps_2/deno.land/std@0.127.0/async/debounce.js");
/* harmony import */ var _deferred_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./deferred.js */ "./node_modules/capi/esm/deps_2/deno.land/std@0.127.0/async/deferred.js");
/* harmony import */ var _delay_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./delay.js */ "./node_modules/capi/esm/deps_2/deno.land/std@0.127.0/async/delay.js");
/* harmony import */ var _mux_async_iterator_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./mux_async_iterator.js */ "./node_modules/capi/esm/deps_2/deno.land/std@0.127.0/async/mux_async_iterator.js");
/* harmony import */ var _pool_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./pool.js */ "./node_modules/capi/esm/deps_2/deno.land/std@0.127.0/async/pool.js");
/* harmony import */ var _tee_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./tee.js */ "./node_modules/capi/esm/deps_2/deno.land/std@0.127.0/async/tee.js");
/* harmony import */ var _deadline_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./deadline.js */ "./node_modules/capi/esm/deps_2/deno.land/std@0.127.0/async/deadline.js");
// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.







//# sourceMappingURL=mod.js.map

/***/ }),

/***/ "./node_modules/capi/esm/deps_2/deno.land/std@0.127.0/async/mux_async_iterator.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/capi/esm/deps_2/deno.land/std@0.127.0/async/mux_async_iterator.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MuxAsyncIterator": function() { return /* binding */ MuxAsyncIterator; }
/* harmony export */ });
/* harmony import */ var _deferred_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./deferred.js */ "./node_modules/capi/esm/deps_2/deno.land/std@0.127.0/async/deferred.js");
// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.

/** The MuxAsyncIterator class multiplexes multiple async iterators into a
 * single stream. It currently makes an assumption:
 * - The final result (the value returned and not yielded from the iterator)
 *   does not matter; if there is any, it is discarded.
 */
class MuxAsyncIterator {
    constructor() {
        Object.defineProperty(this, "iteratorCount", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "yields", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        // deno-lint-ignore no-explicit-any
        Object.defineProperty(this, "throws", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(this, "signal", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (0,_deferred_js__WEBPACK_IMPORTED_MODULE_0__.deferred)()
        });
    }
    add(iterable) {
        ++this.iteratorCount;
        this.callIteratorNext(iterable[Symbol.asyncIterator]());
    }
    async callIteratorNext(iterator) {
        try {
            const { value, done } = await iterator.next();
            if (done) {
                --this.iteratorCount;
            }
            else {
                this.yields.push({ iterator, value });
            }
        }
        catch (e) {
            this.throws.push(e);
        }
        this.signal.resolve();
    }
    async *iterate() {
        while (this.iteratorCount > 0) {
            // Sleep until any of the wrapped iterators yields.
            await this.signal;
            // Note that while we're looping over `yields`, new items may be added.
            for (let i = 0; i < this.yields.length; i++) {
                const { iterator, value } = this.yields[i];
                yield value;
                this.callIteratorNext(iterator);
            }
            if (this.throws.length) {
                for (const e of this.throws) {
                    throw e;
                }
                this.throws.length = 0;
            }
            // Clear the `yields` list and reset the `signal` promise.
            this.yields.length = 0;
            this.signal = (0,_deferred_js__WEBPACK_IMPORTED_MODULE_0__.deferred)();
        }
    }
    [Symbol.asyncIterator]() {
        return this.iterate();
    }
}
//# sourceMappingURL=mux_async_iterator.js.map

/***/ }),

/***/ "./node_modules/capi/esm/deps_2/deno.land/std@0.127.0/async/pool.js":
/*!**************************************************************************!*\
  !*** ./node_modules/capi/esm/deps_2/deno.land/std@0.127.0/async/pool.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "pooledMap": function() { return /* binding */ pooledMap; }
/* harmony export */ });
// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.
/**
 * pooledMap transforms values from an (async) iterable into another async
 * iterable. The transforms are done concurrently, with a max concurrency
 * defined by the poolLimit.
 *
 * If an error is thrown from `iterableFn`, no new transformations will begin.
 * All currently executing transformations are allowed to finish and still
 * yielded on success. After that, the rejections among them are gathered and
 * thrown by the iterator in an `AggregateError`.
 *
 * @param poolLimit The maximum count of items being processed concurrently.
 * @param array The input array for mapping.
 * @param iteratorFn The function to call for every item of the array.
 */
function pooledMap(poolLimit, array, iteratorFn) {
    // Create the async iterable that is returned from this function.
    const res = new TransformStream({
        async transform(p, controller) {
            controller.enqueue(await p);
        },
    });
    // Start processing items from the iterator
    (async () => {
        const writer = res.writable.getWriter();
        const executing = [];
        try {
            for await (const item of array) {
                const p = Promise.resolve().then(() => iteratorFn(item));
                // Only write on success. If we `writer.write()` a rejected promise,
                // that will end the iteration. We don't want that yet. Instead let it
                // fail the race, taking us to the catch block where all currently
                // executing jobs are allowed to finish and all rejections among them
                // can be reported together.
                p.then((v) => writer.write(Promise.resolve(v))).catch(() => { });
                const e = p.then(() => executing.splice(executing.indexOf(e), 1));
                executing.push(e);
                if (executing.length >= poolLimit) {
                    await Promise.race(executing);
                }
            }
            // Wait until all ongoing events have processed, then close the writer.
            await Promise.all(executing);
            writer.close();
        }
        catch {
            const errors = [];
            for (const result of await Promise.allSettled(executing)) {
                if (result.status == "rejected") {
                    errors.push(result.reason);
                }
            }
            writer.write(Promise.reject(new AggregateError(errors, "Threw while mapping."))).catch(() => { });
        }
    })();
    return res.readable[Symbol.asyncIterator]();
}
//# sourceMappingURL=pool.js.map

/***/ }),

/***/ "./node_modules/capi/esm/deps_2/deno.land/std@0.127.0/async/tee.js":
/*!*************************************************************************!*\
  !*** ./node_modules/capi/esm/deps_2/deno.land/std@0.127.0/async/tee.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "tee": function() { return /* binding */ tee; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/capi/node_modules/tslib/tslib.es6.js");
// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.
var _Queue_source, _Queue_queue;

class Queue {
    constructor(iterable) {
        _Queue_source.set(this, void 0);
        _Queue_queue.set(this, void 0);
        Object.defineProperty(this, "head", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "done", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _Queue_source, iterable[Symbol.asyncIterator](), "f");
        (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _Queue_queue, {
            value: undefined,
            next: undefined,
        }, "f");
        this.head = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _Queue_queue, "f");
        this.done = false;
    }
    async next() {
        const result = await (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _Queue_source, "f").next();
        if (!result.done) {
            const nextNode = {
                value: result.value,
                next: undefined,
            };
            (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _Queue_queue, "f").next = nextNode;
            (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _Queue_queue, nextNode, "f");
        }
        else {
            this.done = true;
        }
    }
}
_Queue_source = new WeakMap(), _Queue_queue = new WeakMap();
/**
 * Branches the given async iterable into the n branches.
 *
 * Example:
 *
 * ```ts
 *     import { tee } from "./tee.ts";
 *
 *     const gen = async function* gen() {
 *       yield 1;
 *       yield 2;
 *       yield 3;
 *     }
 *
 *     const [branch1, branch2] = tee(gen());
 *
 *     (async () => {
 *       for await (const n of branch1) {
 *         console.log(n); // => 1, 2, 3
 *       }
 *     })();
 *
 *     (async () => {
 *       for await (const n of branch2) {
 *         console.log(n); // => 1, 2, 3
 *       }
 *     })();
 * ```
 */
function tee(iterable, n = 2) {
    const queue = new Queue(iterable);
    async function* generator() {
        let buffer = queue.head;
        while (true) {
            if (buffer.next) {
                buffer = buffer.next;
                yield buffer.value;
            }
            else if (queue.done) {
                return;
            }
            else {
                await queue.next();
            }
        }
    }
    const branches = Array.from({ length: n }).map(() => generator());
    return branches;
}
//# sourceMappingURL=tee.js.map

/***/ }),

/***/ "./node_modules/capi/esm/deps_2/deno.land/std@0.127.0/encoding/hex.js":
/*!****************************************************************************!*\
  !*** ./node_modules/capi/esm/deps_2/deno.land/std@0.127.0/encoding/hex.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "decode": function() { return /* binding */ decode; },
/* harmony export */   "encode": function() { return /* binding */ encode; }
/* harmony export */ });
// Ported from Go
// https://github.com/golang/go/blob/go1.12.5/src/encoding/hex/hex.go
// Copyright 2009 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.
// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.
const hexTable = new TextEncoder().encode("0123456789abcdef");
function errInvalidByte(byte) {
    return new TypeError(`Invalid byte '${String.fromCharCode(byte)}'`);
}
function errLength() {
    return new RangeError("Odd length hex string");
}
/** Converts a hex character into its value. */
function fromHexChar(byte) {
    // '0' <= byte && byte <= '9'
    if (48 <= byte && byte <= 57)
        return byte - 48;
    // 'a' <= byte && byte <= 'f'
    if (97 <= byte && byte <= 102)
        return byte - 97 + 10;
    // 'A' <= byte && byte <= 'F'
    if (65 <= byte && byte <= 70)
        return byte - 65 + 10;
    throw errInvalidByte(byte);
}
/** Encodes `src` into `src.length * 2` bytes. */
function encode(src) {
    const dst = new Uint8Array(src.length * 2);
    for (let i = 0; i < dst.length; i++) {
        const v = src[i];
        dst[i * 2] = hexTable[v >> 4];
        dst[i * 2 + 1] = hexTable[v & 0x0f];
    }
    return dst;
}
/**
 * Decodes `src` into `src.length / 2` bytes.
 * If the input is malformed, an error will be thrown.
 */
function decode(src) {
    const dst = new Uint8Array(src.length / 2);
    for (let i = 0; i < dst.length; i++) {
        const a = fromHexChar(src[i * 2]);
        const b = fromHexChar(src[i * 2 + 1]);
        dst[i] = (a << 4) | b;
    }
    if (src.length % 2 == 1) {
        // Check for invalid char before reporting bad length,
        // since the invalid char (if present) is an earlier problem.
        fromHexChar(src[dst.length * 2]);
        throw errLength();
    }
    return dst;
}
//# sourceMappingURL=hex.js.map

/***/ }),

/***/ "./node_modules/capi/esm/deps_2/deno.land/std@0.154.0/encoding/base58.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/capi/esm/deps_2/deno.land/std@0.154.0/encoding/base58.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "decode": function() { return /* binding */ decode; },
/* harmony export */   "encode": function() { return /* binding */ encode; }
/* harmony export */ });
// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.
// deno-fmt-ignore
const mapBase58 = {
    "1": 0, "2": 1, "3": 2, "4": 3, "5": 4, "6": 5, "7": 6, "8": 7, "9": 8, A: 9,
    B: 10, C: 11, D: 12, E: 13, F: 14, G: 15, H: 16, J: 17, K: 18, L: 19, M: 20,
    N: 21, P: 22, Q: 23, R: 24, S: 25, T: 26, U: 27, V: 28, W: 29, X: 30, Y: 31,
    Z: 32, a: 33, b: 34, c: 35, d: 36, e: 37, f: 38, g: 39, h: 40, i: 41, j: 42,
    k: 43, m: 44, n: 45, o: 46, p: 47, q: 48, r: 49, s: 50, t: 51, u: 52, v: 53,
    w: 54, x: 55, y: 56, z: 57
};
const base58alphabet = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz".split("");
/**
 * Encodes a given Uint8Array, ArrayBuffer or string into draft-mspotny-base58-03 RFC base58 representation:
 * https://tools.ietf.org/id/draft-msporny-base58-01.html#rfc.section.1
 *
 * @param {ArrayBuffer | string} data
 *
 * @returns {string} Encoded value
 */
function encode(data) {
    const uint8tData = typeof data === "string"
        ? new TextEncoder().encode(data)
        : data instanceof Uint8Array
            ? data
            : new Uint8Array(data);
    let length = 0;
    let zeroes = 0;
    // Counting leading zeroes
    let index = 0;
    while (uint8tData[index] === 0) {
        zeroes++;
        index++;
    }
    const notZeroUint8Data = uint8tData.slice(index);
    const size = Math.round((uint8tData.length * 138) / 100 + 1);
    const b58Encoding = [];
    notZeroUint8Data.forEach((byte) => {
        let i = 0;
        let carry = byte;
        for (let reverse_iterator = size - 1; (carry > 0 || i < length) && reverse_iterator !== -1; reverse_iterator--, i++) {
            carry += (b58Encoding[reverse_iterator] || 0) * 256;
            b58Encoding[reverse_iterator] = Math.round(carry % 58);
            carry = Math.floor(carry / 58);
        }
        length = i;
    });
    const strResult = Array.from({
        length: b58Encoding.length + zeroes,
    });
    if (zeroes > 0) {
        strResult.fill("1", 0, zeroes);
    }
    b58Encoding.forEach((byteValue) => strResult.push(base58alphabet[byteValue]));
    return strResult.join("");
}
/**
 * Decodes a given b58 string according to draft-mspotny-base58-03 RFC base58 representation:
 * https://tools.ietf.org/id/draft-msporny-base58-01.html#rfc.section.1
 *
 * @param {string} b58
 *
 * @returns {Uint8Array} Decoded value
 */
function decode(b58) {
    const splittedInput = b58.trim().split("");
    let length = 0;
    let ones = 0;
    // Counting leading ones
    let index = 0;
    while (splittedInput[index] === "1") {
        ones++;
        index++;
    }
    const notZeroData = splittedInput.slice(index);
    const size = Math.round((b58.length * 733) / 1000 + 1);
    const output = [];
    notZeroData.forEach((char, idx) => {
        let carry = mapBase58[char];
        let i = 0;
        if (carry === undefined) {
            throw new Error(`Invalid base58 char at index ${idx} with value ${char}`);
        }
        for (let reverse_iterator = size - 1; (carry > 0 || i < length) && reverse_iterator !== 0; --reverse_iterator, ++i) {
            carry += 58 * (output[reverse_iterator - 1] || 0);
            output[reverse_iterator - 1] = Math.round(carry % 256);
            carry = Math.floor(carry / 256);
        }
        length = i;
    });
    const validOutput = output.filter((item) => item ?? false);
    if (ones > 0) {
        const onesResult = Array.from({ length: ones }).fill(0, 0, ones);
        return new Uint8Array([...onesResult, ...validOutput]);
    }
    return new Uint8Array(validOutput);
}
//# sourceMappingURL=base58.js.map

/***/ }),

/***/ "./node_modules/capi/esm/deps_2/deno.land/std@0.158.0/fmt/colors.js":
/*!**************************************************************************!*\
  !*** ./node_modules/capi/esm/deps_2/deno.land/std@0.158.0/fmt/colors.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bgBlack": function() { return /* binding */ bgBlack; },
/* harmony export */   "bgBlue": function() { return /* binding */ bgBlue; },
/* harmony export */   "bgBrightBlack": function() { return /* binding */ bgBrightBlack; },
/* harmony export */   "bgBrightBlue": function() { return /* binding */ bgBrightBlue; },
/* harmony export */   "bgBrightCyan": function() { return /* binding */ bgBrightCyan; },
/* harmony export */   "bgBrightGreen": function() { return /* binding */ bgBrightGreen; },
/* harmony export */   "bgBrightMagenta": function() { return /* binding */ bgBrightMagenta; },
/* harmony export */   "bgBrightRed": function() { return /* binding */ bgBrightRed; },
/* harmony export */   "bgBrightWhite": function() { return /* binding */ bgBrightWhite; },
/* harmony export */   "bgBrightYellow": function() { return /* binding */ bgBrightYellow; },
/* harmony export */   "bgCyan": function() { return /* binding */ bgCyan; },
/* harmony export */   "bgGreen": function() { return /* binding */ bgGreen; },
/* harmony export */   "bgMagenta": function() { return /* binding */ bgMagenta; },
/* harmony export */   "bgRed": function() { return /* binding */ bgRed; },
/* harmony export */   "bgRgb24": function() { return /* binding */ bgRgb24; },
/* harmony export */   "bgRgb8": function() { return /* binding */ bgRgb8; },
/* harmony export */   "bgWhite": function() { return /* binding */ bgWhite; },
/* harmony export */   "bgYellow": function() { return /* binding */ bgYellow; },
/* harmony export */   "black": function() { return /* binding */ black; },
/* harmony export */   "blue": function() { return /* binding */ blue; },
/* harmony export */   "bold": function() { return /* binding */ bold; },
/* harmony export */   "brightBlack": function() { return /* binding */ brightBlack; },
/* harmony export */   "brightBlue": function() { return /* binding */ brightBlue; },
/* harmony export */   "brightCyan": function() { return /* binding */ brightCyan; },
/* harmony export */   "brightGreen": function() { return /* binding */ brightGreen; },
/* harmony export */   "brightMagenta": function() { return /* binding */ brightMagenta; },
/* harmony export */   "brightRed": function() { return /* binding */ brightRed; },
/* harmony export */   "brightWhite": function() { return /* binding */ brightWhite; },
/* harmony export */   "brightYellow": function() { return /* binding */ brightYellow; },
/* harmony export */   "cyan": function() { return /* binding */ cyan; },
/* harmony export */   "dim": function() { return /* binding */ dim; },
/* harmony export */   "getColorEnabled": function() { return /* binding */ getColorEnabled; },
/* harmony export */   "gray": function() { return /* binding */ gray; },
/* harmony export */   "green": function() { return /* binding */ green; },
/* harmony export */   "hidden": function() { return /* binding */ hidden; },
/* harmony export */   "inverse": function() { return /* binding */ inverse; },
/* harmony export */   "italic": function() { return /* binding */ italic; },
/* harmony export */   "magenta": function() { return /* binding */ magenta; },
/* harmony export */   "red": function() { return /* binding */ red; },
/* harmony export */   "reset": function() { return /* binding */ reset; },
/* harmony export */   "rgb24": function() { return /* binding */ rgb24; },
/* harmony export */   "rgb8": function() { return /* binding */ rgb8; },
/* harmony export */   "setColorEnabled": function() { return /* binding */ setColorEnabled; },
/* harmony export */   "strikethrough": function() { return /* binding */ strikethrough; },
/* harmony export */   "stripColor": function() { return /* binding */ stripColor; },
/* harmony export */   "underline": function() { return /* binding */ underline; },
/* harmony export */   "white": function() { return /* binding */ white; },
/* harmony export */   "yellow": function() { return /* binding */ yellow; }
/* harmony export */ });
/* harmony import */ var _dnt_shims_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../_dnt.shims.js */ "./node_modules/capi/esm/_dnt.shims.js");
// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.
// A module to print ANSI terminal colors. Inspired by chalk, kleur, and colors
// on npm.
/**
 * String formatters and utilities for dealing with ANSI color codes.
 *
 * This module is browser compatible.
 *
 * ```ts
 * import { bgBlue, red, bold } from "https://deno.land/std@$STD_VERSION/fmt/colors.ts";
 * console.log(bgBlue(red(bold("Hello world!"))));
 * ```
 *
 * This module supports `NO_COLOR` environmental variable disabling any coloring
 * if `NO_COLOR` is set.
 *
 * @module
 */
// deno-lint-ignore no-explicit-any

const { Deno } = _dnt_shims_js__WEBPACK_IMPORTED_MODULE_0__.dntGlobalThis;
const noColor = typeof Deno?.noColor === "boolean"
    ? Deno.noColor
    : true;
let enabled = !noColor;
/**
 * Set changing text color to enabled or disabled
 * @param value
 */
function setColorEnabled(value) {
    if (noColor) {
        return;
    }
    enabled = value;
}
/** Get whether text color change is enabled or disabled. */
function getColorEnabled() {
    return enabled;
}
/**
 * Builds color code
 * @param open
 * @param close
 */
function code(open, close) {
    return {
        open: `\x1b[${open.join(";")}m`,
        close: `\x1b[${close}m`,
        regexp: new RegExp(`\\x1b\\[${close}m`, "g"),
    };
}
/**
 * Applies color and background based on color code and its associated text
 * @param str text to apply color settings to
 * @param code color code to apply
 */
function run(str, code) {
    return enabled
        ? `${code.open}${str.replace(code.regexp, code.open)}${code.close}`
        : str;
}
/**
 * Reset the text modified
 * @param str text to reset
 */
function reset(str) {
    return run(str, code([0], 0));
}
/**
 * Make the text bold.
 * @param str text to make bold
 */
function bold(str) {
    return run(str, code([1], 22));
}
/**
 * The text emits only a small amount of light.
 * @param str text to dim
 */
function dim(str) {
    return run(str, code([2], 22));
}
/**
 * Make the text italic.
 * @param str text to make italic
 */
function italic(str) {
    return run(str, code([3], 23));
}
/**
 * Make the text underline.
 * @param str text to underline
 */
function underline(str) {
    return run(str, code([4], 24));
}
/**
 * Invert background color and text color.
 * @param str text to invert its color
 */
function inverse(str) {
    return run(str, code([7], 27));
}
/**
 * Make the text hidden.
 * @param str text to hide
 */
function hidden(str) {
    return run(str, code([8], 28));
}
/**
 * Put horizontal line through the center of the text.
 * @param str text to strike through
 */
function strikethrough(str) {
    return run(str, code([9], 29));
}
/**
 * Set text color to black.
 * @param str text to make black
 */
function black(str) {
    return run(str, code([30], 39));
}
/**
 * Set text color to red.
 * @param str text to make red
 */
function red(str) {
    return run(str, code([31], 39));
}
/**
 * Set text color to green.
 * @param str text to make green
 */
function green(str) {
    return run(str, code([32], 39));
}
/**
 * Set text color to yellow.
 * @param str text to make yellow
 */
function yellow(str) {
    return run(str, code([33], 39));
}
/**
 * Set text color to blue.
 * @param str text to make blue
 */
function blue(str) {
    return run(str, code([34], 39));
}
/**
 * Set text color to magenta.
 * @param str text to make magenta
 */
function magenta(str) {
    return run(str, code([35], 39));
}
/**
 * Set text color to cyan.
 * @param str text to make cyan
 */
function cyan(str) {
    return run(str, code([36], 39));
}
/**
 * Set text color to white.
 * @param str text to make white
 */
function white(str) {
    return run(str, code([37], 39));
}
/**
 * Set text color to gray.
 * @param str text to make gray
 */
function gray(str) {
    return brightBlack(str);
}
/**
 * Set text color to bright black.
 * @param str text to make bright-black
 */
function brightBlack(str) {
    return run(str, code([90], 39));
}
/**
 * Set text color to bright red.
 * @param str text to make bright-red
 */
function brightRed(str) {
    return run(str, code([91], 39));
}
/**
 * Set text color to bright green.
 * @param str text to make bright-green
 */
function brightGreen(str) {
    return run(str, code([92], 39));
}
/**
 * Set text color to bright yellow.
 * @param str text to make bright-yellow
 */
function brightYellow(str) {
    return run(str, code([93], 39));
}
/**
 * Set text color to bright blue.
 * @param str text to make bright-blue
 */
function brightBlue(str) {
    return run(str, code([94], 39));
}
/**
 * Set text color to bright magenta.
 * @param str text to make bright-magenta
 */
function brightMagenta(str) {
    return run(str, code([95], 39));
}
/**
 * Set text color to bright cyan.
 * @param str text to make bright-cyan
 */
function brightCyan(str) {
    return run(str, code([96], 39));
}
/**
 * Set text color to bright white.
 * @param str text to make bright-white
 */
function brightWhite(str) {
    return run(str, code([97], 39));
}
/**
 * Set background color to black.
 * @param str text to make its background black
 */
function bgBlack(str) {
    return run(str, code([40], 49));
}
/**
 * Set background color to red.
 * @param str text to make its background red
 */
function bgRed(str) {
    return run(str, code([41], 49));
}
/**
 * Set background color to green.
 * @param str text to make its background green
 */
function bgGreen(str) {
    return run(str, code([42], 49));
}
/**
 * Set background color to yellow.
 * @param str text to make its background yellow
 */
function bgYellow(str) {
    return run(str, code([43], 49));
}
/**
 * Set background color to blue.
 * @param str text to make its background blue
 */
function bgBlue(str) {
    return run(str, code([44], 49));
}
/**
 *  Set background color to magenta.
 * @param str text to make its background magenta
 */
function bgMagenta(str) {
    return run(str, code([45], 49));
}
/**
 * Set background color to cyan.
 * @param str text to make its background cyan
 */
function bgCyan(str) {
    return run(str, code([46], 49));
}
/**
 * Set background color to white.
 * @param str text to make its background white
 */
function bgWhite(str) {
    return run(str, code([47], 49));
}
/**
 * Set background color to bright black.
 * @param str text to make its background bright-black
 */
function bgBrightBlack(str) {
    return run(str, code([100], 49));
}
/**
 * Set background color to bright red.
 * @param str text to make its background bright-red
 */
function bgBrightRed(str) {
    return run(str, code([101], 49));
}
/**
 * Set background color to bright green.
 * @param str text to make its background bright-green
 */
function bgBrightGreen(str) {
    return run(str, code([102], 49));
}
/**
 * Set background color to bright yellow.
 * @param str text to make its background bright-yellow
 */
function bgBrightYellow(str) {
    return run(str, code([103], 49));
}
/**
 * Set background color to bright blue.
 * @param str text to make its background bright-blue
 */
function bgBrightBlue(str) {
    return run(str, code([104], 49));
}
/**
 * Set background color to bright magenta.
 * @param str text to make its background bright-magenta
 */
function bgBrightMagenta(str) {
    return run(str, code([105], 49));
}
/**
 * Set background color to bright cyan.
 * @param str text to make its background bright-cyan
 */
function bgBrightCyan(str) {
    return run(str, code([106], 49));
}
/**
 * Set background color to bright white.
 * @param str text to make its background bright-white
 */
function bgBrightWhite(str) {
    return run(str, code([107], 49));
}
/* Special Color Sequences */
/**
 * Clam and truncate color codes
 * @param n
 * @param max number to truncate to
 * @param min number to truncate from
 */
function clampAndTruncate(n, max = 255, min = 0) {
    return Math.trunc(Math.max(Math.min(n, max), min));
}
/**
 * Set text color using paletted 8bit colors.
 * https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit
 * @param str text color to apply paletted 8bit colors to
 * @param color code
 */
function rgb8(str, color) {
    return run(str, code([38, 5, clampAndTruncate(color)], 39));
}
/**
 * Set background color using paletted 8bit colors.
 * https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit
 * @param str text color to apply paletted 8bit background colors to
 * @param color code
 */
function bgRgb8(str, color) {
    return run(str, code([48, 5, clampAndTruncate(color)], 49));
}
/**
 * Set text color using 24bit rgb.
 * `color` can be a number in range `0x000000` to `0xffffff` or
 * an `Rgb`.
 *
 * To produce the color magenta:
 *
 * ```ts
 *      import { rgb24 } from "./colors.ts";
 *      rgb24("foo", 0xff00ff);
 *      rgb24("foo", {r: 255, g: 0, b: 255});
 * ```
 * @param str text color to apply 24bit rgb to
 * @param color code
 */
function rgb24(str, color) {
    if (typeof color === "number") {
        return run(str, code([38, 2, (color >> 16) & 0xff, (color >> 8) & 0xff, color & 0xff], 39));
    }
    return run(str, code([
        38,
        2,
        clampAndTruncate(color.r),
        clampAndTruncate(color.g),
        clampAndTruncate(color.b),
    ], 39));
}
/**
 * Set background color using 24bit rgb.
 * `color` can be a number in range `0x000000` to `0xffffff` or
 * an `Rgb`.
 *
 * To produce the color magenta:
 *
 * ```ts
 *      import { bgRgb24 } from "./colors.ts";
 *      bgRgb24("foo", 0xff00ff);
 *      bgRgb24("foo", {r: 255, g: 0, b: 255});
 * ```
 * @param str text color to apply 24bit rgb to
 * @param color code
 */
function bgRgb24(str, color) {
    if (typeof color === "number") {
        return run(str, code([48, 2, (color >> 16) & 0xff, (color >> 8) & 0xff, color & 0xff], 49));
    }
    return run(str, code([
        48,
        2,
        clampAndTruncate(color.r),
        clampAndTruncate(color.g),
        clampAndTruncate(color.b),
    ], 49));
}
// https://github.com/chalk/ansi-regex/blob/02fa893d619d3da85411acc8fd4e2eea0e95a9d9/index.js
const ANSI_PATTERN = new RegExp([
    "[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)",
    "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-nq-uy=><~]))",
].join("|"), "g");
/**
 * Remove ANSI escape codes from the string.
 * @param string to remove ANSI escape codes from
 */
function stripColor(string) {
    return string.replace(ANSI_PATTERN, "");
}
//# sourceMappingURL=colors.js.map

/***/ }),

/***/ "./node_modules/capi/esm/deps_2/deno.land/std@0.158.0/testing/_diff.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/capi/esm/deps_2/deno.land/std@0.158.0/testing/_diff.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DiffType": function() { return /* binding */ DiffType; },
/* harmony export */   "buildMessage": function() { return /* binding */ buildMessage; },
/* harmony export */   "diff": function() { return /* binding */ diff; },
/* harmony export */   "diffstr": function() { return /* binding */ diffstr; }
/* harmony export */ });
/* harmony import */ var _fmt_colors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../fmt/colors.js */ "./node_modules/capi/esm/deps_2/deno.land/std@0.158.0/fmt/colors.js");
// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.
// This module is browser compatible.

var DiffType;
(function (DiffType) {
    DiffType["removed"] = "removed";
    DiffType["common"] = "common";
    DiffType["added"] = "added";
})(DiffType || (DiffType = {}));
const REMOVED = 1;
const COMMON = 2;
const ADDED = 3;
function createCommon(A, B, reverse) {
    const common = [];
    if (A.length === 0 || B.length === 0)
        return [];
    for (let i = 0; i < Math.min(A.length, B.length); i += 1) {
        if (A[reverse ? A.length - i - 1 : i] === B[reverse ? B.length - i - 1 : i]) {
            common.push(A[reverse ? A.length - i - 1 : i]);
        }
        else {
            return common;
        }
    }
    return common;
}
/**
 * Renders the differences between the actual and expected values
 * @param A Actual value
 * @param B Expected value
 */
function diff(A, B) {
    const prefixCommon = createCommon(A, B);
    const suffixCommon = createCommon(A.slice(prefixCommon.length), B.slice(prefixCommon.length), true).reverse();
    A = suffixCommon.length
        ? A.slice(prefixCommon.length, -suffixCommon.length)
        : A.slice(prefixCommon.length);
    B = suffixCommon.length
        ? B.slice(prefixCommon.length, -suffixCommon.length)
        : B.slice(prefixCommon.length);
    const swapped = B.length > A.length;
    [A, B] = swapped ? [B, A] : [A, B];
    const M = A.length;
    const N = B.length;
    if (!M && !N && !suffixCommon.length && !prefixCommon.length)
        return [];
    if (!N) {
        return [
            ...prefixCommon.map((c) => ({ type: DiffType.common, value: c })),
            ...A.map((a) => ({
                type: swapped ? DiffType.added : DiffType.removed,
                value: a,
            })),
            ...suffixCommon.map((c) => ({ type: DiffType.common, value: c })),
        ];
    }
    const offset = N;
    const delta = M - N;
    const size = M + N + 1;
    const fp = Array.from({ length: size }, () => ({ y: -1, id: -1 }));
    /**
     * INFO:
     * This buffer is used to save memory and improve performance.
     * The first half is used to save route and last half is used to save diff
     * type.
     * This is because, when I kept new uint8array area to save type,performance
     * worsened.
     */
    const routes = new Uint32Array((M * N + size + 1) * 2);
    const diffTypesPtrOffset = routes.length / 2;
    let ptr = 0;
    let p = -1;
    function backTrace(A, B, current, swapped) {
        const M = A.length;
        const N = B.length;
        const result = [];
        let a = M - 1;
        let b = N - 1;
        let j = routes[current.id];
        let type = routes[current.id + diffTypesPtrOffset];
        while (true) {
            if (!j && !type)
                break;
            const prev = j;
            if (type === REMOVED) {
                result.unshift({
                    type: swapped ? DiffType.removed : DiffType.added,
                    value: B[b],
                });
                b -= 1;
            }
            else if (type === ADDED) {
                result.unshift({
                    type: swapped ? DiffType.added : DiffType.removed,
                    value: A[a],
                });
                a -= 1;
            }
            else {
                result.unshift({ type: DiffType.common, value: A[a] });
                a -= 1;
                b -= 1;
            }
            j = routes[prev];
            type = routes[prev + diffTypesPtrOffset];
        }
        return result;
    }
    function createFP(slide, down, k, M) {
        if (slide && slide.y === -1 && down && down.y === -1) {
            return { y: 0, id: 0 };
        }
        if ((down && down.y === -1) ||
            k === M ||
            (slide && slide.y) > (down && down.y) + 1) {
            const prev = slide.id;
            ptr++;
            routes[ptr] = prev;
            routes[ptr + diffTypesPtrOffset] = ADDED;
            return { y: slide.y, id: ptr };
        }
        else {
            const prev = down.id;
            ptr++;
            routes[ptr] = prev;
            routes[ptr + diffTypesPtrOffset] = REMOVED;
            return { y: down.y + 1, id: ptr };
        }
    }
    function snake(k, slide, down, _offset, A, B) {
        const M = A.length;
        const N = B.length;
        if (k < -N || M < k)
            return { y: -1, id: -1 };
        const fp = createFP(slide, down, k, M);
        while (fp.y + k < M && fp.y < N && A[fp.y + k] === B[fp.y]) {
            const prev = fp.id;
            ptr++;
            fp.id = ptr;
            fp.y += 1;
            routes[ptr] = prev;
            routes[ptr + diffTypesPtrOffset] = COMMON;
        }
        return fp;
    }
    while (fp[delta + offset].y < N) {
        p = p + 1;
        for (let k = -p; k < delta; ++k) {
            fp[k + offset] = snake(k, fp[k - 1 + offset], fp[k + 1 + offset], offset, A, B);
        }
        for (let k = delta + p; k > delta; --k) {
            fp[k + offset] = snake(k, fp[k - 1 + offset], fp[k + 1 + offset], offset, A, B);
        }
        fp[delta + offset] = snake(delta, fp[delta - 1 + offset], fp[delta + 1 + offset], offset, A, B);
    }
    return [
        ...prefixCommon.map((c) => ({ type: DiffType.common, value: c })),
        ...backTrace(A, B, fp[delta + offset], swapped),
        ...suffixCommon.map((c) => ({ type: DiffType.common, value: c })),
    ];
}
/**
 * Renders the differences between the actual and expected strings
 * Partially inspired from https://github.com/kpdecker/jsdiff
 * @param A Actual string
 * @param B Expected string
 */
function diffstr(A, B) {
    function unescape(string) {
        // unescape invisible characters.
        // ref: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#escape_sequences
        return string
            .replaceAll("\b", "\\b")
            .replaceAll("\f", "\\f")
            .replaceAll("\t", "\\t")
            .replaceAll("\v", "\\v")
            .replaceAll(// does not remove line breaks
        /\r\n|\r|\n/g, (str) => str === "\r" ? "\\r" : str === "\n" ? "\\n\n" : "\\r\\n\r\n");
    }
    function tokenize(string, { wordDiff = false } = {}) {
        if (wordDiff) {
            // Split string on whitespace symbols
            const tokens = string.split(/([^\S\r\n]+|[()[\]{}'"\r\n]|\b)/);
            // Extended Latin character set
            const words = /^[a-zA-Z\u{C0}-\u{FF}\u{D8}-\u{F6}\u{F8}-\u{2C6}\u{2C8}-\u{2D7}\u{2DE}-\u{2FF}\u{1E00}-\u{1EFF}]+$/u;
            // Join boundary splits that we do not consider to be boundaries and merge empty strings surrounded by word chars
            for (let i = 0; i < tokens.length - 1; i++) {
                if (!tokens[i + 1] && tokens[i + 2] && words.test(tokens[i]) &&
                    words.test(tokens[i + 2])) {
                    tokens[i] += tokens[i + 2];
                    tokens.splice(i + 1, 2);
                    i--;
                }
            }
            return tokens.filter((token) => token);
        }
        else {
            // Split string on new lines symbols
            const tokens = [], lines = string.split(/(\n|\r\n)/);
            // Ignore final empty token when text ends with a newline
            if (!lines[lines.length - 1]) {
                lines.pop();
            }
            // Merge the content and line separators into single tokens
            for (let i = 0; i < lines.length; i++) {
                if (i % 2) {
                    tokens[tokens.length - 1] += lines[i];
                }
                else {
                    tokens.push(lines[i]);
                }
            }
            return tokens;
        }
    }
    // Create details by filtering relevant word-diff for current line
    // and merge "space-diff" if surrounded by word-diff for cleaner displays
    function createDetails(line, tokens) {
        return tokens.filter(({ type }) => type === line.type || type === DiffType.common).map((result, i, t) => {
            if ((result.type === DiffType.common) && (t[i - 1]) &&
                (t[i - 1]?.type === t[i + 1]?.type) && /\s+/.test(result.value)) {
                result.type = t[i - 1].type;
            }
            return result;
        });
    }
    // Compute multi-line diff
    const diffResult = diff(tokenize(`${unescape(A)}\n`), tokenize(`${unescape(B)}\n`));
    const added = [], removed = [];
    for (const result of diffResult) {
        if (result.type === DiffType.added) {
            added.push(result);
        }
        if (result.type === DiffType.removed) {
            removed.push(result);
        }
    }
    // Compute word-diff
    const aLines = added.length < removed.length ? added : removed;
    const bLines = aLines === removed ? added : removed;
    for (const a of aLines) {
        let tokens = [], b;
        // Search another diff line with at least one common token
        while (bLines.length) {
            b = bLines.shift();
            tokens = diff(tokenize(a.value, { wordDiff: true }), tokenize(b?.value ?? "", { wordDiff: true }));
            if (tokens.some(({ type, value }) => type === DiffType.common && value.trim().length)) {
                break;
            }
        }
        // Register word-diff details
        a.details = createDetails(a, tokens);
        if (b) {
            b.details = createDetails(b, tokens);
        }
    }
    return diffResult;
}
/**
 * Colors the output of assertion diffs
 * @param diffType Difference type, either added or removed
 */
function createColor(diffType, { background = false } = {}) {
    // TODO(@littledivy): Remove this when we can detect
    // true color terminals.
    // https://github.com/denoland/deno_std/issues/2575
    background = false;
    switch (diffType) {
        case DiffType.added:
            return (s) => background ? (0,_fmt_colors_js__WEBPACK_IMPORTED_MODULE_0__.bgGreen)((0,_fmt_colors_js__WEBPACK_IMPORTED_MODULE_0__.white)(s)) : (0,_fmt_colors_js__WEBPACK_IMPORTED_MODULE_0__.green)((0,_fmt_colors_js__WEBPACK_IMPORTED_MODULE_0__.bold)(s));
        case DiffType.removed:
            return (s) => background ? (0,_fmt_colors_js__WEBPACK_IMPORTED_MODULE_0__.bgRed)((0,_fmt_colors_js__WEBPACK_IMPORTED_MODULE_0__.white)(s)) : (0,_fmt_colors_js__WEBPACK_IMPORTED_MODULE_0__.red)((0,_fmt_colors_js__WEBPACK_IMPORTED_MODULE_0__.bold)(s));
        default:
            return _fmt_colors_js__WEBPACK_IMPORTED_MODULE_0__.white;
    }
}
/**
 * Prefixes `+` or `-` in diff output
 * @param diffType Difference type, either added or removed
 */
function createSign(diffType) {
    switch (diffType) {
        case DiffType.added:
            return "+   ";
        case DiffType.removed:
            return "-   ";
        default:
            return "    ";
    }
}
function buildMessage(diffResult, { stringDiff = false } = {}) {
    const messages = [], diffMessages = [];
    messages.push("");
    messages.push("");
    messages.push(`    ${(0,_fmt_colors_js__WEBPACK_IMPORTED_MODULE_0__.gray)((0,_fmt_colors_js__WEBPACK_IMPORTED_MODULE_0__.bold)("[Diff]"))} ${(0,_fmt_colors_js__WEBPACK_IMPORTED_MODULE_0__.red)((0,_fmt_colors_js__WEBPACK_IMPORTED_MODULE_0__.bold)("Actual"))} / ${(0,_fmt_colors_js__WEBPACK_IMPORTED_MODULE_0__.green)((0,_fmt_colors_js__WEBPACK_IMPORTED_MODULE_0__.bold)("Expected"))}`);
    messages.push("");
    messages.push("");
    diffResult.forEach((result) => {
        const c = createColor(result.type);
        const line = result.details?.map((detail) => detail.type !== DiffType.common
            ? createColor(detail.type, { background: true })(detail.value)
            : detail.value).join("") ?? result.value;
        diffMessages.push(c(`${createSign(result.type)}${line}`));
    });
    messages.push(...(stringDiff ? [diffMessages.join("")] : diffMessages));
    messages.push("");
    return messages;
}
//# sourceMappingURL=_diff.js.map

/***/ }),

/***/ "./node_modules/capi/esm/deps_2/deno.land/std@0.158.0/testing/_format.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/capi/esm/deps_2/deno.land/std@0.158.0/testing/_format.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "format": function() { return /* binding */ format; }
/* harmony export */ });
/* harmony import */ var _dnt_shims_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../_dnt.shims.js */ "./node_modules/capi/esm/_dnt.shims.js");
// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.
// This module is browser compatible.
/**
 * Converts the input into a string. Objects, Sets and Maps are sorted so as to
 * make tests less flaky
 * @param v Value to be formatted
 */

function format(v) {
    // deno-lint-ignore no-explicit-any
    const { Deno } = _dnt_shims_js__WEBPACK_IMPORTED_MODULE_0__.dntGlobalThis;
    return typeof Deno?.inspect === "function"
        ? Deno.inspect(v, {
            depth: Infinity,
            sorted: true,
            trailingComma: true,
            compact: false,
            iterableLimit: Infinity,
            // getters should be true in assertEquals.
            getters: true,
        })
        : `"${String(v).replace(/(?=["\\])/g, "\\")}"`;
}
//# sourceMappingURL=_format.js.map

/***/ }),

/***/ "./node_modules/capi/esm/deps_2/deno.land/std@0.158.0/testing/asserts.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/capi/esm/deps_2/deno.land/std@0.158.0/testing/asserts.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AssertionError": function() { return /* binding */ AssertionError; },
/* harmony export */   "assert": function() { return /* binding */ assert; },
/* harmony export */   "assertAlmostEquals": function() { return /* binding */ assertAlmostEquals; },
/* harmony export */   "assertArrayIncludes": function() { return /* binding */ assertArrayIncludes; },
/* harmony export */   "assertEquals": function() { return /* binding */ assertEquals; },
/* harmony export */   "assertExists": function() { return /* binding */ assertExists; },
/* harmony export */   "assertFalse": function() { return /* binding */ assertFalse; },
/* harmony export */   "assertInstanceOf": function() { return /* binding */ assertInstanceOf; },
/* harmony export */   "assertIsError": function() { return /* binding */ assertIsError; },
/* harmony export */   "assertMatch": function() { return /* binding */ assertMatch; },
/* harmony export */   "assertNotEquals": function() { return /* binding */ assertNotEquals; },
/* harmony export */   "assertNotInstanceOf": function() { return /* binding */ assertNotInstanceOf; },
/* harmony export */   "assertNotMatch": function() { return /* binding */ assertNotMatch; },
/* harmony export */   "assertNotStrictEquals": function() { return /* binding */ assertNotStrictEquals; },
/* harmony export */   "assertObjectMatch": function() { return /* binding */ assertObjectMatch; },
/* harmony export */   "assertRejects": function() { return /* binding */ assertRejects; },
/* harmony export */   "assertStrictEquals": function() { return /* binding */ assertStrictEquals; },
/* harmony export */   "assertStringIncludes": function() { return /* binding */ assertStringIncludes; },
/* harmony export */   "assertThrows": function() { return /* binding */ assertThrows; },
/* harmony export */   "equal": function() { return /* binding */ equal; },
/* harmony export */   "fail": function() { return /* binding */ fail; },
/* harmony export */   "unimplemented": function() { return /* binding */ unimplemented; },
/* harmony export */   "unreachable": function() { return /* binding */ unreachable; }
/* harmony export */ });
/* harmony import */ var _fmt_colors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../fmt/colors.js */ "./node_modules/capi/esm/deps_2/deno.land/std@0.158.0/fmt/colors.js");
/* harmony import */ var _diff_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_diff.js */ "./node_modules/capi/esm/deps_2/deno.land/std@0.158.0/testing/_diff.js");
/* harmony import */ var _format_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_format.js */ "./node_modules/capi/esm/deps_2/deno.land/std@0.158.0/testing/_format.js");
// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.
/** A library of assertion functions.
 *
 * This module is browser compatible, but do not rely on good formatting of
 * values for AssertionError messages in browsers.
 *
 * @module
 */



const CAN_NOT_DISPLAY = "[Cannot display]";
class AssertionError extends Error {
    constructor(message) {
        super(message);
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "AssertionError"
        });
    }
}
function isKeyedCollection(x) {
    return [Symbol.iterator, "size"].every((k) => k in x);
}
/**
 * Deep equality comparison used in assertions
 * @param c actual value
 * @param d expected value
 */
function equal(c, d) {
    const seen = new Map();
    return (function compare(a, b) {
        // Have to render RegExp & Date for string comparison
        // unless it's mistreated as object
        if (a &&
            b &&
            ((a instanceof RegExp && b instanceof RegExp) ||
                (a instanceof URL && b instanceof URL))) {
            return String(a) === String(b);
        }
        if (a instanceof Date && b instanceof Date) {
            const aTime = a.getTime();
            const bTime = b.getTime();
            // Check for NaN equality manually since NaN is not
            // equal to itself.
            if (Number.isNaN(aTime) && Number.isNaN(bTime)) {
                return true;
            }
            return aTime === bTime;
        }
        if (typeof a === "number" && typeof b === "number") {
            return Number.isNaN(a) && Number.isNaN(b) || a === b;
        }
        if (Object.is(a, b)) {
            return true;
        }
        if (a && typeof a === "object" && b && typeof b === "object") {
            if (a && b && !constructorsEqual(a, b)) {
                return false;
            }
            if (a instanceof WeakMap || b instanceof WeakMap) {
                if (!(a instanceof WeakMap && b instanceof WeakMap))
                    return false;
                throw new TypeError("cannot compare WeakMap instances");
            }
            if (a instanceof WeakSet || b instanceof WeakSet) {
                if (!(a instanceof WeakSet && b instanceof WeakSet))
                    return false;
                throw new TypeError("cannot compare WeakSet instances");
            }
            if (seen.get(a) === b) {
                return true;
            }
            if (Object.keys(a || {}).length !== Object.keys(b || {}).length) {
                return false;
            }
            seen.set(a, b);
            if (isKeyedCollection(a) && isKeyedCollection(b)) {
                if (a.size !== b.size) {
                    return false;
                }
                let unmatchedEntries = a.size;
                for (const [aKey, aValue] of a.entries()) {
                    for (const [bKey, bValue] of b.entries()) {
                        /* Given that Map keys can be references, we need
                         * to ensure that they are also deeply equal */
                        if ((aKey === aValue && bKey === bValue && compare(aKey, bKey)) ||
                            (compare(aKey, bKey) && compare(aValue, bValue))) {
                            unmatchedEntries--;
                            break;
                        }
                    }
                }
                return unmatchedEntries === 0;
            }
            const merged = { ...a, ...b };
            for (const key of [
                ...Object.getOwnPropertyNames(merged),
                ...Object.getOwnPropertySymbols(merged),
            ]) {
                if (!compare(a && a[key], b && b[key])) {
                    return false;
                }
                if (((key in a) && (!(key in b))) || ((key in b) && (!(key in a)))) {
                    return false;
                }
            }
            if (a instanceof WeakRef || b instanceof WeakRef) {
                if (!(a instanceof WeakRef && b instanceof WeakRef))
                    return false;
                return compare(a.deref(), b.deref());
            }
            return true;
        }
        return false;
    })(c, d);
}
// deno-lint-ignore ban-types
function constructorsEqual(a, b) {
    return a.constructor === b.constructor ||
        a.constructor === Object && !b.constructor ||
        !a.constructor && b.constructor === Object;
}
/** Make an assertion, error will be thrown if `expr` does not have truthy value. */
function assert(expr, msg = "") {
    if (!expr) {
        throw new AssertionError(msg);
    }
}
function assertFalse(expr, msg = "") {
    if (expr) {
        throw new AssertionError(msg);
    }
}
/**
 * Make an assertion that `actual` and `expected` are equal, deeply. If not
 * deeply equal, then throw.
 *
 * Type parameter can be specified to ensure values under comparison have the same type.
 * For example:
 * ```ts
 * import { assertEquals } from "./asserts.ts";
 *
 * assertEquals<number>(1, 2)
 * ```
 */
function assertEquals(actual, expected, msg) {
    if (equal(actual, expected)) {
        return;
    }
    let message = "";
    const actualString = (0,_format_js__WEBPACK_IMPORTED_MODULE_2__.format)(actual);
    const expectedString = (0,_format_js__WEBPACK_IMPORTED_MODULE_2__.format)(expected);
    try {
        const stringDiff = (typeof actual === "string") &&
            (typeof expected === "string");
        const diffResult = stringDiff
            ? (0,_diff_js__WEBPACK_IMPORTED_MODULE_1__.diffstr)(actual, expected)
            : (0,_diff_js__WEBPACK_IMPORTED_MODULE_1__.diff)(actualString.split("\n"), expectedString.split("\n"));
        const diffMsg = (0,_diff_js__WEBPACK_IMPORTED_MODULE_1__.buildMessage)(diffResult, { stringDiff }).join("\n");
        message = `Values are not equal:\n${diffMsg}`;
    }
    catch {
        message = `\n${(0,_fmt_colors_js__WEBPACK_IMPORTED_MODULE_0__.red)(CAN_NOT_DISPLAY)} + \n\n`;
    }
    if (msg) {
        message = msg;
    }
    throw new AssertionError(message);
}
/**
 * Make an assertion that `actual` and `expected` are not equal, deeply.
 * If not then throw.
 *
 * Type parameter can be specified to ensure values under comparison have the same type.
 * For example:
 * ```ts
 * import { assertNotEquals } from "./asserts.ts";
 *
 * assertNotEquals<number>(1, 2)
 * ```
 */
function assertNotEquals(actual, expected, msg) {
    if (!equal(actual, expected)) {
        return;
    }
    let actualString;
    let expectedString;
    try {
        actualString = String(actual);
    }
    catch {
        actualString = "[Cannot display]";
    }
    try {
        expectedString = String(expected);
    }
    catch {
        expectedString = "[Cannot display]";
    }
    if (!msg) {
        msg = `actual: ${actualString} expected not to be: ${expectedString}`;
    }
    throw new AssertionError(msg);
}
/**
 * Make an assertion that `actual` and `expected` are strictly equal. If
 * not then throw.
 *
 * ```ts
 * import { assertStrictEquals } from "./asserts.ts";
 *
 * assertStrictEquals(1, 2)
 * ```
 */
function assertStrictEquals(actual, expected, msg) {
    if (Object.is(actual, expected)) {
        return;
    }
    let message;
    if (msg) {
        message = msg;
    }
    else {
        const actualString = (0,_format_js__WEBPACK_IMPORTED_MODULE_2__.format)(actual);
        const expectedString = (0,_format_js__WEBPACK_IMPORTED_MODULE_2__.format)(expected);
        if (actualString === expectedString) {
            const withOffset = actualString
                .split("\n")
                .map((l) => `    ${l}`)
                .join("\n");
            message =
                `Values have the same structure but are not reference-equal:\n\n${(0,_fmt_colors_js__WEBPACK_IMPORTED_MODULE_0__.red)(withOffset)}\n`;
        }
        else {
            try {
                const stringDiff = (typeof actual === "string") &&
                    (typeof expected === "string");
                const diffResult = stringDiff
                    ? (0,_diff_js__WEBPACK_IMPORTED_MODULE_1__.diffstr)(actual, expected)
                    : (0,_diff_js__WEBPACK_IMPORTED_MODULE_1__.diff)(actualString.split("\n"), expectedString.split("\n"));
                const diffMsg = (0,_diff_js__WEBPACK_IMPORTED_MODULE_1__.buildMessage)(diffResult, { stringDiff }).join("\n");
                message = `Values are not strictly equal:\n${diffMsg}`;
            }
            catch {
                message = `\n${(0,_fmt_colors_js__WEBPACK_IMPORTED_MODULE_0__.red)(CAN_NOT_DISPLAY)} + \n\n`;
            }
        }
    }
    throw new AssertionError(message);
}
/**
 * Make an assertion that `actual` and `expected` are not strictly equal.
 * If the values are strictly equal then throw.
 *
 * ```ts
 * import { assertNotStrictEquals } from "./asserts.ts";
 *
 * assertNotStrictEquals(1, 1)
 * ```
 */
function assertNotStrictEquals(actual, expected, msg) {
    if (!Object.is(actual, expected)) {
        return;
    }
    throw new AssertionError(msg ?? `Expected "actual" to be strictly unequal to: ${(0,_format_js__WEBPACK_IMPORTED_MODULE_2__.format)(actual)}\n`);
}
/**
 * Make an assertion that `actual` and `expected` are almost equal numbers through
 * a given tolerance. It can be used to take into account IEEE-754 double-precision
 * floating-point representation limitations.
 * If the values are not almost equal then throw.
 *
 * ```ts
 * import { assertAlmostEquals, assertThrows } from "./asserts.ts";
 *
 * assertAlmostEquals(0.1, 0.2);
 *
 * // Using a custom tolerance value
 * assertAlmostEquals(0.1 + 0.2, 0.3, 1e-16);
 * assertThrows(() => assertAlmostEquals(0.1 + 0.2, 0.3, 1e-17));
 * ```
 */
function assertAlmostEquals(actual, expected, tolerance = 1e-7, msg) {
    if (Object.is(actual, expected)) {
        return;
    }
    const delta = Math.abs(expected - actual);
    if (delta <= tolerance) {
        return;
    }
    const f = (n) => Number.isInteger(n) ? n : n.toExponential();
    throw new AssertionError(msg ??
        `actual: "${f(actual)}" expected to be close to "${f(expected)}": \
delta "${f(delta)}" is greater than "${f(tolerance)}"`);
}
/**
 * Make an assertion that `obj` is an instance of `type`.
 * If not then throw.
 */
function assertInstanceOf(actual, expectedType, msg = "") {
    if (!msg) {
        const expectedTypeStr = expectedType.name;
        let actualTypeStr = "";
        if (actual === null) {
            actualTypeStr = "null";
        }
        else if (actual === undefined) {
            actualTypeStr = "undefined";
        }
        else if (typeof actual === "object") {
            actualTypeStr = actual.constructor?.name ?? "Object";
        }
        else {
            actualTypeStr = typeof actual;
        }
        if (expectedTypeStr == actualTypeStr) {
            msg = `Expected object to be an instance of "${expectedTypeStr}".`;
        }
        else if (actualTypeStr == "function") {
            msg =
                `Expected object to be an instance of "${expectedTypeStr}" but was not an instanced object.`;
        }
        else {
            msg =
                `Expected object to be an instance of "${expectedTypeStr}" but was "${actualTypeStr}".`;
        }
    }
    assert(actual instanceof expectedType, msg);
}
/**
 * Make an assertion that `obj` is not an instance of `type`.
 * If so, then throw.
 */
function assertNotInstanceOf(actual, 
// deno-lint-ignore no-explicit-any
unexpectedType, msg = `Expected object to not be an instance of "${typeof unexpectedType}"`) {
    assertFalse(actual instanceof unexpectedType, msg);
}
/**
 * Make an assertion that actual is not null or undefined.
 * If not then throw.
 */
function assertExists(actual, msg) {
    if (actual === undefined || actual === null) {
        if (!msg) {
            msg = `actual: "${actual}" expected to not be null or undefined`;
        }
        throw new AssertionError(msg);
    }
}
/**
 * Make an assertion that actual includes expected. If not
 * then throw.
 */
function assertStringIncludes(actual, expected, msg) {
    if (!actual.includes(expected)) {
        if (!msg) {
            msg = `actual: "${actual}" expected to contain: "${expected}"`;
        }
        throw new AssertionError(msg);
    }
}
/**
 * Make an assertion that `actual` includes the `expected` values.
 * If not then an error will be thrown.
 *
 * Type parameter can be specified to ensure values under comparison have the same type.
 * For example:
 *
 * ```ts
 * import { assertArrayIncludes } from "./asserts.ts";
 *
 * assertArrayIncludes<number>([1, 2], [2])
 * ```
 */
function assertArrayIncludes(actual, expected, msg) {
    const missing = [];
    for (let i = 0; i < expected.length; i++) {
        let found = false;
        for (let j = 0; j < actual.length; j++) {
            if (equal(expected[i], actual[j])) {
                found = true;
                break;
            }
        }
        if (!found) {
            missing.push(expected[i]);
        }
    }
    if (missing.length === 0) {
        return;
    }
    if (!msg) {
        msg = `actual: "${(0,_format_js__WEBPACK_IMPORTED_MODULE_2__.format)(actual)}" expected to include: "${(0,_format_js__WEBPACK_IMPORTED_MODULE_2__.format)(expected)}"\nmissing: ${(0,_format_js__WEBPACK_IMPORTED_MODULE_2__.format)(missing)}`;
    }
    throw new AssertionError(msg);
}
/**
 * Make an assertion that `actual` match RegExp `expected`. If not
 * then throw.
 */
function assertMatch(actual, expected, msg) {
    if (!expected.test(actual)) {
        if (!msg) {
            msg = `actual: "${actual}" expected to match: "${expected}"`;
        }
        throw new AssertionError(msg);
    }
}
/**
 * Make an assertion that `actual` not match RegExp `expected`. If match
 * then throw.
 */
function assertNotMatch(actual, expected, msg) {
    if (expected.test(actual)) {
        if (!msg) {
            msg = `actual: "${actual}" expected to not match: "${expected}"`;
        }
        throw new AssertionError(msg);
    }
}
/**
 * Make an assertion that `actual` object is a subset of `expected` object, deeply.
 * If not, then throw.
 */
function assertObjectMatch(
// deno-lint-ignore no-explicit-any
actual, expected) {
    function filter(a, b) {
        const seen = new WeakMap();
        return fn(a, b);
        function fn(a, b) {
            // Prevent infinite loop with circular references with same filter
            if ((seen.has(a)) && (seen.get(a) === b)) {
                return a;
            }
            seen.set(a, b);
            // Filter keys and symbols which are present in both actual and expected
            const filtered = {};
            const entries = [
                ...Object.getOwnPropertyNames(a),
                ...Object.getOwnPropertySymbols(a),
            ]
                .filter((key) => key in b)
                .map((key) => [key, a[key]]);
            for (const [key, value] of entries) {
                // On array references, build a filtered array and filter nested objects inside
                if (Array.isArray(value)) {
                    const subset = b[key];
                    if (Array.isArray(subset)) {
                        filtered[key] = fn({ ...value }, { ...subset });
                        continue;
                    }
                } // On regexp references, keep value as it to avoid loosing pattern and flags
                else if (value instanceof RegExp) {
                    filtered[key] = value;
                    continue;
                } // On nested objects references, build a filtered object recursively
                else if (typeof value === "object") {
                    const subset = b[key];
                    if ((typeof subset === "object") && (subset)) {
                        // When both operands are maps, build a filtered map with common keys and filter nested objects inside
                        if ((value instanceof Map) && (subset instanceof Map)) {
                            filtered[key] = new Map([...value].filter(([k]) => subset.has(k)).map(([k, v]) => [k, typeof v === "object" ? fn(v, subset.get(k)) : v]));
                            continue;
                        }
                        // When both operands are set, build a filtered set with common values
                        if ((value instanceof Set) && (subset instanceof Set)) {
                            filtered[key] = new Set([...value].filter((v) => subset.has(v)));
                            continue;
                        }
                        filtered[key] = fn(value, subset);
                        continue;
                    }
                }
                filtered[key] = value;
            }
            return filtered;
        }
    }
    return assertEquals(
    // get the intersection of "actual" and "expected"
    // side effect: all the instances' constructor field is "Object" now.
    filter(actual, expected), 
    // set (nested) instances' constructor field to be "Object" without changing expected value.
    // see https://github.com/denoland/deno_std/pull/1419
    filter(expected, expected));
}
/**
 * Forcefully throws a failed assertion
 */
function fail(msg) {
    assert(false, `Failed assertion${msg ? `: ${msg}` : "."}`);
}
/**
 * Make an assertion that `error` is an `Error`.
 * If not then an error will be thrown.
 * An error class and a string that should be included in the
 * error message can also be asserted.
 */
function assertIsError(error, 
// deno-lint-ignore no-explicit-any
ErrorClass, msgIncludes, msg) {
    if (error instanceof Error === false) {
        throw new AssertionError(`Expected "error" to be an Error object.`);
    }
    if (ErrorClass && !(error instanceof ErrorClass)) {
        msg = `Expected error to be instance of "${ErrorClass.name}", but was "${typeof error === "object" ? error?.constructor?.name : "[not an object]"}"${msg ? `: ${msg}` : "."}`;
        throw new AssertionError(msg);
    }
    if (msgIncludes && (!(error instanceof Error) ||
        !(0,_fmt_colors_js__WEBPACK_IMPORTED_MODULE_0__.stripColor)(error.message).includes((0,_fmt_colors_js__WEBPACK_IMPORTED_MODULE_0__.stripColor)(msgIncludes)))) {
        msg = `Expected error message to include "${msgIncludes}", but got "${error instanceof Error ? error.message : "[not an Error]"}"${msg ? `: ${msg}` : "."}`;
        throw new AssertionError(msg);
    }
}
function assertThrows(fn, errorClassOrCallbackOrMsg, msgIncludesOrMsg, msg) {
    // deno-lint-ignore no-explicit-any
    let ErrorClass = undefined;
    let msgIncludes = undefined;
    let errorCallback = undefined;
    let err;
    if (typeof errorClassOrCallbackOrMsg !== "string") {
        if (errorClassOrCallbackOrMsg === undefined ||
            errorClassOrCallbackOrMsg.prototype instanceof Error ||
            errorClassOrCallbackOrMsg.prototype === Error.prototype) {
            // deno-lint-ignore no-explicit-any
            ErrorClass = errorClassOrCallbackOrMsg;
            msgIncludes = msgIncludesOrMsg;
        }
        else {
            errorCallback = errorClassOrCallbackOrMsg;
            msg = msgIncludesOrMsg;
        }
    }
    else {
        msg = errorClassOrCallbackOrMsg;
    }
    let doesThrow = false;
    const msgToAppendToError = msg ? `: ${msg}` : ".";
    try {
        fn();
    }
    catch (error) {
        if (ErrorClass || errorCallback) {
            if (error instanceof Error === false) {
                throw new AssertionError("A non-Error object was thrown.");
            }
            assertIsError(error, ErrorClass, msgIncludes, msg);
            if (typeof errorCallback === "function") {
                errorCallback(error);
            }
        }
        err = error;
        doesThrow = true;
    }
    if (!doesThrow) {
        msg = `Expected function to throw${msgToAppendToError}`;
        throw new AssertionError(msg);
    }
    return err;
}
async function assertRejects(fn, errorClassOrCallbackOrMsg, msgIncludesOrMsg, msg) {
    // deno-lint-ignore no-explicit-any
    let ErrorClass = undefined;
    let msgIncludes = undefined;
    let errorCallback = undefined;
    let err;
    if (typeof errorClassOrCallbackOrMsg !== "string") {
        if (errorClassOrCallbackOrMsg === undefined ||
            errorClassOrCallbackOrMsg.prototype instanceof Error ||
            errorClassOrCallbackOrMsg.prototype === Error.prototype) {
            // deno-lint-ignore no-explicit-any
            ErrorClass = errorClassOrCallbackOrMsg;
            msgIncludes = msgIncludesOrMsg;
        }
        else {
            errorCallback = errorClassOrCallbackOrMsg;
            msg = msgIncludesOrMsg;
        }
    }
    else {
        msg = errorClassOrCallbackOrMsg;
    }
    let doesThrow = false;
    let isPromiseReturned = false;
    const msgToAppendToError = msg ? `: ${msg}` : ".";
    try {
        const possiblePromise = fn();
        if (possiblePromise &&
            typeof possiblePromise === "object" &&
            typeof possiblePromise.then === "function") {
            isPromiseReturned = true;
            await possiblePromise;
        }
    }
    catch (error) {
        if (!isPromiseReturned) {
            throw new AssertionError(`Function throws when expected to reject${msgToAppendToError}`);
        }
        if (ErrorClass || errorCallback) {
            if (error instanceof Error === false) {
                throw new AssertionError("A non-Error object was rejected.");
            }
            assertIsError(error, ErrorClass, msgIncludes, msg);
            if (typeof errorCallback == "function") {
                errorCallback(error);
            }
        }
        err = error;
        doesThrow = true;
    }
    if (!doesThrow) {
        throw new AssertionError(`Expected function to reject${msgToAppendToError}`);
    }
    return err;
}
/** Use this to stub out methods that will throw when invoked. */
function unimplemented(msg) {
    throw new AssertionError(msg || "unimplemented");
}
/** Use this to assert unreachable code. */
function unreachable() {
    throw new AssertionError("unreachable");
}
//# sourceMappingURL=asserts.js.map

/***/ }),

/***/ "./node_modules/capi/esm/effect/atoms/$Extrinsic.js":
/*!**********************************************************!*\
  !*** ./node_modules/capi/esm/effect/atoms/$Extrinsic.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$extrinsic": function() { return /* binding */ $extrinsic; }
/* harmony export */ });
/* harmony import */ var _frame_metadata_mod_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../frame_metadata/mod.js */ "./node_modules/capi/esm/frame_metadata/mod.js");
/* harmony import */ var _sys_Atom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../sys/Atom.js */ "./node_modules/capi/esm/effect/sys/Atom.js");


const $extrinsic = (0,_sys_Atom_js__WEBPACK_IMPORTED_MODULE_1__.atomFactory)("ExtrinsicCodec", (deriveCodec, metadata, sign, prefix) => {
    return _frame_metadata_mod_js__WEBPACK_IMPORTED_MODULE_0__.$extrinsic({
        deriveCodec,
        metadata,
        sign: sign,
        prefix: prefix,
    });
});
//# sourceMappingURL=$Extrinsic.js.map

/***/ }),

/***/ "./node_modules/capi/esm/effect/atoms/$Key.js":
/*!****************************************************!*\
  !*** ./node_modules/capi/esm/effect/atoms/$Key.js ***!
  \****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$key": function() { return /* binding */ $key; }
/* harmony export */ });
/* harmony import */ var _frame_metadata_mod_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../frame_metadata/mod.js */ "./node_modules/capi/esm/frame_metadata/mod.js");
/* harmony import */ var _sys_Atom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../sys/Atom.js */ "./node_modules/capi/esm/effect/sys/Atom.js");


const $key = (0,_sys_Atom_js__WEBPACK_IMPORTED_MODULE_1__.atomFactory)("KeyCodec", (deriveCodec, pallet, storageEntry) => {
    return _frame_metadata_mod_js__WEBPACK_IMPORTED_MODULE_0__.$storageKey({
        deriveCodec,
        pallet,
        storageEntry,
    });
});
//# sourceMappingURL=$Key.js.map

/***/ }),

/***/ "./node_modules/capi/esm/effect/atoms/$StorageKey.js":
/*!***********************************************************!*\
  !*** ./node_modules/capi/esm/effect/atoms/$StorageKey.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$storageKey": function() { return /* binding */ $storageKey; }
/* harmony export */ });
/* harmony import */ var _frame_metadata_mod_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../frame_metadata/mod.js */ "./node_modules/capi/esm/frame_metadata/mod.js");
/* harmony import */ var _sys_Atom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../sys/Atom.js */ "./node_modules/capi/esm/effect/sys/Atom.js");


const $storageKey = (0,_sys_Atom_js__WEBPACK_IMPORTED_MODULE_1__.atomFactory)("$StorageKey", (deriveCodec, pallet, storageEntry) => {
    return _frame_metadata_mod_js__WEBPACK_IMPORTED_MODULE_0__.$storageKey({
        deriveCodec,
        pallet,
        storageEntry,
    });
});
//# sourceMappingURL=$StorageKey.js.map

/***/ }),

/***/ "./node_modules/capi/esm/effect/atoms/Codec.js":
/*!*****************************************************!*\
  !*** ./node_modules/capi/esm/effect/atoms/Codec.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "codec": function() { return /* binding */ codec; }
/* harmony export */ });
/* harmony import */ var _sys_Atom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../sys/Atom.js */ "./node_modules/capi/esm/effect/sys/Atom.js");

const codec = (0,_sys_Atom_js__WEBPACK_IMPORTED_MODULE_0__.atomFactory)("Codec", (deriveCodec, ty) => {
    return deriveCodec(ty);
});
//# sourceMappingURL=Codec.js.map

/***/ }),

/***/ "./node_modules/capi/esm/effect/atoms/Decoded.js":
/*!*******************************************************!*\
  !*** ./node_modules/capi/esm/effect/atoms/Decoded.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "decoded": function() { return /* binding */ decoded; }
/* harmony export */ });
/* harmony import */ var _util_mod_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/mod.js */ "./node_modules/capi/esm/util/mod.js");
/* harmony import */ var _sys_Atom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../sys/Atom.js */ "./node_modules/capi/esm/effect/sys/Atom.js");


function decoded(codec, encoded, key) {
    return (0,_sys_Atom_js__WEBPACK_IMPORTED_MODULE_1__.atom)("Decoded", [codec, encoded, key], 
    // TODO: create `Wrap` util –– this is currently necessary as the decoded value is `unknown`,
    // which––left top-level––unifies with error types.
    (codec, encoded, key) => {
        return { [key]: codec.decode(_util_mod_js__WEBPACK_IMPORTED_MODULE_0__.hex.decode(encoded)) };
    });
}
//# sourceMappingURL=Decoded.js.map

/***/ }),

/***/ "./node_modules/capi/esm/effect/atoms/DeriveCodec.js":
/*!***********************************************************!*\
  !*** ./node_modules/capi/esm/effect/atoms/DeriveCodec.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "deriveCodec": function() { return /* binding */ deriveCodec; }
/* harmony export */ });
/* harmony import */ var _frame_metadata_mod_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../frame_metadata/mod.js */ "./node_modules/capi/esm/frame_metadata/mod.js");
/* harmony import */ var _sys_Atom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../sys/Atom.js */ "./node_modules/capi/esm/effect/sys/Atom.js");


const deriveCodec = (0,_sys_Atom_js__WEBPACK_IMPORTED_MODULE_1__.atomFactory)("DeriveCodec", (metadata) => {
    return _frame_metadata_mod_js__WEBPACK_IMPORTED_MODULE_0__.DeriveCodec(metadata.tys);
});
//# sourceMappingURL=DeriveCodec.js.map

/***/ }),

/***/ "./node_modules/capi/esm/effect/atoms/Metadata.js":
/*!********************************************************!*\
  !*** ./node_modules/capi/esm/effect/atoms/Metadata.js ***!
  \********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MetadataDecodeError": function() { return /* binding */ MetadataDecodeError; },
/* harmony export */   "entryMetadata": function() { return /* binding */ entryMetadata; },
/* harmony export */   "metadata": function() { return /* binding */ metadata; },
/* harmony export */   "palletMetadata": function() { return /* binding */ palletMetadata; },
/* harmony export */   "parseMetadata": function() { return /* binding */ parseMetadata; }
/* harmony export */ });
/* harmony import */ var _frame_metadata_mod_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../frame_metadata/mod.js */ "./node_modules/capi/esm/frame_metadata/mod.js");
/* harmony import */ var _util_mod_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/mod.js */ "./node_modules/capi/esm/util/mod.js");
/* harmony import */ var _sys_Atom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../sys/Atom.js */ "./node_modules/capi/esm/effect/sys/Atom.js");
/* harmony import */ var _RpcCall_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./RpcCall.js */ "./node_modules/capi/esm/effect/atoms/RpcCall.js");




function metadata(config, ...[blockHash]) {
    const call = (0,_RpcCall_js__WEBPACK_IMPORTED_MODULE_3__.rpcCall)(config, "state_getMetadata", [blockHash]);
    return parseMetadata(call);
}
const parseMetadata = (0,_sys_Atom_js__WEBPACK_IMPORTED_MODULE_2__.atomFactory)("Metadata", (call) => {
    try {
        return _frame_metadata_mod_js__WEBPACK_IMPORTED_MODULE_0__.fromPrefixedHex(call.result);
    }
    catch (e) {
        return new MetadataDecodeError(e);
    }
});
const palletMetadata = (0,_sys_Atom_js__WEBPACK_IMPORTED_MODULE_2__.atomFactory)("PalletMetadata", (metadata, palletName) => {
    return _frame_metadata_mod_js__WEBPACK_IMPORTED_MODULE_0__.getPallet(metadata, palletName);
});
const entryMetadata = (0,_sys_Atom_js__WEBPACK_IMPORTED_MODULE_2__.atomFactory)("EntryMetadata", (palletMetadata, entryName) => {
    return _frame_metadata_mod_js__WEBPACK_IMPORTED_MODULE_0__.getEntry(palletMetadata, entryName);
});
class MetadataDecodeError extends _util_mod_js__WEBPACK_IMPORTED_MODULE_1__.ErrorCtor("MetadataDecode") {
    // TODO: replace with internal scale error & ensure appropriate trace info
    constructor(scaleError) {
        super();
        Object.defineProperty(this, "scaleError", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: scaleError
        });
    }
}
//# sourceMappingURL=Metadata.js.map

/***/ }),

/***/ "./node_modules/capi/esm/effect/atoms/RpcCall.js":
/*!*******************************************************!*\
  !*** ./node_modules/capi/esm/effect/atoms/RpcCall.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "rpcCall": function() { return /* binding */ rpcCall; }
/* harmony export */ });
/* harmony import */ var _sys_Atom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../sys/Atom.js */ "./node_modules/capi/esm/effect/sys/Atom.js");
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./common.js */ "./node_modules/capi/esm/effect/atoms/common.js");
/* harmony import */ var _RpcClient_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./RpcClient.js */ "./node_modules/capi/esm/effect/atoms/RpcClient.js");



function rpcCall(config, methodName, params) {
    return (0,_sys_Atom_js__WEBPACK_IMPORTED_MODULE_0__.atom)("RpcCall", [(0,_RpcClient_js__WEBPACK_IMPORTED_MODULE_2__.rpcClient)(config), methodName, ...params], async (client, methodName, ...params) => {
        // TODO: clean up typings
        const result = await client.call(methodName, params);
        if (result.error) {
            return new _common_js__WEBPACK_IMPORTED_MODULE_1__.RpcError({
                ...result.error,
                attempt: {
                    methodName,
                    params,
                },
            });
        }
        // TODO: should this effect implicitly index into `result`?
        return result;
    });
}
//# sourceMappingURL=RpcCall.js.map

/***/ }),

/***/ "./node_modules/capi/esm/effect/atoms/RpcClient.js":
/*!*********************************************************!*\
  !*** ./node_modules/capi/esm/effect/atoms/RpcClient.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "rpcClient": function() { return /* binding */ rpcClient; }
/* harmony export */ });
/* harmony import */ var _rpc_mod_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../rpc/mod.js */ "./node_modules/capi/esm/rpc/mod.js");
/* harmony import */ var _sys_Atom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../sys/Atom.js */ "./node_modules/capi/esm/effect/sys/Atom.js");


function rpcClient(config) {
    return (0,_sys_Atom_js__WEBPACK_IMPORTED_MODULE_1__.atom)("RpcClient", [config], (config) => {
        return _rpc_mod_js__WEBPACK_IMPORTED_MODULE_0__.stdClient(config);
    }, async (client) => {
        await client.close();
    });
}
//# sourceMappingURL=RpcClient.js.map

/***/ }),

/***/ "./node_modules/capi/esm/effect/atoms/RpcSubscription.js":
/*!***************************************************************!*\
  !*** ./node_modules/capi/esm/effect/atoms/RpcSubscription.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RpcSubscriptionError": function() { return /* binding */ RpcSubscriptionError; },
/* harmony export */   "rpcSubscription": function() { return /* binding */ rpcSubscription; }
/* harmony export */ });
/* harmony import */ var _util_mod_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/mod.js */ "./node_modules/capi/esm/util/mod.js");
/* harmony import */ var _sys_Atom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../sys/Atom.js */ "./node_modules/capi/esm/effect/sys/Atom.js");
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./common.js */ "./node_modules/capi/esm/effect/atoms/common.js");
/* harmony import */ var _RpcClient_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./RpcClient.js */ "./node_modules/capi/esm/effect/atoms/RpcClient.js");




function rpcSubscription(config, methodName, params, createListener, cleanup) {
    return (0,_sys_Atom_js__WEBPACK_IMPORTED_MODULE_1__.atom)("RpcSubscription", [(0,_RpcClient_js__WEBPACK_IMPORTED_MODULE_3__.rpcClient)(config), methodName, ...params], async function (client, methodName, ...params) {
        const result = await client.subscribe(methodName, params, createListener, cleanup
            ? (x) => {
                return this.run(cleanup(x.result));
            }
            : undefined);
        if (result?.error) {
            return new _common_js__WEBPACK_IMPORTED_MODULE_2__.RpcError({
                ...result.error,
                attempt: {
                    methodName,
                    params,
                },
            });
        }
        // TODO: clean up typings –– should implicitly narrow to `undefined`
        return result;
    });
}
class RpcSubscriptionError extends _util_mod_js__WEBPACK_IMPORTED_MODULE_0__.ErrorCtor("RpcSubscription") {
    constructor(error) {
        super();
        Object.defineProperty(this, "error", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: error
        });
    }
}
//# sourceMappingURL=RpcSubscription.js.map

/***/ }),

/***/ "./node_modules/capi/esm/effect/atoms/Select.js":
/*!******************************************************!*\
  !*** ./node_modules/capi/esm/effect/atoms/Select.js ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "select": function() { return /* binding */ select; }
/* harmony export */ });
/* harmony import */ var _sys_mod_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../sys/mod.js */ "./node_modules/capi/esm/effect/sys/mod.js");

function select(val, field) {
    return _sys_mod_js__WEBPACK_IMPORTED_MODULE_0__.atom("Select", [val, field], (val, field) => {
        return val[field];
    });
}
//# sourceMappingURL=Select.js.map

/***/ }),

/***/ "./node_modules/capi/esm/effect/atoms/StorageKey.js":
/*!**********************************************************!*\
  !*** ./node_modules/capi/esm/effect/atoms/StorageKey.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "storageKey": function() { return /* binding */ storageKey; }
/* harmony export */ });
/* harmony import */ var _util_mod_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/mod.js */ "./node_modules/capi/esm/util/mod.js");
/* harmony import */ var _sys_Atom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../sys/Atom.js */ "./node_modules/capi/esm/effect/sys/Atom.js");


const storageKey = (0,_sys_Atom_js__WEBPACK_IMPORTED_MODULE_1__.atomFactory)("StorageKey", ($storageKey, ...keys) => {
    return _util_mod_js__WEBPACK_IMPORTED_MODULE_0__.hex.encode($storageKey.encode(keys));
});
//# sourceMappingURL=StorageKey.js.map

/***/ }),

/***/ "./node_modules/capi/esm/effect/atoms/Wrap.js":
/*!****************************************************!*\
  !*** ./node_modules/capi/esm/effect/atoms/Wrap.js ***!
  \****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "wrap": function() { return /* binding */ wrap; }
/* harmony export */ });
/* harmony import */ var _sys_mod_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../sys/mod.js */ "./node_modules/capi/esm/effect/sys/mod.js");

function wrap(target, key) {
    return (0,_sys_mod_js__WEBPACK_IMPORTED_MODULE_0__.atom)("Wrap", [target, key], (target, key) => {
        return { [key]: target };
    });
}
//# sourceMappingURL=Wrap.js.map

/***/ }),

/***/ "./node_modules/capi/esm/effect/atoms/common.js":
/*!******************************************************!*\
  !*** ./node_modules/capi/esm/effect/atoms/common.js ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RpcError": function() { return /* binding */ RpcError; }
/* harmony export */ });
/* harmony import */ var _util_mod_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/mod.js */ "./node_modules/capi/esm/util/mod.js");

class RpcError extends _util_mod_js__WEBPACK_IMPORTED_MODULE_0__.ErrorCtor("RpcCall") {
    constructor({ code, message, attempt }) {
        super(message);
        Object.defineProperty(this, "code", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "attempt", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.code = code;
        this.attempt = attempt;
    }
}
//# sourceMappingURL=common.js.map

/***/ }),

/***/ "./node_modules/capi/esm/effect/atoms/mod.js":
/*!***************************************************!*\
  !*** ./node_modules/capi/esm/effect/atoms/mod.js ***!
  \***************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$extrinsic": function() { return /* reexport safe */ _$Extrinsic_js__WEBPACK_IMPORTED_MODULE_0__.$extrinsic; },
/* harmony export */   "$key": function() { return /* reexport safe */ _$Key_js__WEBPACK_IMPORTED_MODULE_1__.$key; },
/* harmony export */   "$storageKey": function() { return /* reexport safe */ _$StorageKey_js__WEBPACK_IMPORTED_MODULE_2__.$storageKey; },
/* harmony export */   "MetadataDecodeError": function() { return /* reexport safe */ _Metadata_js__WEBPACK_IMPORTED_MODULE_6__.MetadataDecodeError; },
/* harmony export */   "RpcSubscriptionError": function() { return /* reexport safe */ _RpcSubscription_js__WEBPACK_IMPORTED_MODULE_9__.RpcSubscriptionError; },
/* harmony export */   "codec": function() { return /* reexport safe */ _Codec_js__WEBPACK_IMPORTED_MODULE_3__.codec; },
/* harmony export */   "decoded": function() { return /* reexport safe */ _Decoded_js__WEBPACK_IMPORTED_MODULE_4__.decoded; },
/* harmony export */   "deriveCodec": function() { return /* reexport safe */ _DeriveCodec_js__WEBPACK_IMPORTED_MODULE_5__.deriveCodec; },
/* harmony export */   "entryMetadata": function() { return /* reexport safe */ _Metadata_js__WEBPACK_IMPORTED_MODULE_6__.entryMetadata; },
/* harmony export */   "metadata": function() { return /* reexport safe */ _Metadata_js__WEBPACK_IMPORTED_MODULE_6__.metadata; },
/* harmony export */   "palletMetadata": function() { return /* reexport safe */ _Metadata_js__WEBPACK_IMPORTED_MODULE_6__.palletMetadata; },
/* harmony export */   "parseMetadata": function() { return /* reexport safe */ _Metadata_js__WEBPACK_IMPORTED_MODULE_6__.parseMetadata; },
/* harmony export */   "rpcCall": function() { return /* reexport safe */ _RpcCall_js__WEBPACK_IMPORTED_MODULE_7__.rpcCall; },
/* harmony export */   "rpcClient": function() { return /* reexport safe */ _RpcClient_js__WEBPACK_IMPORTED_MODULE_8__.rpcClient; },
/* harmony export */   "rpcSubscription": function() { return /* reexport safe */ _RpcSubscription_js__WEBPACK_IMPORTED_MODULE_9__.rpcSubscription; },
/* harmony export */   "select": function() { return /* reexport safe */ _Select_js__WEBPACK_IMPORTED_MODULE_10__.select; },
/* harmony export */   "storageKey": function() { return /* reexport safe */ _StorageKey_js__WEBPACK_IMPORTED_MODULE_11__.storageKey; },
/* harmony export */   "wrap": function() { return /* reexport safe */ _Wrap_js__WEBPACK_IMPORTED_MODULE_12__.wrap; }
/* harmony export */ });
/* harmony import */ var _$Extrinsic_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./$Extrinsic.js */ "./node_modules/capi/esm/effect/atoms/$Extrinsic.js");
/* harmony import */ var _$Key_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./$Key.js */ "./node_modules/capi/esm/effect/atoms/$Key.js");
/* harmony import */ var _$StorageKey_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./$StorageKey.js */ "./node_modules/capi/esm/effect/atoms/$StorageKey.js");
/* harmony import */ var _Codec_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Codec.js */ "./node_modules/capi/esm/effect/atoms/Codec.js");
/* harmony import */ var _Decoded_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Decoded.js */ "./node_modules/capi/esm/effect/atoms/Decoded.js");
/* harmony import */ var _DeriveCodec_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./DeriveCodec.js */ "./node_modules/capi/esm/effect/atoms/DeriveCodec.js");
/* harmony import */ var _Metadata_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Metadata.js */ "./node_modules/capi/esm/effect/atoms/Metadata.js");
/* harmony import */ var _RpcCall_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./RpcCall.js */ "./node_modules/capi/esm/effect/atoms/RpcCall.js");
/* harmony import */ var _RpcClient_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./RpcClient.js */ "./node_modules/capi/esm/effect/atoms/RpcClient.js");
/* harmony import */ var _RpcSubscription_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./RpcSubscription.js */ "./node_modules/capi/esm/effect/atoms/RpcSubscription.js");
/* harmony import */ var _Select_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Select.js */ "./node_modules/capi/esm/effect/atoms/Select.js");
/* harmony import */ var _StorageKey_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./StorageKey.js */ "./node_modules/capi/esm/effect/atoms/StorageKey.js");
/* harmony import */ var _Wrap_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./Wrap.js */ "./node_modules/capi/esm/effect/atoms/Wrap.js");













//# sourceMappingURL=mod.js.map

/***/ }),

/***/ "./node_modules/capi/esm/effect/mod.js":
/*!*********************************************!*\
  !*** ./node_modules/capi/esm/effect/mod.js ***!
  \*********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$extrinsic": function() { return /* reexport safe */ _atoms_mod_js__WEBPACK_IMPORTED_MODULE_0__.$extrinsic; },
/* harmony export */   "$key": function() { return /* reexport safe */ _atoms_mod_js__WEBPACK_IMPORTED_MODULE_0__.$key; },
/* harmony export */   "$storageKey": function() { return /* reexport safe */ _atoms_mod_js__WEBPACK_IMPORTED_MODULE_0__.$storageKey; },
/* harmony export */   "Atom": function() { return /* reexport safe */ _sys_mod_js__WEBPACK_IMPORTED_MODULE_2__.Atom; },
/* harmony export */   "Effect": function() { return /* reexport safe */ _sys_mod_js__WEBPACK_IMPORTED_MODULE_2__.Effect; },
/* harmony export */   "MetadataDecodeError": function() { return /* reexport safe */ _atoms_mod_js__WEBPACK_IMPORTED_MODULE_0__.MetadataDecodeError; },
/* harmony export */   "ReadingKeysOfNonMapError": function() { return /* reexport safe */ _std_mod_js__WEBPACK_IMPORTED_MODULE_1__.ReadingKeysOfNonMapError; },
/* harmony export */   "RpcSubscriptionError": function() { return /* reexport safe */ _atoms_mod_js__WEBPACK_IMPORTED_MODULE_0__.RpcSubscriptionError; },
/* harmony export */   "all": function() { return /* reexport safe */ _sys_mod_js__WEBPACK_IMPORTED_MODULE_2__.all; },
/* harmony export */   "anon": function() { return /* reexport safe */ _sys_mod_js__WEBPACK_IMPORTED_MODULE_2__.anon; },
/* harmony export */   "atom": function() { return /* reexport safe */ _sys_mod_js__WEBPACK_IMPORTED_MODULE_2__.atom; },
/* harmony export */   "atomFactory": function() { return /* reexport safe */ _sys_mod_js__WEBPACK_IMPORTED_MODULE_2__.atomFactory; },
/* harmony export */   "codec": function() { return /* reexport safe */ _atoms_mod_js__WEBPACK_IMPORTED_MODULE_0__.codec; },
/* harmony export */   "decoded": function() { return /* reexport safe */ _atoms_mod_js__WEBPACK_IMPORTED_MODULE_0__.decoded; },
/* harmony export */   "deriveCodec": function() { return /* reexport safe */ _atoms_mod_js__WEBPACK_IMPORTED_MODULE_0__.deriveCodec; },
/* harmony export */   "entryMetadata": function() { return /* reexport safe */ _atoms_mod_js__WEBPACK_IMPORTED_MODULE_0__.entryMetadata; },
/* harmony export */   "into": function() { return /* reexport safe */ _sys_mod_js__WEBPACK_IMPORTED_MODULE_2__.into; },
/* harmony export */   "metadata": function() { return /* reexport safe */ _atoms_mod_js__WEBPACK_IMPORTED_MODULE_0__.metadata; },
/* harmony export */   "palletMetadata": function() { return /* reexport safe */ _atoms_mod_js__WEBPACK_IMPORTED_MODULE_0__.palletMetadata; },
/* harmony export */   "parseMetadata": function() { return /* reexport safe */ _atoms_mod_js__WEBPACK_IMPORTED_MODULE_0__.parseMetadata; },
/* harmony export */   "readBlock": function() { return /* reexport safe */ _std_mod_js__WEBPACK_IMPORTED_MODULE_1__.readBlock; },
/* harmony export */   "readEntry": function() { return /* reexport safe */ _std_mod_js__WEBPACK_IMPORTED_MODULE_1__.readEntry; },
/* harmony export */   "readKeyPage": function() { return /* reexport safe */ _std_mod_js__WEBPACK_IMPORTED_MODULE_1__.readKeyPage; },
/* harmony export */   "rpcCall": function() { return /* reexport safe */ _atoms_mod_js__WEBPACK_IMPORTED_MODULE_0__.rpcCall; },
/* harmony export */   "rpcClient": function() { return /* reexport safe */ _atoms_mod_js__WEBPACK_IMPORTED_MODULE_0__.rpcClient; },
/* harmony export */   "rpcSubscription": function() { return /* reexport safe */ _atoms_mod_js__WEBPACK_IMPORTED_MODULE_0__.rpcSubscription; },
/* harmony export */   "run": function() { return /* reexport safe */ _sys_mod_js__WEBPACK_IMPORTED_MODULE_2__.run; },
/* harmony export */   "select": function() { return /* reexport safe */ _atoms_mod_js__WEBPACK_IMPORTED_MODULE_0__.select; },
/* harmony export */   "sendAndWatchExtrinsic": function() { return /* reexport safe */ _std_mod_js__WEBPACK_IMPORTED_MODULE_1__.sendAndWatchExtrinsic; },
/* harmony export */   "storageKey": function() { return /* reexport safe */ _atoms_mod_js__WEBPACK_IMPORTED_MODULE_0__.storageKey; },
/* harmony export */   "watchBlocks": function() { return /* reexport safe */ _std_mod_js__WEBPACK_IMPORTED_MODULE_1__.watchBlocks; },
/* harmony export */   "watchEntry": function() { return /* reexport safe */ _std_mod_js__WEBPACK_IMPORTED_MODULE_1__.watchEntry; },
/* harmony export */   "wrap": function() { return /* reexport safe */ _atoms_mod_js__WEBPACK_IMPORTED_MODULE_0__.wrap; }
/* harmony export */ });
/* harmony import */ var _atoms_mod_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./atoms/mod.js */ "./node_modules/capi/esm/effect/atoms/mod.js");
/* harmony import */ var _std_mod_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./std/mod.js */ "./node_modules/capi/esm/effect/std/mod.js");
/* harmony import */ var _sys_mod_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sys/mod.js */ "./node_modules/capi/esm/effect/sys/mod.js");



//# sourceMappingURL=mod.js.map

/***/ }),

/***/ "./node_modules/capi/esm/effect/std/mod.js":
/*!*************************************************!*\
  !*** ./node_modules/capi/esm/effect/std/mod.js ***!
  \*************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ReadingKeysOfNonMapError": function() { return /* reexport safe */ _readKeyPage_js__WEBPACK_IMPORTED_MODULE_2__.ReadingKeysOfNonMapError; },
/* harmony export */   "readBlock": function() { return /* reexport safe */ _readBlock_js__WEBPACK_IMPORTED_MODULE_0__.readBlock; },
/* harmony export */   "readEntry": function() { return /* reexport safe */ _readEntry_js__WEBPACK_IMPORTED_MODULE_1__.readEntry; },
/* harmony export */   "readKeyPage": function() { return /* reexport safe */ _readKeyPage_js__WEBPACK_IMPORTED_MODULE_2__.readKeyPage; },
/* harmony export */   "sendAndWatchExtrinsic": function() { return /* reexport safe */ _submitAndWatchExtrinsic_js__WEBPACK_IMPORTED_MODULE_3__.sendAndWatchExtrinsic; },
/* harmony export */   "watchBlocks": function() { return /* reexport safe */ _watchBlocks_js__WEBPACK_IMPORTED_MODULE_4__.watchBlocks; },
/* harmony export */   "watchEntry": function() { return /* reexport safe */ _watchEntry_js__WEBPACK_IMPORTED_MODULE_5__.watchEntry; }
/* harmony export */ });
/* harmony import */ var _readBlock_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./readBlock.js */ "./node_modules/capi/esm/effect/std/readBlock.js");
/* harmony import */ var _readEntry_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./readEntry.js */ "./node_modules/capi/esm/effect/std/readEntry.js");
/* harmony import */ var _readKeyPage_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./readKeyPage.js */ "./node_modules/capi/esm/effect/std/readKeyPage.js");
/* harmony import */ var _submitAndWatchExtrinsic_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./submitAndWatchExtrinsic.js */ "./node_modules/capi/esm/effect/std/submitAndWatchExtrinsic.js");
/* harmony import */ var _watchBlocks_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./watchBlocks.js */ "./node_modules/capi/esm/effect/std/watchBlocks.js");
/* harmony import */ var _watchEntry_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./watchEntry.js */ "./node_modules/capi/esm/effect/std/watchEntry.js");






//# sourceMappingURL=mod.js.map

/***/ }),

/***/ "./node_modules/capi/esm/effect/std/readBlock.js":
/*!*******************************************************!*\
  !*** ./node_modules/capi/esm/effect/std/readBlock.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "readBlock": function() { return /* binding */ readBlock; }
/* harmony export */ });
/* harmony import */ var _util_mod_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/mod.js */ "./node_modules/capi/esm/util/mod.js");
/* harmony import */ var _atoms_mod_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../atoms/mod.js */ "./node_modules/capi/esm/effect/atoms/mod.js");
/* harmony import */ var _sys_mod_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../sys/mod.js */ "./node_modules/capi/esm/effect/sys/mod.js");



function readBlock(config, ...[blockHash]) {
    const metadata_ = _atoms_mod_js__WEBPACK_IMPORTED_MODULE_1__.metadata(config, blockHash);
    const $extrinsic = _atoms_mod_js__WEBPACK_IMPORTED_MODULE_1__.$extrinsic(_atoms_mod_js__WEBPACK_IMPORTED_MODULE_1__.deriveCodec(metadata_), metadata_);
    const call = _atoms_mod_js__WEBPACK_IMPORTED_MODULE_1__.rpcCall(config, "chain_getBlock", [blockHash]);
    const decoded = _sys_mod_js__WEBPACK_IMPORTED_MODULE_2__.anon([$extrinsic, call], ($extrinsic, call) => {
        const { block: { extrinsics, header }, justifications } = call.result;
        return {
            justifications,
            block: {
                header,
                extrinsics: extrinsics.map((extrinsic) => {
                    return $extrinsic.decode(_util_mod_js__WEBPACK_IMPORTED_MODULE_0__.hex.decode(extrinsic));
                }),
            },
        };
    });
    return _atoms_mod_js__WEBPACK_IMPORTED_MODULE_1__.wrap(decoded, "block");
}
//# sourceMappingURL=readBlock.js.map

/***/ }),

/***/ "./node_modules/capi/esm/effect/std/readEntry.js":
/*!*******************************************************!*\
  !*** ./node_modules/capi/esm/effect/std/readEntry.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "readEntry": function() { return /* binding */ readEntry; }
/* harmony export */ });
/* harmony import */ var _atoms_mod_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../atoms/mod.js */ "./node_modules/capi/esm/effect/atoms/mod.js");

function readEntry(config, palletName, entryName, keys, ...[blockHash]) {
    const metadata_ = _atoms_mod_js__WEBPACK_IMPORTED_MODULE_0__.metadata(config, blockHash);
    const deriveCodec_ = _atoms_mod_js__WEBPACK_IMPORTED_MODULE_0__.deriveCodec(metadata_);
    const palletMetadata_ = _atoms_mod_js__WEBPACK_IMPORTED_MODULE_0__.palletMetadata(metadata_, palletName);
    const entryMetadata_ = _atoms_mod_js__WEBPACK_IMPORTED_MODULE_0__.entryMetadata(palletMetadata_, entryName);
    const $storageKey = _atoms_mod_js__WEBPACK_IMPORTED_MODULE_0__.$storageKey(deriveCodec_, palletMetadata_, entryMetadata_);
    const storageKey = _atoms_mod_js__WEBPACK_IMPORTED_MODULE_0__.storageKey($storageKey, ...keys);
    const storageCall = _atoms_mod_js__WEBPACK_IMPORTED_MODULE_0__.rpcCall(config, "state_getStorage", [storageKey, blockHash]);
    const entryValueTypeI = _atoms_mod_js__WEBPACK_IMPORTED_MODULE_0__.select(entryMetadata_, "value");
    const $entry = _atoms_mod_js__WEBPACK_IMPORTED_MODULE_0__.codec(deriveCodec_, entryValueTypeI);
    const resultHex = _atoms_mod_js__WEBPACK_IMPORTED_MODULE_0__.select(storageCall, "result");
    return _atoms_mod_js__WEBPACK_IMPORTED_MODULE_0__.decoded($entry, resultHex, "value");
}
//# sourceMappingURL=readEntry.js.map

/***/ }),

/***/ "./node_modules/capi/esm/effect/std/readKeyPage.js":
/*!*********************************************************!*\
  !*** ./node_modules/capi/esm/effect/std/readKeyPage.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ReadingKeysOfNonMapError": function() { return /* binding */ ReadingKeysOfNonMapError; },
/* harmony export */   "readKeyPage": function() { return /* binding */ readKeyPage; }
/* harmony export */ });
/* harmony import */ var _util_mod_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/mod.js */ "./node_modules/capi/esm/util/mod.js");
/* harmony import */ var _atoms_mod_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../atoms/mod.js */ "./node_modules/capi/esm/effect/atoms/mod.js");
/* harmony import */ var _sys_mod_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../sys/mod.js */ "./node_modules/capi/esm/effect/sys/mod.js");



function readKeyPage(config, palletName, entryName, count, ...[start, blockHash]) {
    const metadata = _atoms_mod_js__WEBPACK_IMPORTED_MODULE_1__.metadata(config, blockHash);
    const deriveCodec = _atoms_mod_js__WEBPACK_IMPORTED_MODULE_1__.deriveCodec(metadata);
    const palletMetadata = _atoms_mod_js__WEBPACK_IMPORTED_MODULE_1__.palletMetadata(metadata, palletName);
    const entryMetadata = _sys_mod_js__WEBPACK_IMPORTED_MODULE_2__.anon([_atoms_mod_js__WEBPACK_IMPORTED_MODULE_1__.entryMetadata(palletMetadata, entryName)], (entryMetadata) => {
        if (entryMetadata.type !== "Map") {
            return new ReadingKeysOfNonMapError();
        }
        return entryMetadata;
    });
    const $storageKey = _atoms_mod_js__WEBPACK_IMPORTED_MODULE_1__.$storageKey(deriveCodec, palletMetadata, entryMetadata);
    const startKey = start ? _atoms_mod_js__WEBPACK_IMPORTED_MODULE_1__.storageKey($storageKey, start) : undefined;
    const storageKey = _atoms_mod_js__WEBPACK_IMPORTED_MODULE_1__.storageKey($storageKey);
    const call = _atoms_mod_js__WEBPACK_IMPORTED_MODULE_1__.rpcCall(config, "state_getKeysPaged", [storageKey, count, startKey, blockHash]);
    const $key = _atoms_mod_js__WEBPACK_IMPORTED_MODULE_1__.$key(deriveCodec, palletMetadata, entryMetadata);
    const keysEncoded = _atoms_mod_js__WEBPACK_IMPORTED_MODULE_1__.select(call, "result");
    const keysDecoded = _sys_mod_js__WEBPACK_IMPORTED_MODULE_2__.anon([$key, keysEncoded], ($key, keysEncoded) => {
        return keysEncoded.map((keyEncoded) => {
            return $key.decode(_util_mod_js__WEBPACK_IMPORTED_MODULE_0__.hex.decode(keyEncoded));
        });
    });
    return _atoms_mod_js__WEBPACK_IMPORTED_MODULE_1__.wrap(keysDecoded, "keys");
}
class ReadingKeysOfNonMapError extends _util_mod_js__WEBPACK_IMPORTED_MODULE_0__.ErrorCtor("ReadingKeysOfNonMap") {
}
//# sourceMappingURL=readKeyPage.js.map

/***/ }),

/***/ "./node_modules/capi/esm/effect/std/submitAndWatchExtrinsic.js":
/*!*********************************************************************!*\
  !*** ./node_modules/capi/esm/effect/std/submitAndWatchExtrinsic.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sendAndWatchExtrinsic": function() { return /* binding */ sendAndWatchExtrinsic; }
/* harmony export */ });
/* harmony import */ var _deps_std_testing_asserts_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../deps/std/testing/asserts.js */ "./node_modules/capi/esm/deps/std/testing/asserts.js");
/* harmony import */ var _ss58_mod_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ss58/mod.js */ "./node_modules/capi/esm/ss58/mod.js");
/* harmony import */ var _util_mod_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/mod.js */ "./node_modules/capi/esm/util/mod.js");
/* harmony import */ var _atoms_mod_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../atoms/mod.js */ "./node_modules/capi/esm/effect/atoms/mod.js");
/* harmony import */ var _sys_mod_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../sys/mod.js */ "./node_modules/capi/esm/effect/sys/mod.js");





function sendAndWatchExtrinsic(props) {
    const metadata = _atoms_mod_js__WEBPACK_IMPORTED_MODULE_3__.metadata(props.config);
    const deriveCodec = _atoms_mod_js__WEBPACK_IMPORTED_MODULE_3__.deriveCodec(metadata);
    const $extrinsic = _atoms_mod_js__WEBPACK_IMPORTED_MODULE_3__.$extrinsic(deriveCodec, metadata, props.sign, props.config.addressPrefix);
    const runtimeVersion = _atoms_mod_js__WEBPACK_IMPORTED_MODULE_3__.rpcCall(props.config, "state_getRuntimeVersion", []);
    const senderSs58 = _sys_mod_js__WEBPACK_IMPORTED_MODULE_4__.anon([props.sender], (sender) => {
        return (() => {
            switch (sender.type) {
                case "Id": {
                    return _ss58_mod_js__WEBPACK_IMPORTED_MODULE_1__.encode(props.config.addressPrefix, sender.value);
                }
                // TODO: other types
                default: {
                    (0,_deps_std_testing_asserts_js__WEBPACK_IMPORTED_MODULE_0__.unimplemented)();
                }
            }
        })();
    });
    const accountNextIndex = _atoms_mod_js__WEBPACK_IMPORTED_MODULE_3__.rpcCall(props.config, "system_accountNextIndex", [senderSs58]);
    const genesisHash = _sys_mod_js__WEBPACK_IMPORTED_MODULE_4__.anon([_atoms_mod_js__WEBPACK_IMPORTED_MODULE_3__.rpcCall(props.config, "chain_getBlockHash", [0])], ({ result }) => {
        return _util_mod_js__WEBPACK_IMPORTED_MODULE_2__.hex.decode(result);
    });
    const checkpointHash = props.checkpoint
        ? _sys_mod_js__WEBPACK_IMPORTED_MODULE_4__.anon([props.checkpoint], (v) => {
            return _util_mod_js__WEBPACK_IMPORTED_MODULE_2__.hex.decode(v);
        })
        : genesisHash;
    const extrinsicHex = _sys_mod_js__WEBPACK_IMPORTED_MODULE_4__.anon([
        $extrinsic,
        props.sender,
        props.methodName,
        props.palletName,
        runtimeVersion,
        accountNextIndex,
        genesisHash,
        props.args,
        checkpointHash,
        props.tip,
        props.mortality,
    ], async ($extrinsic, sender, methodName, palletName, { result: { specVersion, transactionVersion } }, { result: nonce }, genesisHash, args, checkpoint, tip, mortality) => {
        const extrinsicBytes = await $extrinsic.encodeAsync({
            protocolVersion: 4,
            palletName,
            methodName,
            args,
            signature: {
                address: sender,
                extra: [
                    mortality
                        ? {
                            type: "Mortal",
                            value: mortality,
                        }
                        : { type: "Immortal" },
                    nonce,
                    tip || 0,
                ],
                additional: [specVersion, transactionVersion, checkpoint, genesisHash],
            },
        });
        return _util_mod_js__WEBPACK_IMPORTED_MODULE_2__.hex.encode(extrinsicBytes);
    });
    return _atoms_mod_js__WEBPACK_IMPORTED_MODULE_3__.rpcSubscription(props.config, "author_submitAndWatchExtrinsic", [extrinsicHex], props.createWatchHandler, (ok) => {
        return _atoms_mod_js__WEBPACK_IMPORTED_MODULE_3__.rpcCall(props.config, "author_unwatchExtrinsic", [ok.result]);
    });
}
//# sourceMappingURL=submitAndWatchExtrinsic.js.map

/***/ }),

/***/ "./node_modules/capi/esm/effect/std/watchBlocks.js":
/*!*********************************************************!*\
  !*** ./node_modules/capi/esm/effect/std/watchBlocks.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "watchBlocks": function() { return /* binding */ watchBlocks; }
/* harmony export */ });
/* harmony import */ var _util_mod_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/mod.js */ "./node_modules/capi/esm/util/mod.js");
/* harmony import */ var _atoms_mod_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../atoms/mod.js */ "./node_modules/capi/esm/effect/atoms/mod.js");
/* harmony import */ var _readBlock_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./readBlock.js */ "./node_modules/capi/esm/effect/std/readBlock.js");



function watchBlocks(config, createWatchHandler) {
    return _atoms_mod_js__WEBPACK_IMPORTED_MODULE_1__.rpcSubscription(config, "chain_subscribeNewHeads", [], (stop) => {
        const watchHandler = createWatchHandler(stop);
        return async (result) => {
            const blockNum = result.params.result.number;
            const blockHash = _atoms_mod_js__WEBPACK_IMPORTED_MODULE_1__.rpcCall(config, "chain_getBlockHash", [blockNum])
                .select("result");
            const block = _util_mod_js__WEBPACK_IMPORTED_MODULE_0__.throwIfError(
            // STOP THIS MADNESS
            await (0,_readBlock_js__WEBPACK_IMPORTED_MODULE_2__.readBlock)(config, blockHash).run());
            watchHandler(block.block);
        };
    }, (ok) => {
        return _atoms_mod_js__WEBPACK_IMPORTED_MODULE_1__.rpcCall(config, "chain_unsubscribeNewHead", [ok.result]);
    });
}
//# sourceMappingURL=watchBlocks.js.map

/***/ }),

/***/ "./node_modules/capi/esm/effect/std/watchEntry.js":
/*!********************************************************!*\
  !*** ./node_modules/capi/esm/effect/std/watchEntry.js ***!
  \********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "watchEntry": function() { return /* binding */ watchEntry; }
/* harmony export */ });
/* harmony import */ var _util_mod_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/mod.js */ "./node_modules/capi/esm/util/mod.js");
/* harmony import */ var _atoms_mod_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../atoms/mod.js */ "./node_modules/capi/esm/effect/atoms/mod.js");
/* harmony import */ var _sys_mod_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../sys/mod.js */ "./node_modules/capi/esm/effect/sys/mod.js");



function watchEntry(config, palletName, entryName, keys, createWatchHandler) {
    const metadata_ = _atoms_mod_js__WEBPACK_IMPORTED_MODULE_1__.metadata(config);
    const deriveCodec_ = _atoms_mod_js__WEBPACK_IMPORTED_MODULE_1__.deriveCodec(metadata_);
    const palletMetadata_ = _atoms_mod_js__WEBPACK_IMPORTED_MODULE_1__.palletMetadata(metadata_, palletName);
    const entryMetadata_ = _atoms_mod_js__WEBPACK_IMPORTED_MODULE_1__.entryMetadata(palletMetadata_, entryName);
    const $storageKey = _atoms_mod_js__WEBPACK_IMPORTED_MODULE_1__.$storageKey(deriveCodec_, palletMetadata_, entryMetadata_);
    const entryValueTypeI = _atoms_mod_js__WEBPACK_IMPORTED_MODULE_1__.select(entryMetadata_, "value");
    const $entry = _atoms_mod_js__WEBPACK_IMPORTED_MODULE_1__.codec(deriveCodec_, entryValueTypeI);
    const storageKeys = keys.length === 0
        ? _sys_mod_js__WEBPACK_IMPORTED_MODULE_2__.anon([_atoms_mod_js__WEBPACK_IMPORTED_MODULE_1__.storageKey($storageKey)], (v) => [v])
        : _sys_mod_js__WEBPACK_IMPORTED_MODULE_2__.anon([_atoms_mod_js__WEBPACK_IMPORTED_MODULE_1__.storageKey($storageKey, keys)], (v) => [v]);
    return _sys_mod_js__WEBPACK_IMPORTED_MODULE_2__.into([$entry], ($entryCodec) => {
        const watchInit = _util_mod_js__WEBPACK_IMPORTED_MODULE_0__.mapCreateWatchHandler(createWatchHandler, (message) => {
            return message.params.result.changes.map(([key, val]) => {
                return [key, val ? $entryCodec.decode(_util_mod_js__WEBPACK_IMPORTED_MODULE_0__.hex.decode(val)) : undefined];
            });
        });
        return _atoms_mod_js__WEBPACK_IMPORTED_MODULE_1__.rpcSubscription(config, "state_subscribeStorage", [storageKeys], watchInit, (ok) => {
            return _atoms_mod_js__WEBPACK_IMPORTED_MODULE_1__.rpcCall(config, "state_unsubscribeStorage", [ok.result]);
        });
    });
}
//# sourceMappingURL=watchEntry.js.map

/***/ }),

/***/ "./node_modules/capi/esm/effect/sys/Atom.js":
/*!**************************************************!*\
  !*** ./node_modules/capi/esm/effect/sys/Atom.js ***!
  \**************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Atom": function() { return /* binding */ Atom; },
/* harmony export */   "all": function() { return /* binding */ all; },
/* harmony export */   "anon": function() { return /* binding */ anon; },
/* harmony export */   "atom": function() { return /* binding */ atom; },
/* harmony export */   "atomFactory": function() { return /* binding */ atomFactory; },
/* harmony export */   "into": function() { return /* binding */ into; }
/* harmony export */ });
/* harmony import */ var _atoms_Select_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../atoms/Select.js */ "./node_modules/capi/esm/effect/atoms/Select.js");
/* harmony import */ var _Effect_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Effect.js */ "./node_modules/capi/esm/effect/sys/Effect.js");
/* harmony import */ var _key_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./key.js */ "./node_modules/capi/esm/effect/sys/key.js");
/* harmony import */ var _run_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./run.js */ "./node_modules/capi/esm/effect/sys/run.js");




function atom(fqn, args, impl, exit) {
    return new Atom(fqn, args, impl, exit);
}
class Atom extends _Effect_js__WEBPACK_IMPORTED_MODULE_1__.Effect {
    constructor(fqn, args, impl, exit) {
        super(fqn);
        Object.defineProperty(this, "args", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: args
        });
        Object.defineProperty(this, "impl", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: impl
        });
        Object.defineProperty(this, "exit", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: exit
        });
    }
    select(field) {
        return (0,_atoms_Select_js__WEBPACK_IMPORTED_MODULE_0__.select)(this, field);
    }
    run() {
        return (0,_run_js__WEBPACK_IMPORTED_MODULE_3__.run)(this);
    }
}
function atomFactory(fqn, impl, exit) {
    return (...args) => {
        return new Atom(fqn, args, impl, exit);
    };
}
function anon(args, impl, exit) {
    return new Atom((0,_key_js__WEBPACK_IMPORTED_MODULE_2__.key)(impl), args, impl, exit);
}
function into(args, into) {
    return new Atom("Map", args, async function (...args) {
        const next = await into.bind(this)(...args);
        if (next instanceof Error) {
            return next;
        }
        return await this.run(next);
    });
}
function all(...effects) {
    return new Atom("All", effects, (...resolved) => {
        return resolved;
    });
}
//# sourceMappingURL=Atom.js.map

/***/ }),

/***/ "./node_modules/capi/esm/effect/sys/Effect.js":
/*!****************************************************!*\
  !*** ./node_modules/capi/esm/effect/sys/Effect.js ***!
  \****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Effect": function() { return /* binding */ Effect; }
/* harmony export */ });
class Effect {
    constructor(fqn) {
        Object.defineProperty(this, "fqn", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: fqn
        });
    }
}
//# sourceMappingURL=Effect.js.map

/***/ }),

/***/ "./node_modules/capi/esm/effect/sys/key.js":
/*!*************************************************!*\
  !*** ./node_modules/capi/esm/effect/sys/key.js ***!
  \*************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "key": function() { return /* binding */ key; }
/* harmony export */ });
/* harmony import */ var _Atom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Atom.js */ "./node_modules/capi/esm/effect/sys/Atom.js");

let i = 0; // TODO: make fqn optional
const refKeys = new Map();
function key(val) {
    let refKey = refKeys.get(val);
    if (refKey) {
        return refKey;
    }
    if (val instanceof _Atom_js__WEBPACK_IMPORTED_MODULE_0__.Atom) {
        refKey = `${val.fqn}(${val.args.map(key)})`;
        refKeys.set(val, refKey);
        return refKey;
    }
    refKey = `_${i++}`;
    refKeys.set(val, refKey);
    return refKey;
}
//# sourceMappingURL=key.js.map

/***/ }),

/***/ "./node_modules/capi/esm/effect/sys/mod.js":
/*!*************************************************!*\
  !*** ./node_modules/capi/esm/effect/sys/mod.js ***!
  \*************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Atom": function() { return /* reexport safe */ _Atom_js__WEBPACK_IMPORTED_MODULE_0__.Atom; },
/* harmony export */   "Effect": function() { return /* reexport safe */ _Effect_js__WEBPACK_IMPORTED_MODULE_1__.Effect; },
/* harmony export */   "all": function() { return /* reexport safe */ _Atom_js__WEBPACK_IMPORTED_MODULE_0__.all; },
/* harmony export */   "anon": function() { return /* reexport safe */ _Atom_js__WEBPACK_IMPORTED_MODULE_0__.anon; },
/* harmony export */   "atom": function() { return /* reexport safe */ _Atom_js__WEBPACK_IMPORTED_MODULE_0__.atom; },
/* harmony export */   "atomFactory": function() { return /* reexport safe */ _Atom_js__WEBPACK_IMPORTED_MODULE_0__.atomFactory; },
/* harmony export */   "into": function() { return /* reexport safe */ _Atom_js__WEBPACK_IMPORTED_MODULE_0__.into; },
/* harmony export */   "run": function() { return /* reexport safe */ _run_js__WEBPACK_IMPORTED_MODULE_2__.run; }
/* harmony export */ });
/* harmony import */ var _Atom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Atom.js */ "./node_modules/capi/esm/effect/sys/Atom.js");
/* harmony import */ var _Effect_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Effect.js */ "./node_modules/capi/esm/effect/sys/Effect.js");
/* harmony import */ var _run_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./run.js */ "./node_modules/capi/esm/effect/sys/run.js");



//# sourceMappingURL=mod.js.map

/***/ }),

/***/ "./node_modules/capi/esm/effect/sys/run.js":
/*!*************************************************!*\
  !*** ./node_modules/capi/esm/effect/sys/run.js ***!
  \*************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "run": function() { return /* binding */ run; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ "./node_modules/capi/node_modules/tslib/tslib.es6.js");
/* harmony import */ var _Atom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Atom.js */ "./node_modules/capi/esm/effect/sys/Atom.js");
/* harmony import */ var _key_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./key.js */ "./node_modules/capi/esm/effect/sys/key.js");
var _Runtime_cache, _a;



const { run } = (new (_a = class Runtime {
        constructor() {
            _Runtime_cache.set(this, new Map()); // TODO: set max size / use LRU
            Object.defineProperty(this, "run", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: async (root) => {
                    const dependents = new Map();
                    const cleanup = new Map();
                    const cleanupPending = [];
                    try {
                        const rootResult = await this.visit(root, dependents, cleanup);
                        for (const [k, v] of dependents) {
                            const c = cleanup.get(k);
                            if (c) {
                                cleanupPending.push((async () => {
                                    await Promise.all(v);
                                    await c();
                                })());
                            }
                        }
                        await Promise.all(cleanupPending);
                        return rootResult;
                    }
                    catch (e) {
                        return e;
                    }
                }
            });
            Object.defineProperty(this, "visit", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: (val, dependents, cleanup) => {
                    const k = (0,_key_js__WEBPACK_IMPORTED_MODULE_1__.key)(val);
                    if ((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__classPrivateFieldGet)(this, _Runtime_cache, "f").has(k)) {
                        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__classPrivateFieldGet)(this, _Runtime_cache, "f").get(k);
                    }
                    if (val instanceof _Atom_js__WEBPACK_IMPORTED_MODULE_0__.Atom) {
                        return (async () => {
                            const args = val.args;
                            const argsPending = Promise.all(args.map((arg) => {
                                return this.visit(arg, dependents, cleanup);
                            }));
                            const pending = argsPending.then((argsResolved) => {
                                return val.impl.bind(this)(...argsResolved);
                            });
                            (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__classPrivateFieldGet)(this, _Runtime_cache, "f").set(k, pending);
                            args.forEach((arg) => {
                                if (arg instanceof _Atom_js__WEBPACK_IMPORTED_MODULE_0__.Atom) {
                                    this.addDependent(dependents, pending, arg);
                                }
                            });
                            const resolved = await pending;
                            if (resolved instanceof Error) {
                                throw resolved;
                            }
                            if (val.exit) {
                                const applied = () => val.exit(resolved);
                                cleanup.set(val, applied);
                                (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__classPrivateFieldGet)(this, _Runtime_cache, "f").delete(k);
                            }
                            return resolved;
                        })();
                    }
                    return val;
                }
            });
            Object.defineProperty(this, "addDependent", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: (dependents, dependency, dependent) => {
                    let e = dependents.get(dependent);
                    if (e) {
                        e.push(dependency);
                    }
                    else {
                        e = [dependency];
                        dependents.set(dependent, e);
                    }
                }
            });
        }
    },
    _Runtime_cache = new WeakMap(),
    _a)());
//# sourceMappingURL=run.js.map

/***/ }),

/***/ "./node_modules/capi/esm/frame_metadata/Codec.js":
/*!*******************************************************!*\
  !*** ./node_modules/capi/esm/frame_metadata/Codec.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$null": function() { return /* binding */ $null; },
/* harmony export */   "ChainError": function() { return /* binding */ ChainError; },
/* harmony export */   "DeriveCodec": function() { return /* binding */ DeriveCodec; }
/* harmony export */ });
/* harmony import */ var _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../deps/scale.js */ "./node_modules/capi/esm/deps/scale.js");
/* harmony import */ var _Era_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Era.js */ "./node_modules/capi/esm/frame_metadata/Era.js");
/* harmony import */ var _TyVisitor_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TyVisitor.js */ "./node_modules/capi/esm/frame_metadata/TyVisitor.js");



/**
 * All derived codecs for ZSTs will use this exact codec,
 * so `derivedCodec === $null` is true iff the type is a ZST.
 */
const $null = _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.dummy(null);
// TODO: tuple/array element skip optimization
function DeriveCodec(tys) {
    const visitor = new _TyVisitor_js__WEBPACK_IMPORTED_MODULE_2__.TyVisitor(tys, {
        unitStruct() {
            return $null;
        },
        wrapperStruct(_ty, inner) {
            return this.visit(inner);
        },
        tupleStruct(_ty, members) {
            return _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.tuple(...members.map((x) => this.visit(x)));
        },
        objectStruct(ty) {
            return _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.object(...ty.fields.map((x) => [x.name, this.visit(x.ty)]));
        },
        option(_ty, some) {
            return _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.option(this.visit(some));
        },
        result(_ty, ok, err) {
            return _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.result(this.visit(ok), _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.instance(ChainError, ["value", this.visit(err)]));
        },
        never() {
            return _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.never;
        },
        stringUnion(ty) {
            const members = {};
            for (const { index, name } of ty.members) {
                members[index] = name;
            }
            return _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.stringUnion(members);
        },
        taggedUnion(ty) {
            const members = {};
            for (const { fields, name: type, index } of ty.members) {
                let member;
                if (fields.length === 0) {
                    member = [type];
                }
                else if (fields[0].name === undefined) {
                    // Tuple variant
                    const $value = fields.length === 1
                        ? this.visit(fields[0].ty)
                        : _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.tuple(...fields.map((f) => this.visit(f.ty)));
                    member = [type, ["value", $value]];
                }
                else {
                    // Object variant
                    const memberFields = fields.map((field, i) => {
                        return [
                            field.name || i,
                            _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.deferred(() => {
                                return this.visit(field.ty);
                            }),
                        ];
                    });
                    member = [type, ...memberFields];
                }
                members[index] = member;
            }
            return _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.taggedUnion("type", members);
        },
        uint8Array() {
            return _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.uint8Array;
        },
        array(ty) {
            return _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.array(this.visit(ty.typeParam));
        },
        sizedUint8Array(ty) {
            return _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.sizedUint8Array(ty.len);
        },
        sizedArray(ty) {
            return _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.sizedArray(this.visit(ty.typeParam), ty.len);
        },
        primitive(ty) {
            if (ty.kind === "char")
                return _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.str;
            return _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__[ty.kind];
        },
        compact(ty) {
            const inner = this.visit(ty.typeParam);
            return compactCodecVisitor.visit(inner);
        },
        bitSequence() {
            return _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.bitSequence;
        },
        map(_ty, key, val) {
            return _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.map(this.visit(key), this.visit(val));
        },
        set(_ty, val) {
            return _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.set(this.visit(val));
        },
        era() {
            return _Era_js__WEBPACK_IMPORTED_MODULE_1__.$era;
        },
        lenPrefixedWrapper(_ty, inner) {
            return _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.lenPrefixed(this.visit(inner));
        },
        circular(ty) {
            return _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.deferred(() => this.cache[ty.id]);
        },
    });
    return (ty) => visitor.visit(ty);
}
class ChainError extends Error {
    constructor(value) {
        super();
        Object.defineProperty(this, "value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: value
        });
    }
}
const compactCodecVisitor = new _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.CodecVisitor()
    .add($null, () => $null)
    .add(_deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.u8, () => _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.compactU8)
    .add(_deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.u16, () => _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.compactU16)
    .add(_deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.u32, () => _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.compactU32)
    .add(_deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.u64, () => _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.compactU64)
    .add(_deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.u128, () => _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.compactU128)
    .add(_deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.u256, () => _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.compactU256);
//# sourceMappingURL=Codec.js.map

/***/ }),

/***/ "./node_modules/capi/esm/frame_metadata/Contract.js":
/*!**********************************************************!*\
  !*** ./node_modules/capi/esm/frame_metadata/Contract.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ContractMetadata": function() { return /* binding */ ContractMetadata; }
/* harmony export */ });
/* harmony import */ var _deps_std_testing_asserts_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../deps/std/testing/asserts.js */ "./node_modules/capi/esm/deps/std/testing/asserts.js");

var ContractMetadata;
(function (ContractMetadata) {
    // TODO: stricter typings? Not the most necessary atm.
    function fromRawTy({ type: { def, params, path }, id }) {
        return {
            id,
            path,
            params: params ? normalizeFields(params) : [],
            // TODO: grab this from appropriate loc
            docs: [],
            ...(() => {
                if (def.primitive) {
                    return {
                        type: "Primitive",
                        kind: def.primitive,
                    };
                }
                else if (def.composite) {
                    return {
                        type: "Struct",
                        fields: normalizeFields(def.composite.fields),
                    };
                }
                else if (def.variant) {
                    return {
                        type: "Union",
                        members: def.variant.variants.map((variant) => {
                            const { fields, ...rest } = variant;
                            const member = {
                                fields: fields ? normalizeFields(fields) : [],
                                ...rest,
                            };
                            return member;
                        }),
                    };
                }
                else if (def.tuple) {
                    return {
                        type: "Tuple",
                        fields: def.tuple,
                    };
                }
                else if (def.array) {
                    return {
                        type: "SizedArray",
                        len: def.array.len,
                        typeParam: def.array.type,
                    };
                }
                else if (def.sequence) {
                    return {
                        type: "Sequence",
                        typeParam: def.sequence.type,
                    };
                }
                else if (def.compact) {
                    return {
                        type: "Compact",
                        typeParam: def.compact.typeParam,
                    };
                }
                else if (def.bitSequence) {
                    return {
                        type: "BitSequence",
                        bitOrderType: def.bitSequence.bitOrderType,
                        bitStoreType: def.bitSequence.bitStoreType,
                    };
                }
                (0,_deps_std_testing_asserts_js__WEBPACK_IMPORTED_MODULE_0__.unreachable)();
            })(),
        };
    }
    ContractMetadata.fromRawTy = fromRawTy;
    function normalizeFields(fields) {
        return fields.map(({ type: ty, ...rest }) => {
            return { ty, ...rest };
        });
    }
    function normalize({ V3: { types, ...v3Rest }, ...topLevelRest }) {
        return {
            ...topLevelRest,
            V3: {
                ...v3Rest,
                types: types.map(fromRawTy),
            },
        };
    }
    ContractMetadata.normalize = normalize;
    function tys(contractMetadata) {
        return normalize(contractMetadata).V3.types;
    }
    ContractMetadata.tys = tys;
})(ContractMetadata || (ContractMetadata = {}));
//# sourceMappingURL=Contract.js.map

/***/ }),

/***/ "./node_modules/capi/esm/frame_metadata/Era.js":
/*!*****************************************************!*\
  !*** ./node_modules/capi/esm/frame_metadata/Era.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$era": function() { return /* binding */ $era; },
/* harmony export */   "immortalEra": function() { return /* binding */ immortalEra; },
/* harmony export */   "mortalEra": function() { return /* binding */ mortalEra; }
/* harmony export */ });
/* harmony import */ var _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../deps/scale.js */ "./node_modules/capi/esm/deps/scale.js");

function immortalEra() {
    return { type: "Immortal" };
}
function mortalEra(period, current) {
    const adjustedPeriod = minN(maxN(nextPowerOfTwo(period), 4n), 1n << 16n);
    const phase = current % adjustedPeriod;
    const quantizeFactor = maxN(adjustedPeriod >> 12n, 1n);
    const quantizedPhase = phase / quantizeFactor * quantizeFactor;
    return { type: "Mortal", period: adjustedPeriod, phase: quantizedPhase };
}
const $era = _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.createCodec({
    name: "era",
    _metadata: null,
    _staticSize: 2,
    _encode(buffer, value) {
        if (value.type === "Immortal") {
            buffer.array[buffer.index++] = 0;
        }
        else {
            const quantizeFactor = maxN(value.period >> 12n, 1n);
            const encoded = minN(maxN(trailingZeroes(value.period) - 1n, 1n), 15n)
                | ((value.phase / quantizeFactor) << 4n);
            _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.u16._encode(buffer, Number(encoded));
        }
    },
    _decode(buffer) {
        if (buffer.array[buffer.index] === 0) {
            buffer.index++;
            return { type: "Immortal" };
        }
        else {
            const encoded = BigInt(_deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.u16._decode(buffer));
            const period = 2n << (encoded % (1n << 4n));
            const quantizeFactor = maxN(period >> 12n, 1n);
            const phase = (encoded >> 4n) * quantizeFactor;
            if (period >= 4n && phase <= period) {
                return { type: "Mortal", period, phase };
            }
            else {
                throw new Error("Invalid period and phase");
            }
        }
    },
});
function maxN(a, b) {
    return a > b ? a : b;
}
function minN(a, b) {
    return a > b ? a : b;
}
function trailingZeroes(n) {
    let i = 0n;
    while (!(n & 1n)) {
        i++;
        n >>= 1n;
    }
    return i;
}
function nextPowerOfTwo(n) {
    n--;
    let p = 1n;
    while (n > 0n) {
        p <<= 1n;
        n >>= 1n;
    }
    return p;
}
//# sourceMappingURL=Era.js.map

/***/ }),

/***/ "./node_modules/capi/esm/frame_metadata/Extrinsic.js":
/*!***********************************************************!*\
  !*** ./node_modules/capi/esm/frame_metadata/Extrinsic.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$extrinsic": function() { return /* binding */ $extrinsic; }
/* harmony export */ });
/* harmony import */ var _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../deps/scale.js */ "./node_modules/capi/esm/deps/scale.js");
/* harmony import */ var _deps_std_testing_asserts_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../deps/std/testing/asserts.js */ "./node_modules/capi/esm/deps/std/testing/asserts.js");
/* harmony import */ var _hashers_mod_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../hashers/mod.js */ "./node_modules/capi/esm/hashers/mod.js");
/* harmony import */ var _ss58_mod_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ss58/mod.js */ "./node_modules/capi/esm/ss58/mod.js");
/* harmony import */ var _util_mod_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/mod.js */ "./node_modules/capi/esm/util/mod.js");
/* harmony import */ var _Codec_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Codec.js */ "./node_modules/capi/esm/frame_metadata/Codec.js");






function $extrinsic(props) {
    const { metadata, deriveCodec } = props;
    const { signedExtensions } = metadata.extrinsic;
    const $sig = deriveCodec(findExtrinsicTypeParam("Signature"));
    const $sigPromise = _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.promise($sig);
    const $address = deriveCodec(findExtrinsicTypeParam("Address"));
    const callTy = findExtrinsicTypeParam("Call");
    (0,_deps_std_testing_asserts_js__WEBPACK_IMPORTED_MODULE_1__.assert)(callTy?.type === "Union");
    const $call = deriveCodec(callTy);
    const [$extra, extraPjsInfo] = getExtensionInfo(pjsExtraKeyMap, "ty");
    const [$additional, additionalPjsInfo] = getExtensionInfo(pjsAdditionalKeyMap, "additionalSigned");
    const pjsInfo = [...extraPjsInfo, ...additionalPjsInfo];
    const toSignSize = $call._staticSize + $extra._staticSize + $additional._staticSize;
    const totalSize = 1 + $address._staticSize + $sig._staticSize + toSignSize;
    const $baseExtrinsic = _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.createCodec({
        _metadata: null,
        _staticSize: totalSize,
        _encode(buffer, extrinsic) {
            const firstByte = (+!!extrinsic.signature << 7) | extrinsic.protocolVersion;
            buffer.array[buffer.index++] = firstByte;
            const call = {
                type: extrinsic.palletName,
                value: {
                    type: extrinsic.methodName,
                    ...extrinsic.args,
                },
            };
            const { signature } = extrinsic;
            if (signature) {
                $address._encode(buffer, signature.address);
                if ("additional" in signature) {
                    const toSignBuffer = new _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.EncodeBuffer(buffer.stealAlloc(toSignSize));
                    $call._encode(toSignBuffer, call);
                    const callEnd = toSignBuffer.finishedSize + toSignBuffer.index;
                    if ("signPayload" in props.sign) {
                        const exts = [...signature.extra, ...signature.additional];
                        const extEnds = [];
                        for (let i = 0; i < pjsInfo.length; i++) {
                            pjsInfo[i].codec._encode(toSignBuffer, exts[i]);
                            extEnds.push(toSignBuffer.finishedSize + toSignBuffer.index);
                        }
                        const extraEnd = extEnds[extraPjsInfo.length - 1] ?? callEnd;
                        const toSignEncoded = toSignBuffer.finish();
                        const callEncoded = toSignEncoded.subarray(0, callEnd);
                        const extraEncoded = toSignEncoded.subarray(callEnd, extraEnd);
                        if (signature.address.type !== "Id") {
                            throw new Error("polkadot signer: address types other than Id are not supported");
                        }
                        const payload = {
                            address: _ss58_mod_js__WEBPACK_IMPORTED_MODULE_3__.encode(props.prefix, signature.address.value),
                            method: _util_mod_js__WEBPACK_IMPORTED_MODULE_4__.hex.encodePrefixed(callEncoded),
                            signedExtensions: signedExtensions.map((x) => x.ident),
                            version: extrinsic.protocolVersion,
                        };
                        let last = callEnd;
                        for (let i = 0; i < pjsInfo.length; i++) {
                            const { key } = pjsInfo[i];
                            if (!key)
                                throw new Error("polkadot signer: unknown extension");
                            payload[key] = typeof exts[i] === "number"
                                ? exts[i]
                                : _util_mod_js__WEBPACK_IMPORTED_MODULE_4__.hex.encodePrefixed(toSignEncoded.subarray(last, extEnds[i]));
                            last = extEnds[i];
                        }
                        const signer = props.sign;
                        buffer.writeAsync(0, async (buffer) => {
                            const { signature } = await signer.signPayload(payload);
                            buffer.insertArray(_util_mod_js__WEBPACK_IMPORTED_MODULE_4__.hex.decode(signature));
                        });
                        buffer.insertArray(extraEncoded);
                        buffer.insertArray(callEncoded);
                    }
                    else {
                        $extra._encode(toSignBuffer, signature.extra);
                        const extraEnd = toSignBuffer.finishedSize + toSignBuffer.index;
                        $additional._encode(toSignBuffer, signature.additional);
                        const toSignEncoded = toSignBuffer.finish();
                        const callEncoded = toSignEncoded.subarray(0, callEnd);
                        const extraEncoded = toSignEncoded.subarray(callEnd, extraEnd);
                        const toSign = toSignEncoded.length > 256
                            ? _hashers_mod_js__WEBPACK_IMPORTED_MODULE_2__.Blake2_256.hash(toSignEncoded)
                            : toSignEncoded;
                        const sig = props.sign(toSign);
                        if (sig instanceof Promise) {
                            $sigPromise._encode(buffer, sig);
                        }
                        else {
                            $sig._encode(buffer, sig);
                        }
                        buffer.insertArray(extraEncoded);
                        buffer.insertArray(callEncoded);
                    }
                }
                else {
                    $sig._encode(buffer, signature.sig);
                    $extra._encode(buffer, signature.extra);
                    $call._encode(buffer, call);
                }
            }
            else {
                $call._encode(buffer, call);
            }
        },
        _decode(buffer) {
            const firstByte = buffer.array[buffer.index++];
            const hasSignature = firstByte & (1 << 7);
            const protocolVersion = firstByte & ~(1 << 7);
            let signature;
            if (hasSignature) {
                const address = $address._decode(buffer);
                const sig = $sig._decode(buffer);
                const extra = $extra._decode(buffer);
                signature = { address, sig, extra };
            }
            const call = $call._decode(buffer);
            const { type: palletName, value: { type: methodName, ...args } } = call;
            return { protocolVersion, signature, palletName, methodName, args };
        },
    });
    return _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.lenPrefixed($baseExtrinsic);
    function findExtrinsicTypeParam(name) {
        return metadata.extrinsic.ty.params.find((x) => x.name === name)?.ty;
    }
    function getExtensionInfo(keyMap, key) {
        const pjsInfo = signedExtensions
            .map((e) => ({ key: keyMap[e.ident], codec: deriveCodec(e[key]) }))
            .filter((x) => x.codec !== _Codec_js__WEBPACK_IMPORTED_MODULE_5__.$null);
        return [_deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.tuple(...pjsInfo.map((x) => x.codec)), pjsInfo];
    }
}
const pjsExtraKeyMap = {
    CheckEra: "era",
    CheckMortality: "era",
    ChargeTransactionPayment: "tip",
    CheckNonce: "nonce",
};
const pjsAdditionalKeyMap = {
    CheckEra: "blockHash",
    CheckMortality: "blockHash",
    CheckSpecVersion: "specVersion",
    CheckTxVersion: "transactionVersion",
    CheckVersion: "specVersion",
    CheckGenesis: "genesisHash",
};
//# sourceMappingURL=Extrinsic.js.map

/***/ }),

/***/ "./node_modules/capi/esm/frame_metadata/Key.js":
/*!*****************************************************!*\
  !*** ./node_modules/capi/esm/frame_metadata/Key.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$storageKey": function() { return /* binding */ $storageKey; },
/* harmony export */   "DecodeNonTransparentKeyError": function() { return /* binding */ DecodeNonTransparentKeyError; },
/* harmony export */   "InvalidArgErr": function() { return /* binding */ InvalidArgErr; },
/* harmony export */   "StorageEntryMissingHasher": function() { return /* binding */ StorageEntryMissingHasher; }
/* harmony export */ });
/* harmony import */ var _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../deps/scale.js */ "./node_modules/capi/esm/deps/scale.js");
/* harmony import */ var _hashers_mod_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../hashers/mod.js */ "./node_modules/capi/esm/hashers/mod.js");


function $storageKey(props) {
    let keyCodecs;
    if (props.storageEntry.type === "Map") {
        const codec = props.deriveCodec(props.storageEntry.key);
        if (props.storageEntry.hashers.length === 1) {
            keyCodecs = [codec];
        }
        else {
            if (codec._metadata?.[0] !== _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.tuple) {
                throw new Error("Expected key codec to be a tuple since there are multiple hashers");
            }
            keyCodecs = codec._metadata.slice(1);
        }
    }
    else {
        keyCodecs = [];
    }
    const palletHash = _hashers_mod_js__WEBPACK_IMPORTED_MODULE_1__.Twox128.hash(new TextEncoder().encode(props.pallet.name));
    const entryHash = _hashers_mod_js__WEBPACK_IMPORTED_MODULE_1__.Twox128.hash(new TextEncoder().encode(props.storageEntry.name));
    const $keys = [...Array(keyCodecs.length + 1).keys()].reduce((keys, i) => {
        keys[i] = _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.tuple(...keyCodecs.slice(0, i).map(($key, i) => _hashers_mod_js__WEBPACK_IMPORTED_MODULE_1__[props.storageEntry.hashers[i]].$hash($key)));
        return keys;
    }, {});
    return _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.createCodec({
        _metadata: [$storageKey, props],
        _staticSize: $keys[Object.values($keys).length - 1]._staticSize,
        _encode(buffer, key) {
            buffer.insertArray(palletHash);
            buffer.insertArray(entryHash);
            if (key.length === 0)
                return;
            $keys[key.length]._encode(buffer, key);
        },
        _decode(buffer) {
            // Ignore initial hashes
            buffer.index += 32;
            return $keys[Object.values($keys).length - 1]._decode(buffer);
        },
    });
}
class StorageEntryMissingHasher extends Error {
}
class InvalidArgErr extends Error {
}
class DecodeNonTransparentKeyError extends Error {
}
//# sourceMappingURL=Key.js.map

/***/ }),

/***/ "./node_modules/capi/esm/frame_metadata/Metadata.js":
/*!**********************************************************!*\
  !*** ./node_modules/capi/esm/frame_metadata/Metadata.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$constant": function() { return /* binding */ $constant; },
/* harmony export */   "$extrinsicDef": function() { return /* binding */ $extrinsicDef; },
/* harmony export */   "$metadata": function() { return /* binding */ $metadata; },
/* harmony export */   "$pallet": function() { return /* binding */ $pallet; },
/* harmony export */   "$signedExtensionMetadata": function() { return /* binding */ $signedExtensionMetadata; },
/* harmony export */   "$storage": function() { return /* binding */ $storage; },
/* harmony export */   "$storageEntry": function() { return /* binding */ $storageEntry; },
/* harmony export */   "$storageEntryModifier": function() { return /* binding */ $storageEntryModifier; },
/* harmony export */   "$storageEntryType": function() { return /* binding */ $storageEntryType; },
/* harmony export */   "EntryNotFoundError": function() { return /* binding */ EntryNotFoundError; },
/* harmony export */   "PalletNotFoundError": function() { return /* binding */ PalletNotFoundError; },
/* harmony export */   "fromPrefixedHex": function() { return /* binding */ fromPrefixedHex; },
/* harmony export */   "getEntry": function() { return /* binding */ getEntry; },
/* harmony export */   "getPallet": function() { return /* binding */ getPallet; },
/* harmony export */   "getPalletAndEntry": function() { return /* binding */ getPalletAndEntry; },
/* harmony export */   "magicNumber": function() { return /* binding */ magicNumber; }
/* harmony export */ });
/* harmony import */ var _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../deps/scale.js */ "./node_modules/capi/esm/deps/scale.js");
/* harmony import */ var _util_mod_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/mod.js */ "./node_modules/capi/esm/util/mod.js");
/* harmony import */ var _scale_info_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./scale_info.js */ "./node_modules/capi/esm/frame_metadata/scale_info.js");



const $hasherKind = _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.stringUnion([
    "Blake2_128",
    "Blake2_256",
    "Blake2_128Concat",
    "Twox128",
    "Twox256",
    "Twox64Concat",
    "Identity",
]);
const $storageEntryModifier = _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.stringUnion([
    "Optional",
    "Default",
]);
const $storageEntryType = _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.taggedUnion("type", [
    ["Plain", ["value", _scale_info_js__WEBPACK_IMPORTED_MODULE_2__.$tyId]],
    [
        "Map",
        ["hashers", _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.array($hasherKind)],
        ["key", _scale_info_js__WEBPACK_IMPORTED_MODULE_2__.$tyId],
        ["value", _scale_info_js__WEBPACK_IMPORTED_MODULE_2__.$tyId],
    ],
]);
const $storageEntry = _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.spread(_deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.spread(_deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.object(["name", _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.str], ["modifier", $storageEntryModifier]), $storageEntryType), _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.object(["default", _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.array(_deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.u8)], ["docs", _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.array(_deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.str)]));
const $storage = _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.object(["prefix", _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.str], ["entries", _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.array($storageEntry)]);
const $constant = _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.object(["name", _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.str], ["ty", _scale_info_js__WEBPACK_IMPORTED_MODULE_2__.$tyId], ["value", _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.uint8Array], ["docs", _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.array(_deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.str)]);
const $pallet = _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.object(["name", _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.str], ["storage", _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.option($storage)], ["calls", _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.option(_scale_info_js__WEBPACK_IMPORTED_MODULE_2__.$tyId)], ["event", _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.option(_scale_info_js__WEBPACK_IMPORTED_MODULE_2__.$tyId)], ["constants", _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.array($constant)], ["error", _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.option(_scale_info_js__WEBPACK_IMPORTED_MODULE_2__.$tyId)], ["i", _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.u8]);
const $signedExtensionMetadata = _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.object(["ident", _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.str], ["ty", _scale_info_js__WEBPACK_IMPORTED_MODULE_2__.$tyId], ["additionalSigned", _scale_info_js__WEBPACK_IMPORTED_MODULE_2__.$tyId]);
const $extrinsicDef = _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.object(["ty", _scale_info_js__WEBPACK_IMPORTED_MODULE_2__.$tyId], ["version", _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.u8], ["signedExtensions", _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.array($signedExtensionMetadata)]);
// https://docs.substrate.io/v3/runtime/metadata/#encoded-metadata-format
const magicNumber = 1635018093;
const $metadata = _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.object(["magicNumber", _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.constantPattern(magicNumber, _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.u32)], ["version", _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.constantPattern(14, _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.u8)], ["tys", _scale_info_js__WEBPACK_IMPORTED_MODULE_2__.$tys], ["pallets", _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.array($pallet)], ["extrinsic", $extrinsicDef]);
function fromPrefixedHex(scaleEncoded) {
    return $metadata.decode(_util_mod_js__WEBPACK_IMPORTED_MODULE_1__.hex.decode(scaleEncoded));
}
function getPallet(metadata, name) {
    return metadata.pallets.find((pallet) => pallet.name === name) || new PalletNotFoundError();
}
class PalletNotFoundError extends _util_mod_js__WEBPACK_IMPORTED_MODULE_1__.ErrorCtor("PalletNotFound") {
}
function getEntry(pallet, name) {
    return pallet.storage?.entries.find((entry) => entry.name === name) || new EntryNotFoundError();
}
class EntryNotFoundError extends _util_mod_js__WEBPACK_IMPORTED_MODULE_1__.ErrorCtor("EntryNotFound") {
}
function getPalletAndEntry(metadata, palletName, entryName) {
    const pallet = getPallet(metadata, palletName);
    if (pallet instanceof Error) {
        return pallet;
    }
    const entry = getEntry(pallet, entryName);
    if (entry instanceof Error) {
        return entry;
    }
    return [pallet, entry];
}
//# sourceMappingURL=Metadata.js.map

/***/ }),

/***/ "./node_modules/capi/esm/frame_metadata/TyVisitor.js":
/*!***********************************************************!*\
  !*** ./node_modules/capi/esm/frame_metadata/TyVisitor.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TyVisitor": function() { return /* binding */ TyVisitor; }
/* harmony export */ });
class TyVisitor {
    constructor(tys, methods) {
        Object.defineProperty(this, "tys", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: tys
        });
        Object.defineProperty(this, "cache", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        Object.assign(this, methods);
    }
    visit(ty) {
        if (typeof ty === "number") {
            ty = this.tys[ty];
        }
        const i = ty.id;
        if (this.cache[i] != null) {
            return this.cache[i];
        }
        if (this.cache[i] === null) {
            return this.circular(ty);
        }
        this.cache[i] = null; // circularity detection
        const value = this._visit(ty);
        this.cache[i] = value;
        return value;
    }
    _visit(ty) {
        if (ty.type === "Struct") {
            if (this.map && ty.path[0] === "BTreeMap") {
                return this.map(ty, ty.params[0].ty, ty.params[1].ty);
            }
            else if (this.set && ty.path[0] === "BTreeSet") {
                return this.set(ty, ty.params[0].ty);
            }
            else if (ty.path.at(-1) === "WrapperOpaque" || ty.path.at(-1) === "WrapperKeepOpaque") {
                return this.lenPrefixedWrapper(ty, ty.params[0].ty);
            }
            else if (ty.fields.length === 0) {
                return this.unitStruct(ty);
            }
            else if (ty.fields[0].name === undefined) {
                if (ty.fields.length === 1) {
                    return this.wrapperStruct(ty, ty.fields[0].ty);
                }
                else {
                    return this.tupleStruct(ty, ty.fields.map((x) => x.ty));
                }
            }
            else {
                return this.objectStruct(ty);
            }
        }
        else if (ty.type === "Tuple") {
            if (ty.fields.length === 0) {
                return this.unitStruct(ty);
            }
            else if (ty.fields.length === 1) {
                return this.wrapperStruct(ty, ty.fields[0]);
            }
            else {
                return this.tupleStruct(ty, ty.fields);
            }
        }
        else if (ty.type === "Union") {
            // TODO: revisit Option and Result
            if (ty.path[0] === "Option") {
                return this.option(ty, ty.params[0].ty);
            }
            else if (ty.path[0] === "Result") {
                return this.result(ty, ty.params[0].ty, ty.params[1].ty);
            }
            else if (this.era && ty.path.at(-1) === "Era") {
                return this.era(ty);
            }
            else if (ty.members.length === 0) {
                return this.never(ty);
            }
            else if (ty.members.every((x) => x.fields.length === 0)) {
                return this.stringUnion(ty);
            }
            else {
                return this.taggedUnion(ty);
            }
        }
        else if (ty.type === "Sequence") {
            if (this.uint8Array && _isU8(ty.typeParam)) {
                return this.uint8Array(ty);
            }
            else {
                return this.array(ty);
            }
        }
        else if (ty.type === "SizedArray") {
            if (this.sizedUint8Array && _isU8(ty.typeParam)) {
                return this.sizedUint8Array(ty);
            }
            else {
                return this.sizedArray(ty);
            }
        }
        else if (ty.type === "Primitive") {
            return this.primitive(ty);
        }
        else if (ty.type === "Compact") {
            return this.compact(ty);
        }
        else if (ty.type === "BitSequence") {
            return this.bitSequence(ty);
        }
        else {
            throw new Error("unreachable");
        }
    }
}
function _isU8(ty) {
    return ty.type === "Primitive" && ty.kind === "u8";
}
//# sourceMappingURL=TyVisitor.js.map

/***/ }),

/***/ "./node_modules/capi/esm/frame_metadata/mod.js":
/*!*****************************************************!*\
  !*** ./node_modules/capi/esm/frame_metadata/mod.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$constant": function() { return /* reexport safe */ _Metadata_js__WEBPACK_IMPORTED_MODULE_5__.$constant; },
/* harmony export */   "$era": function() { return /* reexport safe */ _Era_js__WEBPACK_IMPORTED_MODULE_2__.$era; },
/* harmony export */   "$extrinsic": function() { return /* reexport safe */ _Extrinsic_js__WEBPACK_IMPORTED_MODULE_3__.$extrinsic; },
/* harmony export */   "$extrinsicDef": function() { return /* reexport safe */ _Metadata_js__WEBPACK_IMPORTED_MODULE_5__.$extrinsicDef; },
/* harmony export */   "$field": function() { return /* reexport safe */ _scale_info_js__WEBPACK_IMPORTED_MODULE_6__.$field; },
/* harmony export */   "$metadata": function() { return /* reexport safe */ _Metadata_js__WEBPACK_IMPORTED_MODULE_5__.$metadata; },
/* harmony export */   "$null": function() { return /* reexport safe */ _Codec_js__WEBPACK_IMPORTED_MODULE_0__.$null; },
/* harmony export */   "$pallet": function() { return /* reexport safe */ _Metadata_js__WEBPACK_IMPORTED_MODULE_5__.$pallet; },
/* harmony export */   "$param": function() { return /* reexport safe */ _scale_info_js__WEBPACK_IMPORTED_MODULE_6__.$param; },
/* harmony export */   "$signedExtensionMetadata": function() { return /* reexport safe */ _Metadata_js__WEBPACK_IMPORTED_MODULE_5__.$signedExtensionMetadata; },
/* harmony export */   "$storage": function() { return /* reexport safe */ _Metadata_js__WEBPACK_IMPORTED_MODULE_5__.$storage; },
/* harmony export */   "$storageEntry": function() { return /* reexport safe */ _Metadata_js__WEBPACK_IMPORTED_MODULE_5__.$storageEntry; },
/* harmony export */   "$storageEntryModifier": function() { return /* reexport safe */ _Metadata_js__WEBPACK_IMPORTED_MODULE_5__.$storageEntryModifier; },
/* harmony export */   "$storageEntryType": function() { return /* reexport safe */ _Metadata_js__WEBPACK_IMPORTED_MODULE_5__.$storageEntryType; },
/* harmony export */   "$storageKey": function() { return /* reexport safe */ _Key_js__WEBPACK_IMPORTED_MODULE_4__.$storageKey; },
/* harmony export */   "$ty": function() { return /* reexport safe */ _scale_info_js__WEBPACK_IMPORTED_MODULE_6__.$ty; },
/* harmony export */   "$tyDef": function() { return /* reexport safe */ _scale_info_js__WEBPACK_IMPORTED_MODULE_6__.$tyDef; },
/* harmony export */   "$tyId": function() { return /* reexport safe */ _scale_info_js__WEBPACK_IMPORTED_MODULE_6__.$tyId; },
/* harmony export */   "$tys": function() { return /* reexport safe */ _scale_info_js__WEBPACK_IMPORTED_MODULE_6__.$tys; },
/* harmony export */   "ChainError": function() { return /* reexport safe */ _Codec_js__WEBPACK_IMPORTED_MODULE_0__.ChainError; },
/* harmony export */   "ContractMetadata": function() { return /* reexport safe */ _Contract_js__WEBPACK_IMPORTED_MODULE_1__.ContractMetadata; },
/* harmony export */   "DecodeNonTransparentKeyError": function() { return /* reexport safe */ _Key_js__WEBPACK_IMPORTED_MODULE_4__.DecodeNonTransparentKeyError; },
/* harmony export */   "DeriveCodec": function() { return /* reexport safe */ _Codec_js__WEBPACK_IMPORTED_MODULE_0__.DeriveCodec; },
/* harmony export */   "EntryNotFoundError": function() { return /* reexport safe */ _Metadata_js__WEBPACK_IMPORTED_MODULE_5__.EntryNotFoundError; },
/* harmony export */   "InvalidArgErr": function() { return /* reexport safe */ _Key_js__WEBPACK_IMPORTED_MODULE_4__.InvalidArgErr; },
/* harmony export */   "PalletNotFoundError": function() { return /* reexport safe */ _Metadata_js__WEBPACK_IMPORTED_MODULE_5__.PalletNotFoundError; },
/* harmony export */   "StorageEntryMissingHasher": function() { return /* reexport safe */ _Key_js__WEBPACK_IMPORTED_MODULE_4__.StorageEntryMissingHasher; },
/* harmony export */   "TyDecodeCtx": function() { return /* reexport safe */ _scale_info_js__WEBPACK_IMPORTED_MODULE_6__.TyDecodeCtx; },
/* harmony export */   "TyVisitor": function() { return /* reexport safe */ _TyVisitor_js__WEBPACK_IMPORTED_MODULE_7__.TyVisitor; },
/* harmony export */   "fromPrefixedHex": function() { return /* reexport safe */ _Metadata_js__WEBPACK_IMPORTED_MODULE_5__.fromPrefixedHex; },
/* harmony export */   "getEntry": function() { return /* reexport safe */ _Metadata_js__WEBPACK_IMPORTED_MODULE_5__.getEntry; },
/* harmony export */   "getPallet": function() { return /* reexport safe */ _Metadata_js__WEBPACK_IMPORTED_MODULE_5__.getPallet; },
/* harmony export */   "getPalletAndEntry": function() { return /* reexport safe */ _Metadata_js__WEBPACK_IMPORTED_MODULE_5__.getPalletAndEntry; },
/* harmony export */   "immortalEra": function() { return /* reexport safe */ _Era_js__WEBPACK_IMPORTED_MODULE_2__.immortalEra; },
/* harmony export */   "magicNumber": function() { return /* reexport safe */ _Metadata_js__WEBPACK_IMPORTED_MODULE_5__.magicNumber; },
/* harmony export */   "mortalEra": function() { return /* reexport safe */ _Era_js__WEBPACK_IMPORTED_MODULE_2__.mortalEra; }
/* harmony export */ });
/* harmony import */ var _Codec_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Codec.js */ "./node_modules/capi/esm/frame_metadata/Codec.js");
/* harmony import */ var _Contract_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Contract.js */ "./node_modules/capi/esm/frame_metadata/Contract.js");
/* harmony import */ var _Era_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Era.js */ "./node_modules/capi/esm/frame_metadata/Era.js");
/* harmony import */ var _Extrinsic_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Extrinsic.js */ "./node_modules/capi/esm/frame_metadata/Extrinsic.js");
/* harmony import */ var _Key_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Key.js */ "./node_modules/capi/esm/frame_metadata/Key.js");
/* harmony import */ var _Metadata_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Metadata.js */ "./node_modules/capi/esm/frame_metadata/Metadata.js");
/* harmony import */ var _scale_info_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./scale_info.js */ "./node_modules/capi/esm/frame_metadata/scale_info.js");
/* harmony import */ var _TyVisitor_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./TyVisitor.js */ "./node_modules/capi/esm/frame_metadata/TyVisitor.js");








//# sourceMappingURL=mod.js.map

/***/ }),

/***/ "./node_modules/capi/esm/frame_metadata/scale_info.js":
/*!************************************************************!*\
  !*** ./node_modules/capi/esm/frame_metadata/scale_info.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$field": function() { return /* binding */ $field; },
/* harmony export */   "$param": function() { return /* binding */ $param; },
/* harmony export */   "$ty": function() { return /* binding */ $ty; },
/* harmony export */   "$tyDef": function() { return /* binding */ $tyDef; },
/* harmony export */   "$tyId": function() { return /* binding */ $tyId; },
/* harmony export */   "$tys": function() { return /* binding */ $tys; },
/* harmony export */   "TyDecodeCtx": function() { return /* binding */ TyDecodeCtx; }
/* harmony export */ });
/* harmony import */ var _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../deps/scale.js */ "./node_modules/capi/esm/deps/scale.js");

class TyDecodeCtx {
    constructor() {
        Object.defineProperty(this, "tys", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: null
        });
    }
}
const $tys = _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.createCodec({
    name: "tys",
    _metadata: null,
    _staticSize: _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.compactU32._staticSize,
    _encode(buffer, value) {
        _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.array($ty)._encode(buffer, value);
    },
    _decode(buffer) {
        const length = _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.compactU32._decode(buffer);
        const ctx = buffer.context.get(TyDecodeCtx);
        const tys = ctx.tys = Array.from({ length }, (_, id) => ({ id }));
        for (let i = 0; i < length; i++) {
            Object.assign(tys[i], $ty._decode(buffer));
        }
        return tys;
    },
});
const $tyId = _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.createCodec({
    name: "tyId",
    _metadata: null,
    _staticSize: _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.compactU32._staticSize,
    _encode(buffer, value) {
        _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.compactU32._encode(buffer, value.id);
    },
    _decode(buffer) {
        const ctx = buffer.context.get(TyDecodeCtx);
        const id = _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.compactU32._decode(buffer);
        return ctx.tys?.[id] ?? { id };
    },
});
const $field = _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.object(["name", _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.option(_deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.str)], ["ty", $tyId], ["typeName", _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.option(_deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.str)], ["docs", _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.array(_deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.str)]);
const $primitiveKind = _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.stringUnion([
    "bool",
    "char",
    "str",
    "u8",
    "u16",
    "u32",
    "u64",
    "u128",
    "u256",
    "i8",
    "i16",
    "i32",
    "i64",
    "i128",
    "i256",
]);
const $tyDef = _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.taggedUnion("type", [
    [
        "Struct",
        ["fields", _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.array($field)],
    ],
    [
        "Union",
        [
            "members",
            _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.array(_deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.object(["name", _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.str], ["fields", _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.array($field)], ["index", _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.u8], ["docs", _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.array(_deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.str)])),
        ],
    ],
    [
        "Sequence",
        ["typeParam", $tyId],
    ],
    [
        "SizedArray",
        ["len", _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.u32],
        ["typeParam", $tyId],
    ],
    [
        "Tuple",
        ["fields", _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.array($tyId)],
    ],
    [
        "Primitive",
        ["kind", $primitiveKind],
    ],
    [
        "Compact",
        ["typeParam", $tyId],
    ],
    [
        "BitSequence",
        ["bitOrderType", $tyId],
        ["bitStoreType", $tyId],
    ],
]);
const $param = _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.object(["name", _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.str], ["ty", _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.option($tyId)]);
const $ty = _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.spread(_deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.spread(_deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.object(["id", _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.compactU32], ["path", _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.array(_deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.str)], ["params", _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.array($param)]), $tyDef), _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.object(["docs", _deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.array(_deps_scale_js__WEBPACK_IMPORTED_MODULE_0__.str)]));
//# sourceMappingURL=scale_info.js.map

/***/ }),

/***/ "./node_modules/capi/esm/hashers/mod.js":
/*!**********************************************!*\
  !*** ./node_modules/capi/esm/hashers/mod.js ***!
  \**********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Blake2Hasher": function() { return /* binding */ Blake2Hasher; },
/* harmony export */   "Blake2_128": function() { return /* binding */ Blake2_128; },
/* harmony export */   "Blake2_128Concat": function() { return /* binding */ Blake2_128Concat; },
/* harmony export */   "Blake2_256": function() { return /* binding */ Blake2_256; },
/* harmony export */   "Hasher": function() { return /* binding */ Hasher; },
/* harmony export */   "Identity": function() { return /* binding */ Identity; },
/* harmony export */   "IdentityHasher": function() { return /* binding */ IdentityHasher; },
/* harmony export */   "Twox128": function() { return /* binding */ Twox128; },
/* harmony export */   "Twox256": function() { return /* binding */ Twox256; },
/* harmony export */   "Twox64Concat": function() { return /* binding */ Twox64Concat; },
/* harmony export */   "TwoxHasher": function() { return /* binding */ TwoxHasher; }
/* harmony export */ });
/* harmony import */ var _deps_blake2b_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../deps/blake2b.js */ "./node_modules/capi/esm/deps/blake2b.js");
/* harmony import */ var _deps_scale_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../deps/scale.js */ "./node_modules/capi/esm/deps/scale.js");
/* harmony import */ var _frame_metadata_Key_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../frame_metadata/Key.js */ "./node_modules/capi/esm/frame_metadata/Key.js");
/* harmony import */ var _xxhash_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./xxhash.js */ "./node_modules/capi/esm/hashers/xxhash.js");





class Hasher {
    $hash($inner) {
        return _deps_scale_js__WEBPACK_IMPORTED_MODULE_1__.createCodec({
            _metadata: null,
            _staticSize: this.digestLength + $inner._staticSize,
            _encode: (buffer, value) => {
                const hashArray = buffer.array.subarray(buffer.index, buffer.index += this.digestLength);
                const cursor = this.concat
                    ? buffer.createCursor($inner._staticSize)
                    : new _deps_scale_js__WEBPACK_IMPORTED_MODULE_1__.EncodeBuffer(buffer.stealAlloc($inner._staticSize));
                $inner._encode(cursor, value);
                buffer.waitForBuffer(cursor, () => {
                    if (this.concat)
                        cursor.close();
                    else
                        cursor._commitWritten();
                    const hashing = this.create();
                    updateHashing(hashing, cursor);
                    hashing.digestInto(hashArray);
                });
            },
            _decode: (buffer) => {
                if (!this.concat)
                    throw new _frame_metadata_Key_js__WEBPACK_IMPORTED_MODULE_2__.DecodeNonTransparentKeyError();
                buffer.index += this.digestLength;
                return $inner._decode(buffer);
            },
        });
    }
    hash(data) {
        const output = new Uint8Array(this.digestLength + (this.concat ? data.length : 0));
        const hashing = this.create();
        hashing.update(data);
        hashing.digestInto(output);
        if (this.concat) {
            output.set(data, this.digestLength);
        }
        return output;
    }
}
class Blake2Hasher extends Hasher {
    constructor(size, concat) {
        super();
        Object.defineProperty(this, "concat", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: concat
        });
        Object.defineProperty(this, "digestLength", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.digestLength = size / 8;
    }
    create() {
        return _deps_blake2b_js__WEBPACK_IMPORTED_MODULE_0__.blake2b.create({ dkLen: this.digestLength });
    }
}
class IdentityHasher extends Hasher {
    constructor() {
        super(...arguments);
        Object.defineProperty(this, "digestLength", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "concat", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
    }
    create() {
        return {
            update() { },
            digestInto() { },
        };
    }
    $hash($inner) {
        return $inner;
    }
    hash(data) {
        return data.slice();
    }
}
class TwoxHasher extends Hasher {
    constructor(size, concat) {
        super();
        Object.defineProperty(this, "concat", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: concat
        });
        Object.defineProperty(this, "digestLength", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "rounds", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.digestLength = size / 8;
        this.rounds = size / 64;
    }
    create() {
        return new _xxhash_js__WEBPACK_IMPORTED_MODULE_3__.Xxhash(this.rounds);
    }
}
const Blake2_128 = new Blake2Hasher(128, false);
const Blake2_128Concat = new Blake2Hasher(128, true);
const Blake2_256 = new Blake2Hasher(256, false);
const Identity = new IdentityHasher();
const Twox128 = new TwoxHasher(128, false);
const Twox256 = new TwoxHasher(256, false);
const Twox64Concat = new TwoxHasher(64, true);
function updateHashing(hashing, data) {
    for (const array of data.finishedArrays) {
        if (array instanceof _deps_scale_js__WEBPACK_IMPORTED_MODULE_1__.EncodeBuffer) {
            updateHashing(hashing, array);
        }
        else {
            hashing.update(array);
        }
    }
}
//# sourceMappingURL=mod.js.map

/***/ }),

/***/ "./node_modules/capi/esm/hashers/xxhash.js":
/*!*************************************************!*\
  !*** ./node_modules/capi/esm/hashers/xxhash.js ***!
  \*************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Xxhash": function() { return /* binding */ Xxhash; }
/* harmony export */ });
/*
  Copyright 2022 Parity Technologies
  SPDX-License-Identifier: Apache-2.0
  Adapted from https://github.com/polkadot-js/common/blob/40d6a388/packages/util-crypto/src/xxhash/xxhash64.ts

  Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  SPDX-License-Identifier: Apache-2.0
  Adapted from https://github.com/pierrec/js-xxhash/blob/0504e76f3d31a21ae8528a7f590c7289c9e431d2/lib/xxhash64.js

  xxHash64 implementation in pure Javascript
  Copyright (C) 2016, Pierre Curto

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/
const P64_1 = 11400714785074694791n;
const P64_2 = 14029467366897019727n;
const P64_3 = 1609587929392839161n;
const P64_4 = 9650029242287828579n;
const P64_5 = 2870177450012600261n;
// mask for a u64, all bits set
const U64 = 0xffffffffffffffffn;
function rotl(a, b) {
    const c = a & U64;
    return ((c << b) | (c >> (64n - b))) & U64;
}
class Xxhash {
    constructor(rounds) {
        Object.defineProperty(this, "rounds", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: rounds
        });
        Object.defineProperty(this, "buf", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Uint8Array(32)
        });
        Object.defineProperty(this, "view", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new DataView(this.buf.buffer)
        });
        Object.defineProperty(this, "bufI", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "written", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "vs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.vs = new BigUint64Array(rounds * 4);
        for (let i = 0, seed = 0n; i < this.vs.length; seed++) {
            this.vs[i++] = seed + P64_1 + P64_2;
            this.vs[i++] = seed + P64_2;
            this.vs[i++] = seed;
            this.vs[i++] = seed - P64_1;
        }
    }
    _updateVs(view, p) {
        const a = view.getBigUint64(p, true);
        const b = view.getBigUint64(p + 8, true);
        const c = view.getBigUint64(p + 16, true);
        const d = view.getBigUint64(p + 24, true);
        for (let i = 0; i < this.vs.length;) {
            this.vs[i] = P64_1 * rotl(this.vs[i++] + P64_2 * a, 31n);
            this.vs[i] = P64_1 * rotl(this.vs[i++] + P64_2 * b, 31n);
            this.vs[i] = P64_1 * rotl(this.vs[i++] + P64_2 * c, 31n);
            this.vs[i] = P64_1 * rotl(this.vs[i++] + P64_2 * d, 31n);
        }
    }
    update(input) {
        this.written += input.length;
        let i = 0;
        if (this.bufI) {
            i = Math.min(input.length, 32 - this.bufI);
            this.buf.set(input.subarray(0, i), this.bufI);
            this.bufI += i;
            if (this.bufI < 32)
                return;
            this._updateVs(this.view, 0);
        }
        if (i <= input.length - 32) {
            const view = new DataView(input.buffer, input.byteOffset, input.byteLength);
            do {
                this._updateVs(view, i);
                i += 32;
            } while (i + 32 <= input.length);
        }
        this.buf.set(input.subarray(i));
        this.bufI = input.length - i;
    }
    digest() {
        return this.digestInto(new Uint8Array(this.rounds * 8));
    }
    digestInto(digest) {
        const digestView = new DataView(digest.buffer, digest.byteOffset, digest.byteLength);
        for (let i = 0; i < this.rounds; i++) {
            const v0 = this.vs[i * 4];
            const v1 = this.vs[i * 4 + 1];
            const v2 = this.vs[i * 4 + 2];
            const v3 = this.vs[i * 4 + 3];
            let h64 = 0n;
            if (this.written >= 32) {
                h64 = U64 & (rotl(v0, 1n) + rotl(v1, 7n) + rotl(v2, 12n) + rotl(v3, 18n));
                h64 = U64 & ((h64 ^ (P64_1 * rotl(v0 * P64_2, 31n))) * P64_1 + P64_4);
                h64 = U64 & ((h64 ^ (P64_1 * rotl(v1 * P64_2, 31n))) * P64_1 + P64_4);
                h64 = U64 & ((h64 ^ (P64_1 * rotl(v2 * P64_2, 31n))) * P64_1 + P64_4);
                h64 = U64 & ((h64 ^ (P64_1 * rotl(v3 * P64_2, 31n))) * P64_1 + P64_4);
            }
            else {
                h64 = BigInt(i) + P64_5;
            }
            h64 = U64 & (BigInt(this.written) + h64);
            let p = 0;
            while (p + 8 <= this.bufI) {
                const n = this.view.getBigUint64(p, true);
                h64 = U64 & (P64_4 + P64_1 * rotl(h64 ^ (P64_1 * rotl(P64_2 * n, 31n)), 27n));
                p += 8;
            }
            if (p + 4 <= this.bufI) {
                const n = BigInt(this.view.getUint32(p, true));
                h64 = U64 & (P64_3 + P64_2 * rotl(h64 ^ (P64_1 * n), 23n));
                p += 4;
            }
            while (p < this.bufI) {
                const n = BigInt(this.buf[p++]);
                h64 = U64 & (P64_1 * rotl(h64 ^ (P64_5 * n), 11n));
            }
            h64 = U64 & (P64_2 * (h64 ^ (h64 >> 33n)));
            h64 = U64 & (P64_3 * (h64 ^ (h64 >> 29n)));
            h64 = U64 & (h64 ^ (h64 >> 32n));
            digestView.setBigUint64(i * 8, h64, true);
        }
        return digest;
    }
}
//# sourceMappingURL=xxhash.js.map

/***/ }),

/***/ "./node_modules/capi/esm/known/configs.js":
/*!************************************************!*\
  !*** ./node_modules/capi/esm/known/configs.js ***!
  \************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "acala": function() { return /* binding */ acala; },
/* harmony export */   "kusama": function() { return /* binding */ kusama; },
/* harmony export */   "moonbeam": function() { return /* binding */ moonbeam; },
/* harmony export */   "polkadot": function() { return /* binding */ polkadot; },
/* harmony export */   "rococo": function() { return /* binding */ rococo; },
/* harmony export */   "statemint": function() { return /* binding */ statemint; },
/* harmony export */   "subsocial": function() { return /* binding */ subsocial; },
/* harmony export */   "westend": function() { return /* binding */ westend; }
/* harmony export */ });
/* harmony import */ var _config_mod_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config/mod.js */ "./node_modules/capi/esm/config/mod.js");
// TODO: ultimately delete this file upon introduction of RPC-method-specific codegen

// @see https://github.com/paritytech/capi/issues/127
const Config_ = (_config_mod_js__WEBPACK_IMPORTED_MODULE_0__.Config);
const polkadot = new Config_(() => "wss://rpc.polkadot.io", 0);
const kusama = new Config_(() => "wss://kusama-rpc.polkadot.io", 2);
const acala = new Config_(() => "wss://acala-polkadot.api.onfinality.io/public-ws", 10);
const rococo = new Config_(() => "wss://rococo-contracts-rpc.polkadot.io", undefined);
const moonbeam = new Config_(() => "wss://wss.api.moonbeam.network", 1284);
const statemint = new Config_(() => "wss://statemint-rpc.polkadot.io", undefined);
const subsocial = new Config_(() => "wss://para.subsocial.network", 28);
const westend = new Config_(() => "wss://westend-rpc.polkadot.io", 42);
//# sourceMappingURL=configs.js.map

/***/ }),

/***/ "./node_modules/capi/esm/known/mod.js":
/*!********************************************!*\
  !*** ./node_modules/capi/esm/known/mod.js ***!
  \********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "acala": function() { return /* reexport safe */ _configs_js__WEBPACK_IMPORTED_MODULE_0__.acala; },
/* harmony export */   "kusama": function() { return /* reexport safe */ _configs_js__WEBPACK_IMPORTED_MODULE_0__.kusama; },
/* harmony export */   "moonbeam": function() { return /* reexport safe */ _configs_js__WEBPACK_IMPORTED_MODULE_0__.moonbeam; },
/* harmony export */   "polkadot": function() { return /* reexport safe */ _configs_js__WEBPACK_IMPORTED_MODULE_0__.polkadot; },
/* harmony export */   "rococo": function() { return /* reexport safe */ _configs_js__WEBPACK_IMPORTED_MODULE_0__.rococo; },
/* harmony export */   "rpc": function() { return /* reexport module object */ _rpc_js__WEBPACK_IMPORTED_MODULE_1__; },
/* harmony export */   "statemint": function() { return /* reexport safe */ _configs_js__WEBPACK_IMPORTED_MODULE_0__.statemint; },
/* harmony export */   "subsocial": function() { return /* reexport safe */ _configs_js__WEBPACK_IMPORTED_MODULE_0__.subsocial; },
/* harmony export */   "types": function() { return /* reexport module object */ _types_mod_js__WEBPACK_IMPORTED_MODULE_2__; },
/* harmony export */   "westend": function() { return /* reexport safe */ _configs_js__WEBPACK_IMPORTED_MODULE_0__.westend; }
/* harmony export */ });
/* harmony import */ var _configs_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./configs.js */ "./node_modules/capi/esm/known/configs.js");
/* harmony import */ var _rpc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rpc.js */ "./node_modules/capi/esm/known/rpc.js");
/* harmony import */ var _types_mod_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types/mod.js */ "./node_modules/capi/esm/known/types/mod.js");



//# sourceMappingURL=mod.js.map

/***/ }),

/***/ "./node_modules/capi/esm/known/rpc.js":
/*!********************************************!*\
  !*** ./node_modules/capi/esm/known/rpc.js ***!
  \********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

//# sourceMappingURL=rpc.js.map

/***/ }),

/***/ "./node_modules/capi/esm/known/types/author.js":
/*!*****************************************************!*\
  !*** ./node_modules/capi/esm/known/types/author.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

//# sourceMappingURL=author.js.map

/***/ }),

/***/ "./node_modules/capi/esm/known/types/beefy.js":
/*!****************************************************!*\
  !*** ./node_modules/capi/esm/known/types/beefy.js ***!
  \****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// TODO: clean this up!

//# sourceMappingURL=beefy.js.map

/***/ }),

/***/ "./node_modules/capi/esm/known/types/chain_head/unstable/follow.js":
/*!*************************************************************************!*\
  !*** ./node_modules/capi/esm/known/types/chain_head/unstable/follow.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

//# sourceMappingURL=follow.js.map

/***/ }),

/***/ "./node_modules/capi/esm/known/types/common.js":
/*!*****************************************************!*\
  !*** ./node_modules/capi/esm/known/types/common.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

//# sourceMappingURL=common.js.map

/***/ }),

/***/ "./node_modules/capi/esm/known/types/mod.js":
/*!**************************************************!*\
  !*** ./node_modules/capi/esm/known/types/mod.js ***!
  \**************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "beefy": function() { return /* reexport module object */ _beefy_js__WEBPACK_IMPORTED_MODULE_1__; }
/* harmony export */ });
/* harmony import */ var _author_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./author.js */ "./node_modules/capi/esm/known/types/author.js");
/* harmony import */ var _beefy_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./beefy.js */ "./node_modules/capi/esm/known/types/beefy.js");
/* harmony import */ var _chain_head_unstable_follow_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chain_head/unstable/follow.js */ "./node_modules/capi/esm/known/types/chain_head/unstable/follow.js");
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./common.js */ "./node_modules/capi/esm/known/types/common.js");
/* harmony import */ var _state_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./state.js */ "./node_modules/capi/esm/known/types/state.js");
/* harmony import */ var _system_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./system.js */ "./node_modules/capi/esm/known/types/system.js");
/* harmony import */ var _todo_organize_these_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./todo_organize_these.js */ "./node_modules/capi/esm/known/types/todo_organize_these.js");







//# sourceMappingURL=mod.js.map

/***/ }),

/***/ "./node_modules/capi/esm/known/types/state.js":
/*!****************************************************!*\
  !*** ./node_modules/capi/esm/known/types/state.js ***!
  \****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

//# sourceMappingURL=state.js.map

/***/ }),

/***/ "./node_modules/capi/esm/known/types/system.js":
/*!*****************************************************!*\
  !*** ./node_modules/capi/esm/known/types/system.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

//# sourceMappingURL=system.js.map

/***/ }),

/***/ "./node_modules/capi/esm/known/types/todo_organize_these.js":
/*!******************************************************************!*\
  !*** ./node_modules/capi/esm/known/types/todo_organize_these.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

//# sourceMappingURL=todo_organize_these.js.map

/***/ }),

/***/ "./node_modules/capi/esm/mod.js":
/*!**************************************!*\
  !*** ./node_modules/capi/esm/mod.js ***!
  \**************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$": function() { return /* reexport module object */ _deps_scale_js__WEBPACK_IMPORTED_MODULE_1__; },
/* harmony export */   "$era": function() { return /* reexport safe */ _frame_metadata_mod_js__WEBPACK_IMPORTED_MODULE_3__.$era; },
/* harmony export */   "$extrinsic": function() { return /* reexport safe */ _effect_mod_js__WEBPACK_IMPORTED_MODULE_2__.$extrinsic; },
/* harmony export */   "$key": function() { return /* reexport safe */ _effect_mod_js__WEBPACK_IMPORTED_MODULE_2__.$key; },
/* harmony export */   "$null": function() { return /* reexport safe */ _frame_metadata_mod_js__WEBPACK_IMPORTED_MODULE_3__.$null; },
/* harmony export */   "$storageKey": function() { return /* reexport safe */ _effect_mod_js__WEBPACK_IMPORTED_MODULE_2__.$storageKey; },
/* harmony export */   "Atom": function() { return /* reexport safe */ _effect_mod_js__WEBPACK_IMPORTED_MODULE_2__.Atom; },
/* harmony export */   "BitSequence": function() { return /* reexport safe */ _deps_scale_js__WEBPACK_IMPORTED_MODULE_1__.BitSequence; },
/* harmony export */   "ChainError": function() { return /* reexport safe */ _frame_metadata_mod_js__WEBPACK_IMPORTED_MODULE_3__.ChainError; },
/* harmony export */   "Config": function() { return /* reexport safe */ _config_mod_js__WEBPACK_IMPORTED_MODULE_0__.Config; },
/* harmony export */   "Effect": function() { return /* reexport safe */ _effect_mod_js__WEBPACK_IMPORTED_MODULE_2__.Effect; },
/* harmony export */   "M": function() { return /* reexport module object */ _frame_metadata_mod_js__WEBPACK_IMPORTED_MODULE_3__; },
/* harmony export */   "MetadataDecodeError": function() { return /* reexport safe */ _effect_mod_js__WEBPACK_IMPORTED_MODULE_2__.MetadataDecodeError; },
/* harmony export */   "ReadingKeysOfNonMapError": function() { return /* reexport safe */ _effect_mod_js__WEBPACK_IMPORTED_MODULE_2__.ReadingKeysOfNonMapError; },
/* harmony export */   "RpcSubscriptionError": function() { return /* reexport safe */ _effect_mod_js__WEBPACK_IMPORTED_MODULE_2__.RpcSubscriptionError; },
/* harmony export */   "all": function() { return /* reexport safe */ _effect_mod_js__WEBPACK_IMPORTED_MODULE_2__.all; },
/* harmony export */   "anon": function() { return /* reexport safe */ _effect_mod_js__WEBPACK_IMPORTED_MODULE_2__.anon; },
/* harmony export */   "atom": function() { return /* reexport safe */ _effect_mod_js__WEBPACK_IMPORTED_MODULE_2__.atom; },
/* harmony export */   "atomFactory": function() { return /* reexport safe */ _effect_mod_js__WEBPACK_IMPORTED_MODULE_2__.atomFactory; },
/* harmony export */   "codec": function() { return /* reexport safe */ _effect_mod_js__WEBPACK_IMPORTED_MODULE_2__.codec; },
/* harmony export */   "decoded": function() { return /* reexport safe */ _effect_mod_js__WEBPACK_IMPORTED_MODULE_2__.decoded; },
/* harmony export */   "deriveCodec": function() { return /* reexport safe */ _effect_mod_js__WEBPACK_IMPORTED_MODULE_2__.deriveCodec; },
/* harmony export */   "entryMetadata": function() { return /* reexport safe */ _effect_mod_js__WEBPACK_IMPORTED_MODULE_2__.entryMetadata; },
/* harmony export */   "hex": function() { return /* reexport safe */ _util_mod_js__WEBPACK_IMPORTED_MODULE_5__.hex; },
/* harmony export */   "into": function() { return /* reexport safe */ _effect_mod_js__WEBPACK_IMPORTED_MODULE_2__.into; },
/* harmony export */   "kusama": function() { return /* reexport safe */ _known_mod_js__WEBPACK_IMPORTED_MODULE_4__.kusama; },
/* harmony export */   "mapCreateWatchHandler": function() { return /* reexport safe */ _util_mod_js__WEBPACK_IMPORTED_MODULE_5__.mapCreateWatchHandler; },
/* harmony export */   "metadata": function() { return /* reexport safe */ _effect_mod_js__WEBPACK_IMPORTED_MODULE_2__.metadata; },
/* harmony export */   "moonbeam": function() { return /* reexport safe */ _known_mod_js__WEBPACK_IMPORTED_MODULE_4__.moonbeam; },
/* harmony export */   "palletMetadata": function() { return /* reexport safe */ _effect_mod_js__WEBPACK_IMPORTED_MODULE_2__.palletMetadata; },
/* harmony export */   "parseMetadata": function() { return /* reexport safe */ _effect_mod_js__WEBPACK_IMPORTED_MODULE_2__.parseMetadata; },
/* harmony export */   "polkadot": function() { return /* reexport safe */ _known_mod_js__WEBPACK_IMPORTED_MODULE_4__.polkadot; },
/* harmony export */   "readBlock": function() { return /* reexport safe */ _effect_mod_js__WEBPACK_IMPORTED_MODULE_2__.readBlock; },
/* harmony export */   "readEntry": function() { return /* reexport safe */ _effect_mod_js__WEBPACK_IMPORTED_MODULE_2__.readEntry; },
/* harmony export */   "readKeyPage": function() { return /* reexport safe */ _effect_mod_js__WEBPACK_IMPORTED_MODULE_2__.readKeyPage; },
/* harmony export */   "rococo": function() { return /* reexport safe */ _known_mod_js__WEBPACK_IMPORTED_MODULE_4__.rococo; },
/* harmony export */   "rpcCall": function() { return /* reexport safe */ _effect_mod_js__WEBPACK_IMPORTED_MODULE_2__.rpcCall; },
/* harmony export */   "rpcClient": function() { return /* reexport safe */ _effect_mod_js__WEBPACK_IMPORTED_MODULE_2__.rpcClient; },
/* harmony export */   "rpcSubscription": function() { return /* reexport safe */ _effect_mod_js__WEBPACK_IMPORTED_MODULE_2__.rpcSubscription; },
/* harmony export */   "run": function() { return /* reexport safe */ _effect_mod_js__WEBPACK_IMPORTED_MODULE_2__.run; },
/* harmony export */   "select": function() { return /* reexport safe */ _effect_mod_js__WEBPACK_IMPORTED_MODULE_2__.select; },
/* harmony export */   "sendAndWatchExtrinsic": function() { return /* reexport safe */ _effect_mod_js__WEBPACK_IMPORTED_MODULE_2__.sendAndWatchExtrinsic; },
/* harmony export */   "storageKey": function() { return /* reexport safe */ _effect_mod_js__WEBPACK_IMPORTED_MODULE_2__.storageKey; },
/* harmony export */   "watchBlocks": function() { return /* reexport safe */ _effect_mod_js__WEBPACK_IMPORTED_MODULE_2__.watchBlocks; },
/* harmony export */   "watchEntry": function() { return /* reexport safe */ _effect_mod_js__WEBPACK_IMPORTED_MODULE_2__.watchEntry; },
/* harmony export */   "watchIter": function() { return /* reexport safe */ _util_mod_js__WEBPACK_IMPORTED_MODULE_5__.watchIter; },
/* harmony export */   "westend": function() { return /* reexport safe */ _known_mod_js__WEBPACK_IMPORTED_MODULE_4__.westend; },
/* harmony export */   "wrap": function() { return /* reexport safe */ _effect_mod_js__WEBPACK_IMPORTED_MODULE_2__.wrap; }
/* harmony export */ });
/* harmony import */ var _config_mod_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config/mod.js */ "./node_modules/capi/esm/config/mod.js");
/* harmony import */ var _deps_scale_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./deps/scale.js */ "./node_modules/capi/esm/deps/scale.js");
/* harmony import */ var _effect_mod_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./effect/mod.js */ "./node_modules/capi/esm/effect/mod.js");
/* harmony import */ var _frame_metadata_mod_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./frame_metadata/mod.js */ "./node_modules/capi/esm/frame_metadata/mod.js");
/* harmony import */ var _known_mod_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./known/mod.js */ "./node_modules/capi/esm/known/mod.js");
/* harmony import */ var _util_mod_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./util/mod.js */ "./node_modules/capi/esm/util/mod.js");






 // TODO: get rid of this!

//# sourceMappingURL=mod.js.map

/***/ }),

/***/ "./node_modules/capi/esm/rpc/Base.js":
/*!*******************************************!*\
  !*** ./node_modules/capi/esm/rpc/Base.js ***!
  \*******************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Client": function() { return /* binding */ Client; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ "./node_modules/capi/node_modules/tslib/tslib.es6.js");
/* harmony import */ var _deps_std_async_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../deps/std/async.js */ "./node_modules/capi/esm/deps/std/async.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.js */ "./node_modules/capi/esm/rpc/util.js");
var _Client_nextId, _Client_listenerCbs;



class Client {
    /**
     * Construct a new RPC client
     *
     * @param hooks the error handling and message hooks with which you'd like the instance to operate
     */
    constructor(provider, hooks) {
        Object.defineProperty(this, "provider", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: provider
        });
        Object.defineProperty(this, "hooks", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: hooks
        });
        _Client_nextId.set(this, 0);
        _Client_listenerCbs.set(this, new Map());
        /**
         * Send a message to the RPC server
         *
         * @param egressMessage the message you wish to send to the RPC server
         */
        Object.defineProperty(this, "send", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (egressMessage) => {
                this.hooks?.send?.(egressMessage);
                this.provider.send(egressMessage);
            }
        });
        Object.defineProperty(this, "close", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: () => {
                this.hooks?.close?.();
                return this.provider.close();
            }
        });
        /** @returns a new ID, unique to the client instance */
        Object.defineProperty(this, "uid", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: () => {
                var _a, _b;
                return ((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__classPrivateFieldSet)(this, _Client_nextId, (_b = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__classPrivateFieldGet)(this, _Client_nextId, "f"), _a = _b++, _b), "f"), _a).toString();
            }
        });
        /**
         * Attach a listener to handle ingress messages
         *
         * @param createListenerCb the factory for the callback to be triggered upon arrival of ingress messages
         */
        Object.defineProperty(this, "listen", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (createListenerCb) => {
                const stopListening = () => {
                    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__classPrivateFieldGet)(this, _Client_listenerCbs, "f").delete(listenerCb);
                };
                const listenerCb = createListenerCb(stopListening);
                (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__classPrivateFieldGet)(this, _Client_listenerCbs, "f").set(listenerCb, true);
            }
        });
        // TODO: do we want to parameterize `RpcClient` with a `RawMessage` type?
        /** @internal */
        Object.defineProperty(this, "onMessage", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (message) => {
                const parsed = this.provider.parseIngressMessage(message);
                if (parsed instanceof Error) {
                    this.hooks?.error?.(parsed);
                }
                else {
                    this.hooks?.receive?.(parsed);
                    for (const listener of (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__classPrivateFieldGet)(this, _Client_listenerCbs, "f").keys()) {
                        listener(parsed);
                    }
                }
            }
        });
        /** @internal */
        Object.defineProperty(this, "onError", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (error) => {
                this.hooks?.error?.(error);
            }
        });
        /**
         * Call an RPC method and return a promise resolving to an ingress message with an ID that matches the egress message
         *
         * @param methodName the name of the method you wish to call
         * @param params the params with which to call the method
         * @returns an ingress message corresponding to the given method (or a message-agnostic error)
         */
        Object.defineProperty(this, "call", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (methodName, params) => {
                const init = {
                    jsonrpc: "2.0",
                    id: this.uid(),
                    method: methodName,
                    params,
                };
                const isCorrespondingRes = (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.IsCorrespondingRes)(init);
                const ingressMessagePending = (0,_deps_std_async_js__WEBPACK_IMPORTED_MODULE_0__.deferred)();
                this.listen((stopListening) => {
                    return (res) => {
                        if (isCorrespondingRes(res)) {
                            stopListening();
                            ingressMessagePending.resolve(res);
                        }
                    };
                });
                this.send(init);
                return ingressMessagePending;
            }
        });
        /**
         * Initialize an RPC subscription
         *
         * @param methodName the method name of the subscription you wish to init
         * @param params the params with which to init the subscription
         * @param createListenerCb the factory of the callback to which notifications should be supplied
         */
        Object.defineProperty(this, "subscribe", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (methodName, params, createListenerCb, cleanup = () => Promise.resolve()) => {
                const initRes = await this.call(methodName, params);
                if (initRes.error) {
                    // TODO: fix typings
                    return initRes;
                }
                const cleanupApplied = () => cleanup(initRes);
                const terminalPending = (0,_deps_std_async_js__WEBPACK_IMPORTED_MODULE_0__.deferred)();
                this.listen((stop) => {
                    const listenerCb = createListenerCb(async () => {
                        stop();
                        await cleanupApplied();
                        terminalPending.resolve();
                    });
                    return (res) => {
                        if (res.params?.subscription && res.params.subscription === initRes.result) {
                            listenerCb(res);
                        }
                        else {
                            // TODO: associate errors with subscriptions & exit
                        }
                    };
                });
                return await terminalPending;
            }
        });
    }
}
_Client_nextId = new WeakMap(), _Client_listenerCbs = new WeakMap();
//# sourceMappingURL=Base.js.map

/***/ }),

/***/ "./node_modules/capi/esm/rpc/common.js":
/*!*********************************************!*\
  !*** ./node_modules/capi/esm/rpc/common.js ***!
  \*********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ParseRawIngressMessageError": function() { return /* binding */ ParseRawIngressMessageError; }
/* harmony export */ });
/* harmony import */ var _util_mod_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/mod.js */ "./node_modules/capi/esm/util/mod.js");

class ParseRawIngressMessageError extends (0,_util_mod_js__WEBPACK_IMPORTED_MODULE_0__.ErrorCtor)("ParseRawIngressMessage") {
}
//# sourceMappingURL=common.js.map

/***/ }),

/***/ "./node_modules/capi/esm/rpc/messages.js":
/*!***********************************************!*\
  !*** ./node_modules/capi/esm/rpc/messages.js ***!
  \***********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

//# sourceMappingURL=messages.js.map

/***/ }),

/***/ "./node_modules/capi/esm/rpc/mod.js":
/*!******************************************!*\
  !*** ./node_modules/capi/esm/rpc/mod.js ***!
  \******************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Client": function() { return /* reexport safe */ _Base_js__WEBPACK_IMPORTED_MODULE_0__.Client; },
/* harmony export */   "FailedToAddChainError": function() { return /* reexport safe */ _providers_smoldot_js__WEBPACK_IMPORTED_MODULE_4__.FailedToAddChainError; },
/* harmony export */   "FailedToDisconnectError": function() { return /* reexport safe */ _providers_proxy_js__WEBPACK_IMPORTED_MODULE_3__.FailedToDisconnectError; },
/* harmony export */   "FailedToOpenConnectionError": function() { return /* reexport safe */ _providers_proxy_js__WEBPACK_IMPORTED_MODULE_3__.FailedToOpenConnectionError; },
/* harmony export */   "FailedToRemoveChainError": function() { return /* reexport safe */ _providers_smoldot_js__WEBPACK_IMPORTED_MODULE_4__.FailedToRemoveChainError; },
/* harmony export */   "FailedToStartSmoldotError": function() { return /* reexport safe */ _providers_smoldot_js__WEBPACK_IMPORTED_MODULE_4__.FailedToStartSmoldotError; },
/* harmony export */   "IsCorrespondingRes": function() { return /* reexport safe */ _util_js__WEBPACK_IMPORTED_MODULE_6__.IsCorrespondingRes; },
/* harmony export */   "ParseRawIngressMessageError": function() { return /* reexport safe */ _common_js__WEBPACK_IMPORTED_MODULE_1__.ParseRawIngressMessageError; },
/* harmony export */   "ProxyClient": function() { return /* reexport safe */ _providers_proxy_js__WEBPACK_IMPORTED_MODULE_3__.ProxyClient; },
/* harmony export */   "SmoldotClient": function() { return /* reexport safe */ _providers_smoldot_js__WEBPACK_IMPORTED_MODULE_4__.SmoldotClient; },
/* harmony export */   "SmoldotInternalError": function() { return /* reexport safe */ _providers_smoldot_js__WEBPACK_IMPORTED_MODULE_4__.SmoldotInternalError; },
/* harmony export */   "proxyClient": function() { return /* reexport safe */ _providers_proxy_js__WEBPACK_IMPORTED_MODULE_3__.proxyClient; },
/* harmony export */   "smoldotClient": function() { return /* reexport safe */ _providers_smoldot_js__WEBPACK_IMPORTED_MODULE_4__.smoldotClient; },
/* harmony export */   "stdClient": function() { return /* reexport safe */ _providers_std_js__WEBPACK_IMPORTED_MODULE_5__.stdClient; }
/* harmony export */ });
/* harmony import */ var _Base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Base.js */ "./node_modules/capi/esm/rpc/Base.js");
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./common.js */ "./node_modules/capi/esm/rpc/common.js");
/* harmony import */ var _messages_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./messages.js */ "./node_modules/capi/esm/rpc/messages.js");
/* harmony import */ var _providers_proxy_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./providers/proxy.js */ "./node_modules/capi/esm/rpc/providers/proxy.js");
/* harmony import */ var _providers_smoldot_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./providers/smoldot.js */ "./node_modules/capi/esm/rpc/providers/smoldot.js");
/* harmony import */ var _providers_std_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./providers/std.js */ "./node_modules/capi/esm/rpc/providers/std.js");
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./util.js */ "./node_modules/capi/esm/rpc/util.js");







//# sourceMappingURL=mod.js.map

/***/ }),

/***/ "./node_modules/capi/esm/rpc/providers/proxy.js":
/*!******************************************************!*\
  !*** ./node_modules/capi/esm/rpc/providers/proxy.js ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FailedToDisconnectError": function() { return /* binding */ FailedToDisconnectError; },
/* harmony export */   "FailedToOpenConnectionError": function() { return /* binding */ FailedToOpenConnectionError; },
/* harmony export */   "ProxyClient": function() { return /* binding */ ProxyClient; },
/* harmony export */   "proxyClient": function() { return /* binding */ proxyClient; }
/* harmony export */ });
/* harmony import */ var _deps_std_async_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../deps/std/async.js */ "./node_modules/capi/esm/deps/std/async.js");
/* harmony import */ var _util_mod_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/mod.js */ "./node_modules/capi/esm/util/mod.js");
/* harmony import */ var _Base_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Base.js */ "./node_modules/capi/esm/rpc/Base.js");
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common.js */ "./node_modules/capi/esm/rpc/common.js");




async function proxyClient(config, hooks) {
    const ws = new WebSocket(await config.discoveryValue);
    const client = new ProxyClient(ws, hooks);
    ws.addEventListener("error", client.onError);
    ws.addEventListener("message", client.onMessage);
    const pending = (0,_deps_std_async_js__WEBPACK_IMPORTED_MODULE_0__.deferred)();
    if (ws.readyState === WebSocket.CONNECTING) {
        const onOpenError = (e) => {
            console.log({ log: e });
            clearListeners();
            pending.resolve(new FailedToOpenConnectionError());
        };
        const onOpen = () => {
            clearListeners();
            pending.resolve(client);
        };
        const clearListeners = () => {
            ws.removeEventListener("error", onOpenError);
            ws.removeEventListener("open", onOpen);
        };
        ws.addEventListener("error", onOpenError);
        ws.addEventListener("open", onOpen);
    }
    else {
        pending.resolve(client);
    }
    return await pending;
}
class ProxyClient extends _Base_js__WEBPACK_IMPORTED_MODULE_2__.Client {
    constructor(ws, hooks) {
        super({
            parseIngressMessage: (e) => {
                if (typeof e !== "object"
                    || e === null
                    || !("data" in e)
                    || typeof e.data !== "string") {
                    return new _common_js__WEBPACK_IMPORTED_MODULE_3__.ParseRawIngressMessageError();
                }
                return JSON.parse(e.data);
            },
            send: (egressMessage) => {
                ws.send(JSON.stringify(egressMessage));
            },
            close: async () => {
                const pending = (0,_deps_std_async_js__WEBPACK_IMPORTED_MODULE_0__.deferred)();
                const onClose = () => {
                    ws.removeEventListener("error", this.onError);
                    ws.removeEventListener("message", this.onMessage);
                    ws.removeEventListener("close", onClose);
                    pending.resolve();
                };
                ws.addEventListener("close", onClose);
                ws.close();
                try {
                    await (0,_deps_std_async_js__WEBPACK_IMPORTED_MODULE_0__.deadline)(pending, 250);
                }
                catch (_e) {
                    pending.resolve(new FailedToDisconnectError());
                }
                return pending;
            },
        }, hooks);
    }
}
class FailedToOpenConnectionError extends (0,_util_mod_js__WEBPACK_IMPORTED_MODULE_1__.ErrorCtor)("FailedToOpenConnection") {
}
class FailedToDisconnectError extends (0,_util_mod_js__WEBPACK_IMPORTED_MODULE_1__.ErrorCtor)("FailedToDisconnect") {
}
//# sourceMappingURL=proxy.js.map

/***/ }),

/***/ "./node_modules/capi/esm/rpc/providers/smoldot.js":
/*!********************************************************!*\
  !*** ./node_modules/capi/esm/rpc/providers/smoldot.js ***!
  \********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FailedToAddChainError": function() { return /* binding */ FailedToAddChainError; },
/* harmony export */   "FailedToRemoveChainError": function() { return /* binding */ FailedToRemoveChainError; },
/* harmony export */   "FailedToStartSmoldotError": function() { return /* binding */ FailedToStartSmoldotError; },
/* harmony export */   "SmoldotClient": function() { return /* binding */ SmoldotClient; },
/* harmony export */   "SmoldotInternalError": function() { return /* binding */ SmoldotInternalError; },
/* harmony export */   "smoldotClient": function() { return /* binding */ smoldotClient; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ "./node_modules/capi/node_modules/tslib/tslib.es6.js");
/* harmony import */ var _util_mod_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/mod.js */ "./node_modules/capi/esm/util/mod.js");
/* harmony import */ var _Base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Base.js */ "./node_modules/capi/esm/rpc/Base.js");
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common.js */ "./node_modules/capi/esm/rpc/common.js");
var _SmoldotClient_chain;




async function smoldotClient(config, hooks) {
    const smoldotInstance = await ensureInstance();
    if (smoldotInstance instanceof Error) {
        return smoldotInstance;
    }
    const onMessageContainer = {};
    try {
        // TODO: wire up `onError`
        const chain = await smoldotInstance.addChain({
            chainSpec: await config.discoveryValue,
            jsonRpcCallback: (response) => {
                onMessageContainer.onMessage?.(response);
            },
        });
        return new SmoldotClient(onMessageContainer, chain.remove, hooks);
    }
    catch (e) {
        return new FailedToAddChainError(e);
    }
}
class SmoldotClient extends _Base_js__WEBPACK_IMPORTED_MODULE_1__.Client {
    constructor(onMessageContainer, remove, hooks) {
        super({
            parseIngressMessage: (rawIngressMessage) => {
                try {
                    return JSON.parse(rawIngressMessage);
                }
                catch (_e) {
                    return new _common_js__WEBPACK_IMPORTED_MODULE_2__.ParseRawIngressMessageError();
                }
            },
            send: (egressMessage) => {
                (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__classPrivateFieldGet)(this, _SmoldotClient_chain, "f")?.sendJsonRpc(JSON.stringify(egressMessage));
            },
            close: () => {
                return Promise.resolve((() => {
                    try {
                        this.remove();
                        return;
                    }
                    catch (e) {
                        return new FailedToRemoveChainError(e);
                    }
                })());
            },
        }, hooks);
        Object.defineProperty(this, "remove", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: remove
        });
        _SmoldotClient_chain.set(this, void 0);
        onMessageContainer.onMessage = this.onMessage;
    }
}
_SmoldotClient_chain = new WeakMap();
const _state = {};
async function ensureInstance() {
    if (!_state.smoldotInstance) {
        try {
            const smoldot = await __webpack_require__.e(/*! import() */ "vendors-node_modules_capi_esm_deps_smoldot_js").then(__webpack_require__.bind(__webpack_require__, /*! ../../deps/smoldot.js */ "./node_modules/capi/esm/deps/smoldot.js"));
            _state.smoldotInstance = smoldot.start();
        }
        catch (_e) {
            return new FailedToStartSmoldotError();
        }
    }
    return _state.smoldotInstance;
}
class FailedToStartSmoldotError extends (0,_util_mod_js__WEBPACK_IMPORTED_MODULE_0__.ErrorCtor)("FailedToStartSmoldot") {
}
class FailedToAddChainError extends (0,_util_mod_js__WEBPACK_IMPORTED_MODULE_0__.ErrorCtor)("FailedToAddChain") {
    constructor(inner) {
        super();
        Object.defineProperty(this, "inner", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: inner
        });
    }
}
class SmoldotInternalError extends (0,_util_mod_js__WEBPACK_IMPORTED_MODULE_0__.ErrorCtor)("SmoldotInternal") {
}
// TODO: specify narrow `AlreadyDestroyedError` & `CrashError` from Smoldot
class FailedToRemoveChainError extends (0,_util_mod_js__WEBPACK_IMPORTED_MODULE_0__.ErrorCtor)("FailedToRemoveChain") {
    constructor(inner) {
        super();
        Object.defineProperty(this, "inner", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: inner
        });
    }
}
//# sourceMappingURL=smoldot.js.map

/***/ }),

/***/ "./node_modules/capi/esm/rpc/providers/std.js":
/*!****************************************************!*\
  !*** ./node_modules/capi/esm/rpc/providers/std.js ***!
  \****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "stdClient": function() { return /* binding */ stdClient; }
/* harmony export */ });
/* harmony import */ var _deps_std_testing_asserts_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../deps/std/testing/asserts.js */ "./node_modules/capi/esm/deps/std/testing/asserts.js");
/* harmony import */ var _proxy_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./proxy.js */ "./node_modules/capi/esm/rpc/providers/proxy.js");
/* harmony import */ var _smoldot_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./smoldot.js */ "./node_modules/capi/esm/rpc/providers/smoldot.js");



async function stdClient(config) {
    const discoveryValue = await config.discoveryValue;
    if (typeof discoveryValue === "string") {
        // TODO: improve check / move selection elsewhere
        if (discoveryValue.startsWith("ws")) {
            return (0,_proxy_js__WEBPACK_IMPORTED_MODULE_1__.proxyClient)(config);
        }
        else {
            return (0,_smoldot_js__WEBPACK_IMPORTED_MODULE_2__.smoldotClient)(config);
        }
    }
    return (0,_deps_std_testing_asserts_js__WEBPACK_IMPORTED_MODULE_0__.unimplemented)();
}
//# sourceMappingURL=std.js.map

/***/ }),

/***/ "./node_modules/capi/esm/rpc/util.js":
/*!*******************************************!*\
  !*** ./node_modules/capi/esm/rpc/util.js ***!
  \*******************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IsCorrespondingRes": function() { return /* binding */ IsCorrespondingRes; }
/* harmony export */ });
function IsCorrespondingRes(init) {
    return (inQuestion) => {
        return inQuestion?.id === init.id;
    };
}
//# sourceMappingURL=util.js.map

/***/ }),

/***/ "./node_modules/capi/esm/ss58/mod.js":
/*!*******************************************!*\
  !*** ./node_modules/capi/esm/ss58/mod.js ***!
  \*******************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InvalidAddressChecksumError": function() { return /* binding */ InvalidAddressChecksumError; },
/* harmony export */   "InvalidAddressLengthError": function() { return /* binding */ InvalidAddressLengthError; },
/* harmony export */   "InvalidNetworkPrefixError": function() { return /* binding */ InvalidNetworkPrefixError; },
/* harmony export */   "InvalidPublicKeyLengthError": function() { return /* binding */ InvalidPublicKeyLengthError; },
/* harmony export */   "decode": function() { return /* binding */ decode; },
/* harmony export */   "decodeRaw": function() { return /* binding */ decodeRaw; },
/* harmony export */   "encode": function() { return /* binding */ encode; },
/* harmony export */   "encodeRaw": function() { return /* binding */ encodeRaw; }
/* harmony export */ });
/* harmony import */ var _deps_blake2b_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../deps/blake2b.js */ "./node_modules/capi/esm/deps/blake2b.js");
/* harmony import */ var _deps_std_encoding_base58_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../deps/std/encoding/base58.js */ "./node_modules/capi/esm/deps/std/encoding/base58.js");
/* harmony import */ var _util_mod_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/mod.js */ "./node_modules/capi/esm/util/mod.js");



// SS58PRE string (0x53533538505245 hex) encoded as Uint8Array
const SS58PRE = Uint8Array.of(83, 83, 53, 56, 80, 82, 69);
const CHECKSUM_LENGTH = 2;
const VALID_ADDRESS_LENGTHS = {
    35: true,
    36: true,
    37: true,
    38: true,
};
const VALID_PUBLIC_KEY_LENGTHS = {
    32: true,
    33: true,
};
class InvalidPublicKeyLengthError extends _util_mod_js__WEBPACK_IMPORTED_MODULE_2__.ErrorCtor("InvalidPublicKeyLengthError") {
}
class InvalidNetworkPrefixError extends _util_mod_js__WEBPACK_IMPORTED_MODULE_2__.ErrorCtor("InvalidNetworkPrefixError") {
}
class InvalidAddressLengthError extends _util_mod_js__WEBPACK_IMPORTED_MODULE_2__.ErrorCtor("InvalidAddressError") {
}
class InvalidAddressChecksumError extends _util_mod_js__WEBPACK_IMPORTED_MODULE_2__.ErrorCtor("InvalidAddressChecksumError") {
}
const encode = (prefix, pubKey, validNetworkPrefixes) => _deps_std_encoding_base58_js__WEBPACK_IMPORTED_MODULE_1__.encode(encodeRaw(prefix, pubKey, validNetworkPrefixes));
const encodeRaw = (prefix, pubKey, validNetworkPrefixes) => {
    const isValidPublicKeyLength = !!VALID_PUBLIC_KEY_LENGTHS[pubKey.length];
    if (!isValidPublicKeyLength) {
        throw new InvalidPublicKeyLengthError();
    }
    const isValidNetworkPrefix = !validNetworkPrefixes || validNetworkPrefixes.includes(prefix);
    if (!isValidNetworkPrefix) {
        throw new InvalidNetworkPrefixError();
    }
    const prefixBytes = prefix < 64
        ? Uint8Array.of(prefix)
        : Uint8Array.of(((prefix & 252) >> 2) | 64, (prefix >> 8) | ((prefix & 3) << 6));
    const hasher = _deps_blake2b_js__WEBPACK_IMPORTED_MODULE_0__.blake2b.create({
        dkLen: 512 / 8,
    });
    hasher.update(SS58PRE);
    hasher.update(prefixBytes);
    hasher.update(pubKey);
    const digest = hasher.digest();
    const checksum = digest.subarray(0, CHECKSUM_LENGTH);
    const address = new Uint8Array(prefixBytes.length + pubKey.length + CHECKSUM_LENGTH);
    address.set(prefixBytes, 0);
    address.set(pubKey, prefixBytes.length);
    address.set(checksum, prefixBytes.length + pubKey.length);
    return address;
};
const decode = (address) => decodeRaw(_deps_std_encoding_base58_js__WEBPACK_IMPORTED_MODULE_1__.decode(address));
const decodeRaw = (address) => {
    const isValidAddressLength = !!VALID_ADDRESS_LENGTHS[address.length];
    if (!isValidAddressLength) {
        throw new InvalidAddressLengthError();
    }
    const prefixLength = address[0] & 64 ? 2 : 1;
    const prefix = prefixLength === 1
        ? address[0]
        : ((address[0] & 63) << 2) | (address[1] >> 6)
            | ((address[1] & 63) << 8);
    const hasher = _deps_blake2b_js__WEBPACK_IMPORTED_MODULE_0__.blake2b.create({
        dkLen: 512 / 8,
    });
    hasher.update(SS58PRE);
    hasher.update(address.subarray(0, address.length - CHECKSUM_LENGTH));
    const digest = hasher.digest();
    const checksum = address.subarray(address.length - CHECKSUM_LENGTH);
    if (digest[0] !== checksum[0] || digest[1] !== checksum[1]) {
        throw new InvalidAddressChecksumError();
    }
    const pubKey = address.subarray(prefixLength, address.length - CHECKSUM_LENGTH);
    return [prefix, pubKey];
};
//# sourceMappingURL=mod.js.map

/***/ }),

/***/ "./node_modules/capi/esm/util/branded.js":
/*!***********************************************!*\
  !*** ./node_modules/capi/esm/util/branded.js ***!
  \***********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AccountIdStringBrand": function() { return /* binding */ AccountIdStringBrand; },
/* harmony export */   "H256StringBrand": function() { return /* binding */ H256StringBrand; },
/* harmony export */   "HashHexStringBrand": function() { return /* binding */ HashHexStringBrand; },
/* harmony export */   "HexStringBrand": function() { return /* binding */ HexStringBrand; },
/* harmony export */   "HexU64StringBrand": function() { return /* binding */ HexU64StringBrand; },
/* harmony export */   "MultiAddressStringBrand": function() { return /* binding */ MultiAddressStringBrand; },
/* harmony export */   "SubscriptionIdStringBrand": function() { return /* binding */ SubscriptionIdStringBrand; }
/* harmony export */ });
const HexStringBrand = Symbol();
const HashHexStringBrand = Symbol();
const AccountIdStringBrand = Symbol();
const SubscriptionIdStringBrand = Symbol();
const MultiAddressStringBrand = Symbol();
const HexU64StringBrand = Symbol();
const H256StringBrand = Symbol();
//# sourceMappingURL=branded.js.map

/***/ }),

/***/ "./node_modules/capi/esm/util/error.js":
/*!*********************************************!*\
  !*** ./node_modules/capi/esm/util/error.js ***!
  \*********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ErrorCtor": function() { return /* binding */ ErrorCtor; },
/* harmony export */   "throwIfError": function() { return /* binding */ throwIfError; }
/* harmony export */ });
/** Produces an error whose name is represented within the type system */
function ErrorCtor(name) {
    return class extends Error {
        constructor() {
            super(...arguments);
            Object.defineProperty(this, "name", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: name
            });
        }
    };
}
function throwIfError(value) {
    if (value instanceof Error) {
        throw value;
    }
    return value;
}
//# sourceMappingURL=error.js.map

/***/ }),

/***/ "./node_modules/capi/esm/util/hex.js":
/*!*******************************************!*\
  !*** ./node_modules/capi/esm/util/hex.js ***!
  \*******************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "decode": function() { return /* binding */ decode; },
/* harmony export */   "decodeBuf": function() { return /* reexport safe */ _deps_std_encoding_hex_js__WEBPACK_IMPORTED_MODULE_0__.decode; },
/* harmony export */   "encode": function() { return /* binding */ encode; },
/* harmony export */   "encodeBuf": function() { return /* reexport safe */ _deps_std_encoding_hex_js__WEBPACK_IMPORTED_MODULE_0__.encode; },
/* harmony export */   "encodePrefixed": function() { return /* binding */ encodePrefixed; }
/* harmony export */ });
/* harmony import */ var _deps_std_encoding_hex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../deps/std/encoding/hex.js */ "./node_modules/capi/esm/deps/std/encoding/hex.js");

function decode(hex) {
    if (hex.startsWith("0x"))
        hex = hex.slice(2);
    if (hex.length % 2 === 1)
        hex = "0" + hex;
    const array = new Uint8Array(hex.length / 2);
    for (let i = 0; i < hex.length; i++) {
        array[i] = parseInt(hex.slice(i * 2, i * 2 + 2), 16);
    }
    return array;
}
function encode(bytes) {
    let str = "";
    for (let i = 0; i < bytes.length; i++) {
        str += bytes[i].toString(16).padStart(2, "0");
    }
    return str;
}
function encodePrefixed(bytes) {
    return "0x" + encode(bytes);
}
//# sourceMappingURL=hex.js.map

/***/ }),

/***/ "./node_modules/capi/esm/util/mod.js":
/*!*******************************************!*\
  !*** ./node_modules/capi/esm/util/mod.js ***!
  \*******************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AccountIdStringBrand": function() { return /* reexport safe */ _branded_js__WEBPACK_IMPORTED_MODULE_0__.AccountIdStringBrand; },
/* harmony export */   "ErrorCtor": function() { return /* reexport safe */ _error_js__WEBPACK_IMPORTED_MODULE_1__.ErrorCtor; },
/* harmony export */   "H256StringBrand": function() { return /* reexport safe */ _branded_js__WEBPACK_IMPORTED_MODULE_0__.H256StringBrand; },
/* harmony export */   "HashHexStringBrand": function() { return /* reexport safe */ _branded_js__WEBPACK_IMPORTED_MODULE_0__.HashHexStringBrand; },
/* harmony export */   "HexStringBrand": function() { return /* reexport safe */ _branded_js__WEBPACK_IMPORTED_MODULE_0__.HexStringBrand; },
/* harmony export */   "HexU64StringBrand": function() { return /* reexport safe */ _branded_js__WEBPACK_IMPORTED_MODULE_0__.HexU64StringBrand; },
/* harmony export */   "MultiAddressStringBrand": function() { return /* reexport safe */ _branded_js__WEBPACK_IMPORTED_MODULE_0__.MultiAddressStringBrand; },
/* harmony export */   "SubscriptionIdStringBrand": function() { return /* reexport safe */ _branded_js__WEBPACK_IMPORTED_MODULE_0__.SubscriptionIdStringBrand; },
/* harmony export */   "hex": function() { return /* reexport module object */ _hex_js__WEBPACK_IMPORTED_MODULE_2__; },
/* harmony export */   "mapCreateWatchHandler": function() { return /* reexport safe */ _watch_js__WEBPACK_IMPORTED_MODULE_4__.mapCreateWatchHandler; },
/* harmony export */   "throwIfError": function() { return /* reexport safe */ _error_js__WEBPACK_IMPORTED_MODULE_1__.throwIfError; },
/* harmony export */   "watchIter": function() { return /* reexport safe */ _watch_js__WEBPACK_IMPORTED_MODULE_4__.watchIter; }
/* harmony export */ });
/* harmony import */ var _branded_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./branded.js */ "./node_modules/capi/esm/util/branded.js");
/* harmony import */ var _error_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./error.js */ "./node_modules/capi/esm/util/error.js");
/* harmony import */ var _hex_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./hex.js */ "./node_modules/capi/esm/util/hex.js");
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./types.js */ "./node_modules/capi/esm/util/types.js");
/* harmony import */ var _watch_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./watch.js */ "./node_modules/capi/esm/util/watch.js");





//# sourceMappingURL=mod.js.map

/***/ }),

/***/ "./node_modules/capi/esm/util/types.js":
/*!*********************************************!*\
  !*** ./node_modules/capi/esm/util/types.js ***!
  \*********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

//# sourceMappingURL=types.js.map

/***/ }),

/***/ "./node_modules/capi/esm/util/watch.js":
/*!*********************************************!*\
  !*** ./node_modules/capi/esm/util/watch.js ***!
  \*********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mapCreateWatchHandler": function() { return /* binding */ mapCreateWatchHandler; },
/* harmony export */   "watchIter": function() { return /* binding */ watchIter; }
/* harmony export */ });
/* harmony import */ var _deps_std_async_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../deps/std/async.js */ "./node_modules/capi/esm/deps/std/async.js");

function mapCreateWatchHandler(createWatchHandler, map) {
    return (close) => {
        const listenerCb = createWatchHandler(close);
        return (message) => {
            listenerCb(map(message));
        };
    };
}
function watchIter() {
    const queue = [];
    const cbs = [];
    const onDoneContainer = {};
    const createWatchHandler = (stop) => {
        onDoneContainer.onDone = stop;
        return (value) => {
            const cb = cbs.shift();
            if (cb) {
                cb({
                    done: false,
                    value,
                });
            }
            else {
                queue.push(value);
            }
        };
    };
    const iter = {
        async next() {
            if (queue.length) {
                return {
                    done: false,
                    value: queue.shift(),
                };
            }
            const pending = (0,_deps_std_async_js__WEBPACK_IMPORTED_MODULE_0__.deferred)();
            cbs.push(pending.resolve);
            return await pending;
        },
        return() {
            onDoneContainer?.onDone?.();
            return Promise.resolve({
                done: true,
                value: undefined,
            });
        },
        [Symbol.asyncIterator]() {
            return this;
        },
    };
    return Object.assign(createWatchHandler, iter);
}
//# sourceMappingURL=watch.js.map

/***/ }),

/***/ "./node_modules/parity-scale-codec/esm/array/codec.js":
/*!************************************************************!*\
  !*** ./node_modules/parity-scale-codec/esm/array/codec.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "array": function() { return /* binding */ array; },
/* harmony export */   "sizedArray": function() { return /* binding */ sizedArray; },
/* harmony export */   "sizedUint8Array": function() { return /* binding */ sizedUint8Array; },
/* harmony export */   "sizedUint8array": function() { return /* binding */ sizedUint8array; },
/* harmony export */   "uint8Array": function() { return /* binding */ uint8Array; },
/* harmony export */   "uint8array": function() { return /* binding */ uint8array; }
/* harmony export */ });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common.js */ "./node_modules/parity-scale-codec/esm/common.js");
/* harmony import */ var _compact_codec_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../compact/codec.js */ "./node_modules/parity-scale-codec/esm/compact/codec.js");


function sizedArray($el, length) {
    return (0,_common_js__WEBPACK_IMPORTED_MODULE_0__.createCodec)({
        name: "sizedArray",
        _metadata: [sizedArray, $el, length],
        _staticSize: $el._staticSize * length,
        _encode(buffer, value) {
            for (let i = 0; i < value.length; i++) {
                $el._encode(buffer, value[i]);
            }
        },
        _decode(buffer) {
            const value = Array(length);
            for (let i = 0; i < value.length; i++) {
                value[i] = $el._decode(buffer);
            }
            return value;
        },
    });
}
function array($el) {
    return (0,_common_js__WEBPACK_IMPORTED_MODULE_0__.createCodec)({
        name: "array",
        _metadata: [array, $el],
        _staticSize: _compact_codec_js__WEBPACK_IMPORTED_MODULE_1__.compactU32._staticSize,
        _encode(buffer, value) {
            _compact_codec_js__WEBPACK_IMPORTED_MODULE_1__.compactU32._encode(buffer, value.length);
            if (value.length) {
                buffer.pushAlloc(value.length * $el._staticSize);
                for (let i = 0; i < value.length; i++) {
                    $el._encode(buffer, value[i]);
                }
                buffer.popAlloc();
            }
        },
        _decode(buffer) {
            const length = _compact_codec_js__WEBPACK_IMPORTED_MODULE_1__.compactU32._decode(buffer);
            const value = Array(length);
            for (let i = 0; i < value.length; i++) {
                value[i] = $el._decode(buffer);
            }
            return value;
        },
    });
}
const uint8Array = (0,_common_js__WEBPACK_IMPORTED_MODULE_0__.createCodec)({
    name: "uint8Array",
    _metadata: null,
    _staticSize: _compact_codec_js__WEBPACK_IMPORTED_MODULE_1__.compactU32._staticSize,
    _encode(buffer, value) {
        _compact_codec_js__WEBPACK_IMPORTED_MODULE_1__.compactU32._encode(buffer, value.length);
        buffer.insertArray(value); // the contents of this will eventually be cloned by buffer
    },
    _decode(buffer) {
        const length = _compact_codec_js__WEBPACK_IMPORTED_MODULE_1__.compactU32._decode(buffer);
        const value = buffer.array.subarray(buffer.index, buffer.index + length);
        buffer.index += length;
        return value;
    },
});
function sizedUint8Array(length) {
    return (0,_common_js__WEBPACK_IMPORTED_MODULE_0__.createCodec)({
        name: "sizedUint8Array",
        _metadata: [sizedUint8Array, length],
        // We could set `_staticSize` to `length`, but in this case it will usually
        // more efficient to insert the array dynamically, rather than manually copy
        // the bytes.
        _staticSize: 0,
        _encode(buffer, value) {
            if (value.length !== length) {
                throw new _common_js__WEBPACK_IMPORTED_MODULE_0__.EncodeError(this, value, `Expected an array of size ${length}, got ${value.length}`);
            }
            buffer.insertArray(value); // the contents of this will eventually be cloned by buffer
        },
        _decode(buffer) {
            return buffer.array.subarray(buffer.index, buffer.index += length);
        },
    });
}
/** @deprecated Use `$.uint8Array` instead */
const uint8array = uint8Array;
/** @deprecated Use `$.sizedUint8Array` instead */
const sizedUint8array = sizedUint8Array;
//# sourceMappingURL=codec.js.map

/***/ }),

/***/ "./node_modules/parity-scale-codec/esm/bitSequence/codec.js":
/*!******************************************************************!*\
  !*** ./node_modules/parity-scale-codec/esm/bitSequence/codec.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BitSequence": function() { return /* binding */ BitSequence; },
/* harmony export */   "bitSequence": function() { return /* binding */ bitSequence; }
/* harmony export */ });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common.js */ "./node_modules/parity-scale-codec/esm/common.js");
/* harmony import */ var _compact_codec_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../compact/codec.js */ "./node_modules/parity-scale-codec/esm/compact/codec.js");


class BitSequence {
    constructor(length = 0, data) {
        Object.defineProperty(this, "length", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: length
        });
        Object.defineProperty(this, "data", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        const byteLength = Math.ceil(length / 8);
        data ??= new Uint8Array(byteLength);
        if (data.length !== byteLength) {
            throw new Error("Incorrectly sized Uint8Array passed to BitSequence constructor");
        }
        this.data = data;
    }
    static from(array) {
        const sequence = new BitSequence(array.length);
        for (let i = 0; i < array.length; i++) {
            sequence._setBit(i, array[i]);
        }
        return sequence;
    }
    get byteLength() {
        return this.data.length;
    }
    _hasBit(index) {
        return 0 <= index && index < this.length && index === Math.floor(index);
    }
    _getBit(index) {
        if (!this._hasBit(index))
            return undefined;
        const i = Math.floor(index / 8);
        const j = 7 - index % 8;
        return !!(this.data[i] & (1 << j));
    }
    _setBit(index, bit) {
        if (!this._hasBit(index))
            return false;
        const i = Math.floor(index / 8);
        const j = 7 - index % 8;
        this.data[i] = this.data[i] & ~(1 << j) | (+!!bit << j);
        return true;
    }
}
Object.setPrototypeOf(BitSequence.prototype, new Proxy(Object.prototype, {
    get: (target, k, receiver) => {
        const i = typeof k === "string" ? +k : NaN;
        if (isNaN(i))
            return Reflect.get(target, k, receiver);
        return receiver._getBit(i);
    },
    set: (target, k, v, receiver) => {
        const i = typeof k === "string" ? +k : NaN;
        if (isNaN(i))
            return Reflect.set(target, k, v, receiver);
        return receiver._setBit(i, v);
    },
}));
const bitSequence = (0,_common_js__WEBPACK_IMPORTED_MODULE_0__.createCodec)({
    name: "bitSequence",
    _metadata: null,
    _staticSize: _compact_codec_js__WEBPACK_IMPORTED_MODULE_1__.compactU32._staticSize,
    _encode(buffer, value) {
        _compact_codec_js__WEBPACK_IMPORTED_MODULE_1__.compactU32._encode(buffer, value.length);
        buffer.insertArray(value.data);
    },
    _decode(buffer) {
        const length = _compact_codec_js__WEBPACK_IMPORTED_MODULE_1__.compactU32._decode(buffer);
        const byteLength = Math.ceil(length / 8);
        return new BitSequence(length, buffer.array.subarray(buffer.index, buffer.index += byteLength));
    },
});
//# sourceMappingURL=codec.js.map

/***/ }),

/***/ "./node_modules/parity-scale-codec/esm/bool/codec.js":
/*!***********************************************************!*\
  !*** ./node_modules/parity-scale-codec/esm/bool/codec.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bool": function() { return /* binding */ bool; }
/* harmony export */ });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common.js */ "./node_modules/parity-scale-codec/esm/common.js");

const bool = (0,_common_js__WEBPACK_IMPORTED_MODULE_0__.createCodec)({
    name: "boolean",
    _metadata: null,
    _staticSize: 1,
    _encode(buffer, value) {
        buffer.array[buffer.index++] = +value;
    },
    _decode(buffer) {
        return !!buffer.array[buffer.index++];
    },
});
//# sourceMappingURL=codec.js.map

/***/ }),

/***/ "./node_modules/parity-scale-codec/esm/common.js":
/*!*******************************************************!*\
  !*** ./node_modules/parity-scale-codec/esm/common.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CodecError": function() { return /* binding */ CodecError; },
/* harmony export */   "CodecVisitor": function() { return /* binding */ CodecVisitor; },
/* harmony export */   "Context": function() { return /* binding */ Context; },
/* harmony export */   "DecodeBuffer": function() { return /* binding */ DecodeBuffer; },
/* harmony export */   "DecodeError": function() { return /* binding */ DecodeError; },
/* harmony export */   "EncodeBuffer": function() { return /* binding */ EncodeBuffer; },
/* harmony export */   "EncodeError": function() { return /* binding */ EncodeError; },
/* harmony export */   "createAsyncCodec": function() { return /* binding */ createAsyncCodec; },
/* harmony export */   "createCodec": function() { return /* binding */ createCodec; },
/* harmony export */   "withMetadata": function() { return /* binding */ withMetadata; }
/* harmony export */ });
var __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _CodecVisitor_fallback, _CodecVisitor_visitors;
function createCodec(_codec) {
    const { _staticSize, _encode, _decode, _metadata, name } = _codec;
    const codec = {
        name,
        _staticSize,
        _encode,
        _decode,
        ..._metadata && { _metadata },
        encode(value) {
            const buf = new EncodeBuffer(_staticSize);
            _encode.call(codec, buf, value);
            if (buf.asyncCount)
                throw new EncodeError(codec, value, "Attempted to synchronously encode an async codec");
            return buf.finish();
        },
        async encodeAsync(value) {
            const buf = new EncodeBuffer(_staticSize);
            _encode.call(codec, buf, value);
            return buf.finishAsync();
        },
        decode(array) {
            const buf = new DecodeBuffer(array);
            return _decode.call(codec, buf);
        },
    };
    return codec;
}
function createAsyncCodec(_codec) {
    const { _staticSize, _encodeAsync, _decode, _metadata, name } = _codec;
    const codec = {
        name,
        _staticSize,
        _encode(buffer, value) {
            buffer.writeAsync(_staticSize, (buf) => _encodeAsync(buf, value));
        },
        _decode,
        ..._metadata && { _metadata },
        encode(value) {
            throw new EncodeError(codec, value, "Attempted to synchronously encode an async codec");
        },
        async encodeAsync(value) {
            const buf = new EncodeBuffer(_staticSize);
            await _encodeAsync.call(codec, buf, value);
            return buf.finishAsync();
        },
        decode(array) {
            const buf = new DecodeBuffer(array);
            return _decode.call(codec, buf);
        },
    };
    return codec;
}
function withMetadata(codec, metadata) {
    return { ...codec, _metadata: metadata };
}
class EncodeBuffer {
    /** Creates a new EncodeBuffer with a specified initial size/buffer */
    constructor(init, context = new Context()) {
        Object.defineProperty(this, "context", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: context
        });
        Object.defineProperty(this, "finishedArrays", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(this, "finishedSize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "queuedArrays", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(this, "array", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "view", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "index", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "asyncCount", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "asyncPromise", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Promise.resolve()
        });
        Object.defineProperty(this, "asyncResolve", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: () => { }
        });
        this._setArray(typeof init === "number" ? new Uint8Array(init) : init);
    }
    /**
     * Inserts a Uint8Array at the current position in the buffer.
     * This does not consume any of the pre-allocated space.
     */
    insertArray(buffer) {
        this._commitWritten();
        this.finishedArrays.push(buffer);
        this.finishedSize += buffer.length;
        if (this.index) {
            this._setArray(this.array.subarray(this.index));
        }
    }
    /**
     * Allocates more space in the EncodeBuffer.
     * `.popAlloc()` must be called after this space is used.
     */
    pushAlloc(size) {
        this._commitWritten();
        this.queuedArrays.push(this.array.subarray(this.index));
        this._setArray(new Uint8Array(size));
    }
    /**
     * Finishes the current array and resumes writing on the previous array.
     * Must be called after `.pushAlloc()`.
     */
    popAlloc() {
        this._commitWritten();
        this._setArray(this.queuedArrays.pop());
    }
    /**
     * Creates a sub-buffer that can be written into asynchronously.
     * The buffer passed to the callback should not be used after the returned promise resolves.
     */
    writeAsync(length, fn) {
        this.waitFor(async () => {
            const cursor = this.createCursor(length);
            await fn(cursor);
            cursor.close();
        });
    }
    /**
     * Creates a sub-buffer that can be written into later to insert data into the middle of the array.
     * `.close()` must be called after the cursor is done being written into.
     * The cursor should not be used after `.close()` is called.
     * If the cursor will be written into asynchronously, the buffer must be held open with `.waitFor()`.
     */
    createCursor(length) {
        const cursor = Object.assign(new EncodeBuffer(this.stealAlloc(length), this.context), {
            close: () => {
                this.waitForBuffer(cursor, () => {
                    cursor._commitWritten();
                    this.finishedSize += cursor.finishedSize;
                });
            },
        });
        this.finishedArrays.push(cursor);
        return cursor;
    }
    /**
     * Immediately invokes the callback, and holds the buffer open until the
     * returned promise resolves.
     */
    waitFor(fn) {
        if (!this.asyncCount) {
            this.asyncPromise = new Promise((resolve) => this.asyncResolve = resolve);
        }
        this.asyncCount++;
        fn()
            .then(() => {
            this.asyncCount--;
            if (!this.asyncCount) {
                this.asyncResolve();
            }
        })
            .catch((e) => {
            this.asyncResolve(Promise.reject(e));
        });
    }
    /**
     * Consumes `length` allocated bytes without writing anything, and returns the skipped subarray.
     * Anything written into the returned array will not affect the buffer,
     * except if it is later reincorporated e.g. via `.insertArray()`.
     * Rather niche.
     */
    stealAlloc(length) {
        this._commitWritten();
        const array = this.array.subarray(this.index, this.index + length);
        this._setArray(this.array.subarray(this.index + length));
        return array;
    }
    /**
     * Invokes the callback once buffer's async tasks finish, and holds this
     * buffer open until the callback returns.
     */
    waitForBuffer(buffer, fn) {
        if (buffer.asyncCount) {
            this.waitFor(async () => {
                await buffer.asyncPromise;
                fn();
            });
        }
        else {
            fn();
        }
    }
    /**
     * Finishes the current array, and returns a Uint8Array containing everything written.
     * The EncodeBuffer is left in an undefined state, and should not be used afterwards.
     * Throws if asynchronous writes are still pending.
     */
    finish() {
        if (this.asyncCount)
            throw new Error("Attempted to finish before async completion");
        if (!this.finishedArrays.length)
            return this.array.subarray(0, this.index);
        this._commitWritten();
        const fullArray = new Uint8Array(this.finishedSize);
        this._finishInto(fullArray, 0);
        return fullArray;
    }
    /**
     * Finishes the current array, and returns a Uint8Array containing everything written.
     * The EncodeBuffer is left in an undefined state, and should not be used afterwards.
     */
    async finishAsync() {
        await this.asyncPromise;
        return this.finish();
    }
    /** Copies all data from finishedArrays into fullArray */
    _finishInto(fullArray, index) {
        for (let i = 0; i < this.finishedArrays.length; i++) {
            const array = this.finishedArrays[i];
            if (array instanceof EncodeBuffer) {
                index = array._finishInto(fullArray, index);
            }
            else {
                fullArray.set(array, index);
                index += array.length;
            }
        }
        return index;
    }
    /**
     * Pushes the data written in array to finishedArrays.
     * Leaves the buffer in an invalid state -- array and index must be updated.
     */
    _commitWritten() {
        if (this.index) {
            this.finishedArrays.push(this.array.subarray(0, this.index));
            this.finishedSize += this.index;
        }
    }
    /** Sets array and updates view */
    _setArray(array) {
        this.array = array;
        this.view = new DataView(array.buffer, array.byteOffset, array.byteLength);
        this.index = 0;
    }
}
class DecodeBuffer {
    constructor(array) {
        Object.defineProperty(this, "array", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: array
        });
        Object.defineProperty(this, "view", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "index", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "context", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Context()
        });
        this.view = new DataView(array.buffer, array.byteOffset, array.byteLength);
    }
}
class Context {
    constructor() {
        Object.defineProperty(this, "map", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Map()
        });
    }
    get(T) {
        let value = this.map.get(T);
        if (!value) {
            value = new T();
            this.map.set(T, value);
        }
        return value;
    }
}
class CodecVisitor {
    constructor() {
        _CodecVisitor_fallback.set(this, void 0);
        _CodecVisitor_visitors.set(this, new Map());
    }
    add(codec, fn) {
        if (__classPrivateFieldGet(this, _CodecVisitor_visitors, "f").has(codec)) {
            throw new Error("Duplicate visitor");
        }
        __classPrivateFieldGet(this, _CodecVisitor_visitors, "f").set(codec, fn);
        return this;
    }
    fallback(fn) {
        if (__classPrivateFieldGet(this, _CodecVisitor_fallback, "f")) {
            throw new Error("Duplicate fallback");
        }
        __classPrivateFieldSet(this, _CodecVisitor_fallback, fn, "f");
        return this;
    }
    /**
     * ```ts
     * visitor.generic(<T>() =>
     *   visitor.add($.array<T>, (codec, $el) => {
     *     ...
     *   })
     * )
     * ```
     */
    generic(fn) {
        fn(this);
        return this;
    }
    visit(codec) {
        const visitor = __classPrivateFieldGet(this, _CodecVisitor_visitors, "f").get(codec);
        if (visitor)
            return visitor(codec);
        if (codec._metadata) {
            const visitor = __classPrivateFieldGet(this, _CodecVisitor_visitors, "f").get(codec._metadata[0]);
            if (visitor)
                return visitor(codec, ...codec._metadata.slice(1));
        }
        if (__classPrivateFieldGet(this, _CodecVisitor_fallback, "f")) {
            return __classPrivateFieldGet(this, _CodecVisitor_fallback, "f").call(this, codec);
        }
        throw new Error("Unrecognized codec");
    }
}
_CodecVisitor_fallback = new WeakMap(), _CodecVisitor_visitors = new WeakMap();
class CodecError extends Error {
    constructor(codec, message) {
        super(message);
        Object.defineProperty(this, "codec", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: codec
        });
    }
}
class EncodeError extends CodecError {
    constructor(codec, value, message) {
        super(codec, message);
        Object.defineProperty(this, "value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: value
        });
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "EncodeError"
        });
    }
}
class DecodeError extends CodecError {
    constructor(codec, buffer, message) {
        super(codec, message);
        Object.defineProperty(this, "buffer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: buffer
        });
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "DecodeError"
        });
    }
}
//# sourceMappingURL=common.js.map

/***/ }),

/***/ "./node_modules/parity-scale-codec/esm/compact/codec.js":
/*!**************************************************************!*\
  !*** ./node_modules/parity-scale-codec/esm/compact/codec.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "compactU128": function() { return /* binding */ compactU128; },
/* harmony export */   "compactU16": function() { return /* binding */ compactU16; },
/* harmony export */   "compactU256": function() { return /* binding */ compactU256; },
/* harmony export */   "compactU32": function() { return /* binding */ compactU32; },
/* harmony export */   "compactU64": function() { return /* binding */ compactU64; },
/* harmony export */   "compactU8": function() { return /* binding */ compactU8; }
/* harmony export */ });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common.js */ "./node_modules/parity-scale-codec/esm/common.js");
/* harmony import */ var _int_codec_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../int/codec.js */ "./node_modules/parity-scale-codec/esm/int/codec.js");


const MAX_U6 = 0b00111111;
const MAX_U14 = 16383;
const MAX_U30 = 1073741823;
const compactNumber = (0,_common_js__WEBPACK_IMPORTED_MODULE_0__.createCodec)({
    name: "compactNumber",
    _metadata: null,
    _staticSize: 5,
    _encode(buffer, value) {
        if (value <= MAX_U6) {
            buffer.array[buffer.index++] = value << 2;
        }
        else if (value <= MAX_U14) {
            _int_codec_js__WEBPACK_IMPORTED_MODULE_1__.u16._encode(buffer, (value << 2) | 0b01);
        }
        else if (value <= MAX_U30) {
            // Because JS bitwise ops use *signed* 32-bit ints, this operation
            // produces negative values when `value >= 2 ** 29`. However, this is ok,
            // as `setUint32` correctly casts these negative values back to unsigned
            // 32-bit ints.
            _int_codec_js__WEBPACK_IMPORTED_MODULE_1__.u32._encode(buffer, (value << 2) | 0b10);
        }
        else {
            buffer.array[buffer.index++] = 0b11;
            _int_codec_js__WEBPACK_IMPORTED_MODULE_1__.u32._encode(buffer, value);
        }
    },
    _decode(buffer) {
        switch (buffer.array[buffer.index] & 0b11) {
            case 0:
                return buffer.array[buffer.index++] >> 2;
            case 1:
                return _int_codec_js__WEBPACK_IMPORTED_MODULE_1__.u16._decode(buffer) >> 2;
            case 2:
                // We use an unsigned right shift, as the default shift operator
                // uses signed 32-bit ints, which would yield invalid values.
                return _int_codec_js__WEBPACK_IMPORTED_MODULE_1__.u32._decode(buffer) >>> 2;
            default:
                if (buffer.array[buffer.index++] !== 3)
                    throw new _common_js__WEBPACK_IMPORTED_MODULE_0__.DecodeError(this, buffer, "Out of range for U32");
                return _int_codec_js__WEBPACK_IMPORTED_MODULE_1__.u32._decode(buffer);
        }
    },
});
const compactU8 = compactNumber;
const compactU16 = compactNumber;
const compactU32 = compactNumber;
const compactBigInt = (0,_common_js__WEBPACK_IMPORTED_MODULE_0__.createCodec)({
    name: "compactBigInt",
    _metadata: null,
    _staticSize: 5,
    _encode(buffer, value) {
        if (value <= 4294967295) {
            compactNumber._encode(buffer, Number(value));
            return;
        }
        let extraBytes = 0;
        let _value = value >> 32n;
        while (_value > 0n) {
            _value >>= 8n;
            extraBytes++;
        }
        buffer.array[buffer.index++] = (extraBytes << 2) | 0b11;
        _int_codec_js__WEBPACK_IMPORTED_MODULE_1__.u32._encode(buffer, Number(value & 0xffffffffn));
        _value = value >> 32n;
        buffer.pushAlloc(extraBytes);
        for (let i = 0; i < extraBytes; i++) {
            buffer.array[buffer.index++] = Number(_value & 0xffn);
            _value >>= 8n;
        }
        buffer.popAlloc();
    },
    _decode(buffer) {
        const b = buffer.array[buffer.index];
        if ((b & 0b11) < 3 || b === 3) {
            return BigInt(compactNumber._decode(buffer));
        }
        const extraBytes = b >> 2;
        buffer.index++;
        let value = BigInt(_int_codec_js__WEBPACK_IMPORTED_MODULE_1__.u32._decode(buffer));
        for (let i = 0; i < extraBytes; i++) {
            value |= BigInt(buffer.array[buffer.index++]) << BigInt(32 + i * 8);
        }
        return value;
    },
});
const compactU64 = compactBigInt;
const compactU128 = compactBigInt;
const compactU256 = compactBigInt;
//# sourceMappingURL=codec.js.map

/***/ }),

/***/ "./node_modules/parity-scale-codec/esm/constantPattern/codec.js":
/*!**********************************************************************!*\
  !*** ./node_modules/parity-scale-codec/esm/constantPattern/codec.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "constantPattern": function() { return /* binding */ constantPattern; }
/* harmony export */ });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common.js */ "./node_modules/parity-scale-codec/esm/common.js");

function constantPattern(value, c) {
    const pattern = c instanceof Uint8Array ? c : c.encode(value);
    return (0,_common_js__WEBPACK_IMPORTED_MODULE_0__.createCodec)({
        name: "constantPattern",
        _metadata: [constantPattern, value, pattern],
        // We could set `_staticSize` to `pattern.length`, but in this case it will
        // usually more efficient to insert `pattern` dynamically, rather than
        // manually copy the bytes.
        _staticSize: 0,
        _encode(buffer, got) {
            if (got !== value) {
                throw new _common_js__WEBPACK_IMPORTED_MODULE_0__.EncodeError(this, got, `Invalid value; expected ${value}, got ${got}`);
            }
            buffer.insertArray(pattern);
        },
        _decode(buffer) {
            const got = buffer.array.subarray(buffer.index, buffer.index += pattern.length);
            for (let i = 0; i < pattern.length; i++) {
                if (pattern[i] !== got[i]) {
                    throw new _common_js__WEBPACK_IMPORTED_MODULE_0__.DecodeError(this, buffer, `Invalid pattern; expected ${hex(pattern)}, got ${hex(got)}`);
                }
            }
            return value;
        },
    });
}
function hex(pattern) {
    let str = "0x";
    for (let i = 0; i < pattern.length; i++) {
        str += pattern[i].toString(16).padStart(2, "0");
    }
    return str;
}
//# sourceMappingURL=codec.js.map

/***/ }),

/***/ "./node_modules/parity-scale-codec/esm/deferred/codec.js":
/*!***************************************************************!*\
  !*** ./node_modules/parity-scale-codec/esm/deferred/codec.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "deferred": function() { return /* binding */ deferred; }
/* harmony export */ });
function deferred(getCodec) {
    let $codec;
    return {
        name: "deferred",
        _metadata: [deferred, getCodec],
        _staticSize: 0,
        _encode(buffer, value) {
            $codec ??= getCodec();
            buffer.pushAlloc($codec._staticSize);
            $codec._encode(buffer, value);
            buffer.popAlloc();
        },
        _decode(buffer) {
            $codec ??= getCodec();
            return $codec._decode(buffer);
        },
        encode(value) {
            $codec ??= getCodec();
            return $codec.encode(value);
        },
        encodeAsync(value) {
            $codec ??= getCodec();
            return $codec.encodeAsync(value);
        },
        decode(buffer) {
            $codec ??= getCodec();
            return $codec.decode(buffer);
        },
    };
}
//# sourceMappingURL=codec.js.map

/***/ }),

/***/ "./node_modules/parity-scale-codec/esm/dummy/codec.js":
/*!************************************************************!*\
  !*** ./node_modules/parity-scale-codec/esm/dummy/codec.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "dummy": function() { return /* binding */ dummy; }
/* harmony export */ });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common.js */ "./node_modules/parity-scale-codec/esm/common.js");

/**
 * `Dummy`'s decoder returns a hard-coded JS value and DOES NOT encode or decode from any bytes.
 * @param value The native value corresponding to the generically-supplied codec
 * @returns A dummy codec with the patched signature of `E`
 */
function dummy(value) {
    return (0,_common_js__WEBPACK_IMPORTED_MODULE_0__.createCodec)({
        name: "dummy",
        _metadata: [dummy, value],
        _staticSize: 0,
        _encode() { },
        _decode() {
            return value;
        },
    });
}
//# sourceMappingURL=codec.js.map

/***/ }),

/***/ "./node_modules/parity-scale-codec/esm/instance/codec.js":
/*!***************************************************************!*\
  !*** ./node_modules/parity-scale-codec/esm/instance/codec.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "instance": function() { return /* binding */ instance; }
/* harmony export */ });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common.js */ "./node_modules/parity-scale-codec/esm/common.js");
/* harmony import */ var _object_codec_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../object/codec.js */ "./node_modules/parity-scale-codec/esm/object/codec.js");


/**
 * @param ctor The constructor with which to instantiate the instance / from whose instance to encode
 * @param fields the ordered fields used to decode params for the constructor / encode from the instance
 * @returns the instance codec
 */
function instance(ctor, ...fields) {
    const $object = (0,_object_codec_js__WEBPACK_IMPORTED_MODULE_1__.object)(...fields);
    return (0,_common_js__WEBPACK_IMPORTED_MODULE_0__.createCodec)({
        ...$object,
        _metadata: [instance, ctor, ...fields],
        _decode(buffer) {
            const arr = Array(fields.length);
            for (let i = 0; i < arr.length; i++) {
                arr[i] = fields[i][1]._decode(buffer);
            }
            return new ctor(...arr);
        },
    });
}
//# sourceMappingURL=codec.js.map

/***/ }),

/***/ "./node_modules/parity-scale-codec/esm/int/codec.js":
/*!**********************************************************!*\
  !*** ./node_modules/parity-scale-codec/esm/int/codec.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "i128": function() { return /* binding */ i128; },
/* harmony export */   "i16": function() { return /* binding */ i16; },
/* harmony export */   "i256": function() { return /* binding */ i256; },
/* harmony export */   "i32": function() { return /* binding */ i32; },
/* harmony export */   "i64": function() { return /* binding */ i64; },
/* harmony export */   "i8": function() { return /* binding */ i8; },
/* harmony export */   "int": function() { return /* binding */ int; },
/* harmony export */   "u128": function() { return /* binding */ u128; },
/* harmony export */   "u16": function() { return /* binding */ u16; },
/* harmony export */   "u256": function() { return /* binding */ u256; },
/* harmony export */   "u32": function() { return /* binding */ u32; },
/* harmony export */   "u64": function() { return /* binding */ u64; },
/* harmony export */   "u8": function() { return /* binding */ u8; }
/* harmony export */ });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common.js */ "./node_modules/parity-scale-codec/esm/common.js");

const u8 = (0,_common_js__WEBPACK_IMPORTED_MODULE_0__.createCodec)({
    name: "u8",
    _metadata: [int, false, 8],
    _staticSize: 1,
    _encode(buffer, value) {
        buffer.array[buffer.index++] = value;
    },
    _decode(buffer) {
        return buffer.array[buffer.index++];
    },
});
function _int(size, key) {
    const getMethod = DataView.prototype["get" + key];
    const setMethod = DataView.prototype["set" + key];
    return (0,_common_js__WEBPACK_IMPORTED_MODULE_0__.createCodec)({
        name: `${key[0].toLowerCase}${size * 8}`,
        _metadata: [int, key.includes("Int"), size * 8],
        _staticSize: size,
        _encode(buffer, value) {
            setMethod.call(buffer.view, buffer.index, value, true);
            buffer.index += size;
        },
        _decode(buffer) {
            const value = getMethod.call(buffer.view, buffer.index, true);
            buffer.index += size;
            return value;
        },
    });
}
const i8 = _int(1, "Int8");
const u16 = _int(2, "Uint16");
const i16 = _int(2, "Int16");
const u32 = _int(4, "Uint32");
const i32 = _int(4, "Int32");
const u64 = _int(8, "BigUint64");
const i64 = _int(8, "BigInt64");
const _128 = (signed) => {
    const getMethod = DataView.prototype[signed ? "getBigInt64" : "getBigUint64"];
    return (0,_common_js__WEBPACK_IMPORTED_MODULE_0__.createCodec)({
        name: `${signed ? "i" : "u"}128`,
        _metadata: [int, signed, 128],
        _staticSize: 16,
        _encode(buffer, value) {
            buffer.view.setBigInt64(buffer.index, value, true);
            buffer.view.setBigInt64(buffer.index + 8, value >> 64n, true);
            buffer.index += 16;
        },
        _decode(buffer) {
            const b = buffer.view.getBigUint64(buffer.index, true);
            const a = getMethod.call(buffer.view, buffer.index + 8, true);
            buffer.index += 16;
            return (a << 64n) | b;
        },
    });
};
const u128 = _128(false);
const i128 = _128(true);
const _256 = (signed) => {
    const getMethod = DataView.prototype[signed ? "getBigInt64" : "getBigUint64"];
    return (0,_common_js__WEBPACK_IMPORTED_MODULE_0__.createCodec)({
        name: `${signed ? "i" : "u"}256`,
        _metadata: [int, signed, 256],
        _staticSize: 32,
        _encode(buffer, value) {
            buffer.view.setBigInt64(buffer.index, value, true);
            buffer.view.setBigInt64(buffer.index + 8, value >> 64n, true);
            buffer.view.setBigInt64(buffer.index + 16, value >> 128n, true);
            buffer.view.setBigInt64(buffer.index + 24, value >> 192n, true);
            buffer.index += 32;
        },
        _decode(buffer) {
            const d = buffer.view.getBigUint64(buffer.index, true);
            const c = buffer.view.getBigUint64(buffer.index + 8, true);
            const b = buffer.view.getBigUint64(buffer.index + 16, true);
            const a = getMethod.call(buffer.view, buffer.index + 24, true);
            buffer.index += 32;
            return (a << 192n) | (b << 128n) | (c << 64n) | d;
        },
    });
};
const u256 = _256(false);
const i256 = _256(true);
function int(signed, size) {
    const key = `${signed ? "i" : "u"}${size}`;
    return { u8, i8, u16, i16, u32, i32, u64, i64, u128, i128, u256, i256 }[key];
}
//# sourceMappingURL=codec.js.map

/***/ }),

/***/ "./node_modules/parity-scale-codec/esm/iterable/codec.js":
/*!***************************************************************!*\
  !*** ./node_modules/parity-scale-codec/esm/iterable/codec.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "iterable": function() { return /* binding */ iterable; },
/* harmony export */   "map": function() { return /* binding */ map; },
/* harmony export */   "set": function() { return /* binding */ set; }
/* harmony export */ });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common.js */ "./node_modules/parity-scale-codec/esm/common.js");
/* harmony import */ var _compact_codec_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../compact/codec.js */ "./node_modules/parity-scale-codec/esm/compact/codec.js");
/* harmony import */ var _mod_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../mod.js */ "./node_modules/parity-scale-codec/esm/mod.js");



function iterable({ $el, calcLength, rehydrate }) {
    return (0,_common_js__WEBPACK_IMPORTED_MODULE_0__.createCodec)({
        name: "iterable",
        _metadata: [iterable, { $el, calcLength, rehydrate }],
        _staticSize: _compact_codec_js__WEBPACK_IMPORTED_MODULE_1__.compactU32._staticSize,
        _encode(buffer, value) {
            const length = calcLength(value);
            _compact_codec_js__WEBPACK_IMPORTED_MODULE_1__.compactU32._encode(buffer, length);
            buffer.pushAlloc(length * $el._staticSize);
            let i = 0;
            for (const el of value) {
                $el._encode(buffer, el);
                i++;
            }
            if (i !== length)
                throw new _common_js__WEBPACK_IMPORTED_MODULE_0__.EncodeError(this, value, "Incorrect length returned by calcLength");
            buffer.popAlloc();
        },
        _decode(buffer) {
            const length = _compact_codec_js__WEBPACK_IMPORTED_MODULE_1__.compactU32._decode(buffer);
            let done = false;
            const value = rehydrate(function* () {
                for (let i = 0; i < length; i++) {
                    yield $el._decode(buffer);
                }
                done = true;
            }());
            if (!done)
                throw new _common_js__WEBPACK_IMPORTED_MODULE_0__.DecodeError(this, buffer, "Iterable passed to rehydrate must be immediately exhausted");
            return value;
        },
    });
}
function set($el) {
    return (0,_common_js__WEBPACK_IMPORTED_MODULE_0__.withMetadata)(iterable({
        $el,
        calcLength: (set) => set.size,
        rehydrate: (values) => new Set(values),
    }), [set, $el]);
}
function map($key, $value) {
    return (0,_common_js__WEBPACK_IMPORTED_MODULE_0__.withMetadata)(iterable({
        $el: (0,_mod_js__WEBPACK_IMPORTED_MODULE_2__.tuple)($key, $value),
        calcLength: (map) => map.size,
        rehydrate: (values) => new Map(values),
    }), [map, $key, $value]);
}
//# sourceMappingURL=codec.js.map

/***/ }),

/***/ "./node_modules/parity-scale-codec/esm/lenPrefixed/codec.js":
/*!******************************************************************!*\
  !*** ./node_modules/parity-scale-codec/esm/lenPrefixed/codec.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "lenPrefixed": function() { return /* binding */ lenPrefixed; }
/* harmony export */ });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common.js */ "./node_modules/parity-scale-codec/esm/common.js");
/* harmony import */ var _compact_codec_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../compact/codec.js */ "./node_modules/parity-scale-codec/esm/compact/codec.js");


function lenPrefixed($inner) {
    return (0,_common_js__WEBPACK_IMPORTED_MODULE_0__.createCodec)({
        _metadata: [lenPrefixed, $inner],
        _staticSize: _compact_codec_js__WEBPACK_IMPORTED_MODULE_1__.compactU32._staticSize + $inner._staticSize,
        _encode(buffer, extrinsic) {
            const lengthCursor = buffer.createCursor(_compact_codec_js__WEBPACK_IMPORTED_MODULE_1__.compactU32._staticSize);
            const contentCursor = buffer.createCursor($inner._staticSize);
            $inner._encode(contentCursor, extrinsic);
            buffer.waitForBuffer(contentCursor, () => {
                const length = contentCursor.finishedSize + contentCursor.index;
                _compact_codec_js__WEBPACK_IMPORTED_MODULE_1__.compactU32._encode(lengthCursor, length);
                lengthCursor.close();
                contentCursor.close();
            });
        },
        _decode(buffer) {
            const length = _compact_codec_js__WEBPACK_IMPORTED_MODULE_1__.compactU32._decode(buffer);
            return $inner.decode(buffer.array.subarray(buffer.index, buffer.index += length));
        },
    });
}
//# sourceMappingURL=codec.js.map

/***/ }),

/***/ "./node_modules/parity-scale-codec/esm/mod.js":
/*!****************************************************!*\
  !*** ./node_modules/parity-scale-codec/esm/mod.js ***!
  \****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BitSequence": function() { return /* reexport safe */ _bitSequence_codec_js__WEBPACK_IMPORTED_MODULE_1__.BitSequence; },
/* harmony export */   "CodecError": function() { return /* reexport safe */ _common_js__WEBPACK_IMPORTED_MODULE_3__.CodecError; },
/* harmony export */   "CodecVisitor": function() { return /* reexport safe */ _common_js__WEBPACK_IMPORTED_MODULE_3__.CodecVisitor; },
/* harmony export */   "Context": function() { return /* reexport safe */ _common_js__WEBPACK_IMPORTED_MODULE_3__.Context; },
/* harmony export */   "DecodeBuffer": function() { return /* reexport safe */ _common_js__WEBPACK_IMPORTED_MODULE_3__.DecodeBuffer; },
/* harmony export */   "DecodeError": function() { return /* reexport safe */ _common_js__WEBPACK_IMPORTED_MODULE_3__.DecodeError; },
/* harmony export */   "EncodeBuffer": function() { return /* reexport safe */ _common_js__WEBPACK_IMPORTED_MODULE_3__.EncodeBuffer; },
/* harmony export */   "EncodeError": function() { return /* reexport safe */ _common_js__WEBPACK_IMPORTED_MODULE_3__.EncodeError; },
/* harmony export */   "array": function() { return /* reexport safe */ _array_codec_js__WEBPACK_IMPORTED_MODULE_0__.array; },
/* harmony export */   "bitSequence": function() { return /* reexport safe */ _bitSequence_codec_js__WEBPACK_IMPORTED_MODULE_1__.bitSequence; },
/* harmony export */   "bool": function() { return /* reexport safe */ _bool_codec_js__WEBPACK_IMPORTED_MODULE_2__.bool; },
/* harmony export */   "compactU128": function() { return /* reexport safe */ _compact_codec_js__WEBPACK_IMPORTED_MODULE_4__.compactU128; },
/* harmony export */   "compactU16": function() { return /* reexport safe */ _compact_codec_js__WEBPACK_IMPORTED_MODULE_4__.compactU16; },
/* harmony export */   "compactU256": function() { return /* reexport safe */ _compact_codec_js__WEBPACK_IMPORTED_MODULE_4__.compactU256; },
/* harmony export */   "compactU32": function() { return /* reexport safe */ _compact_codec_js__WEBPACK_IMPORTED_MODULE_4__.compactU32; },
/* harmony export */   "compactU64": function() { return /* reexport safe */ _compact_codec_js__WEBPACK_IMPORTED_MODULE_4__.compactU64; },
/* harmony export */   "compactU8": function() { return /* reexport safe */ _compact_codec_js__WEBPACK_IMPORTED_MODULE_4__.compactU8; },
/* harmony export */   "constantPattern": function() { return /* reexport safe */ _constantPattern_codec_js__WEBPACK_IMPORTED_MODULE_5__.constantPattern; },
/* harmony export */   "createAsyncCodec": function() { return /* reexport safe */ _common_js__WEBPACK_IMPORTED_MODULE_3__.createAsyncCodec; },
/* harmony export */   "createCodec": function() { return /* reexport safe */ _common_js__WEBPACK_IMPORTED_MODULE_3__.createCodec; },
/* harmony export */   "deferred": function() { return /* reexport safe */ _deferred_codec_js__WEBPACK_IMPORTED_MODULE_6__.deferred; },
/* harmony export */   "dummy": function() { return /* reexport safe */ _dummy_codec_js__WEBPACK_IMPORTED_MODULE_7__.dummy; },
/* harmony export */   "i128": function() { return /* reexport safe */ _int_codec_js__WEBPACK_IMPORTED_MODULE_9__.i128; },
/* harmony export */   "i16": function() { return /* reexport safe */ _int_codec_js__WEBPACK_IMPORTED_MODULE_9__.i16; },
/* harmony export */   "i256": function() { return /* reexport safe */ _int_codec_js__WEBPACK_IMPORTED_MODULE_9__.i256; },
/* harmony export */   "i32": function() { return /* reexport safe */ _int_codec_js__WEBPACK_IMPORTED_MODULE_9__.i32; },
/* harmony export */   "i64": function() { return /* reexport safe */ _int_codec_js__WEBPACK_IMPORTED_MODULE_9__.i64; },
/* harmony export */   "i8": function() { return /* reexport safe */ _int_codec_js__WEBPACK_IMPORTED_MODULE_9__.i8; },
/* harmony export */   "instance": function() { return /* reexport safe */ _instance_codec_js__WEBPACK_IMPORTED_MODULE_8__.instance; },
/* harmony export */   "int": function() { return /* reexport safe */ _int_codec_js__WEBPACK_IMPORTED_MODULE_9__.int; },
/* harmony export */   "iterable": function() { return /* reexport safe */ _iterable_codec_js__WEBPACK_IMPORTED_MODULE_10__.iterable; },
/* harmony export */   "lenPrefixed": function() { return /* reexport safe */ _lenPrefixed_codec_js__WEBPACK_IMPORTED_MODULE_11__.lenPrefixed; },
/* harmony export */   "map": function() { return /* reexport safe */ _iterable_codec_js__WEBPACK_IMPORTED_MODULE_10__.map; },
/* harmony export */   "never": function() { return /* reexport safe */ _never_codec_js__WEBPACK_IMPORTED_MODULE_12__.never; },
/* harmony export */   "object": function() { return /* reexport safe */ _object_codec_js__WEBPACK_IMPORTED_MODULE_13__.object; },
/* harmony export */   "option": function() { return /* reexport safe */ _option_codec_js__WEBPACK_IMPORTED_MODULE_14__.option; },
/* harmony export */   "optionBool": function() { return /* reexport safe */ _option_optionBool_codec_js__WEBPACK_IMPORTED_MODULE_15__.optionBool; },
/* harmony export */   "promise": function() { return /* reexport safe */ _promise_codec_js__WEBPACK_IMPORTED_MODULE_16__.promise; },
/* harmony export */   "result": function() { return /* reexport safe */ _result_codec_js__WEBPACK_IMPORTED_MODULE_17__.result; },
/* harmony export */   "set": function() { return /* reexport safe */ _iterable_codec_js__WEBPACK_IMPORTED_MODULE_10__.set; },
/* harmony export */   "sizedArray": function() { return /* reexport safe */ _array_codec_js__WEBPACK_IMPORTED_MODULE_0__.sizedArray; },
/* harmony export */   "sizedUint8Array": function() { return /* reexport safe */ _array_codec_js__WEBPACK_IMPORTED_MODULE_0__.sizedUint8Array; },
/* harmony export */   "sizedUint8array": function() { return /* reexport safe */ _array_codec_js__WEBPACK_IMPORTED_MODULE_0__.sizedUint8array; },
/* harmony export */   "spread": function() { return /* reexport safe */ _spread_codec_js__WEBPACK_IMPORTED_MODULE_18__.spread; },
/* harmony export */   "str": function() { return /* reexport safe */ _str_codec_js__WEBPACK_IMPORTED_MODULE_19__.str; },
/* harmony export */   "stringUnion": function() { return /* reexport safe */ _union_codec_js__WEBPACK_IMPORTED_MODULE_22__.stringUnion; },
/* harmony export */   "taggedUnion": function() { return /* reexport safe */ _union_codec_js__WEBPACK_IMPORTED_MODULE_22__.taggedUnion; },
/* harmony export */   "transform": function() { return /* reexport safe */ _transform_codec_js__WEBPACK_IMPORTED_MODULE_20__.transform; },
/* harmony export */   "tuple": function() { return /* reexport safe */ _tuple_codec_js__WEBPACK_IMPORTED_MODULE_21__.tuple; },
/* harmony export */   "u128": function() { return /* reexport safe */ _int_codec_js__WEBPACK_IMPORTED_MODULE_9__.u128; },
/* harmony export */   "u16": function() { return /* reexport safe */ _int_codec_js__WEBPACK_IMPORTED_MODULE_9__.u16; },
/* harmony export */   "u256": function() { return /* reexport safe */ _int_codec_js__WEBPACK_IMPORTED_MODULE_9__.u256; },
/* harmony export */   "u32": function() { return /* reexport safe */ _int_codec_js__WEBPACK_IMPORTED_MODULE_9__.u32; },
/* harmony export */   "u64": function() { return /* reexport safe */ _int_codec_js__WEBPACK_IMPORTED_MODULE_9__.u64; },
/* harmony export */   "u8": function() { return /* reexport safe */ _int_codec_js__WEBPACK_IMPORTED_MODULE_9__.u8; },
/* harmony export */   "uint8Array": function() { return /* reexport safe */ _array_codec_js__WEBPACK_IMPORTED_MODULE_0__.uint8Array; },
/* harmony export */   "uint8array": function() { return /* reexport safe */ _array_codec_js__WEBPACK_IMPORTED_MODULE_0__.uint8array; },
/* harmony export */   "union": function() { return /* reexport safe */ _union_codec_js__WEBPACK_IMPORTED_MODULE_22__.union; },
/* harmony export */   "withMetadata": function() { return /* reexport safe */ _common_js__WEBPACK_IMPORTED_MODULE_3__.withMetadata; }
/* harmony export */ });
/* harmony import */ var _array_codec_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./array/codec.js */ "./node_modules/parity-scale-codec/esm/array/codec.js");
/* harmony import */ var _bitSequence_codec_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bitSequence/codec.js */ "./node_modules/parity-scale-codec/esm/bitSequence/codec.js");
/* harmony import */ var _bool_codec_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bool/codec.js */ "./node_modules/parity-scale-codec/esm/bool/codec.js");
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./common.js */ "./node_modules/parity-scale-codec/esm/common.js");
/* harmony import */ var _compact_codec_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./compact/codec.js */ "./node_modules/parity-scale-codec/esm/compact/codec.js");
/* harmony import */ var _constantPattern_codec_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./constantPattern/codec.js */ "./node_modules/parity-scale-codec/esm/constantPattern/codec.js");
/* harmony import */ var _deferred_codec_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./deferred/codec.js */ "./node_modules/parity-scale-codec/esm/deferred/codec.js");
/* harmony import */ var _dummy_codec_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./dummy/codec.js */ "./node_modules/parity-scale-codec/esm/dummy/codec.js");
/* harmony import */ var _instance_codec_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./instance/codec.js */ "./node_modules/parity-scale-codec/esm/instance/codec.js");
/* harmony import */ var _int_codec_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./int/codec.js */ "./node_modules/parity-scale-codec/esm/int/codec.js");
/* harmony import */ var _iterable_codec_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./iterable/codec.js */ "./node_modules/parity-scale-codec/esm/iterable/codec.js");
/* harmony import */ var _lenPrefixed_codec_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./lenPrefixed/codec.js */ "./node_modules/parity-scale-codec/esm/lenPrefixed/codec.js");
/* harmony import */ var _never_codec_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./never/codec.js */ "./node_modules/parity-scale-codec/esm/never/codec.js");
/* harmony import */ var _object_codec_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./object/codec.js */ "./node_modules/parity-scale-codec/esm/object/codec.js");
/* harmony import */ var _option_codec_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./option/codec.js */ "./node_modules/parity-scale-codec/esm/option/codec.js");
/* harmony import */ var _option_optionBool_codec_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./option/optionBool/codec.js */ "./node_modules/parity-scale-codec/esm/option/optionBool/codec.js");
/* harmony import */ var _promise_codec_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./promise/codec.js */ "./node_modules/parity-scale-codec/esm/promise/codec.js");
/* harmony import */ var _result_codec_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./result/codec.js */ "./node_modules/parity-scale-codec/esm/result/codec.js");
/* harmony import */ var _spread_codec_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./spread/codec.js */ "./node_modules/parity-scale-codec/esm/spread/codec.js");
/* harmony import */ var _str_codec_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./str/codec.js */ "./node_modules/parity-scale-codec/esm/str/codec.js");
/* harmony import */ var _transform_codec_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./transform/codec.js */ "./node_modules/parity-scale-codec/esm/transform/codec.js");
/* harmony import */ var _tuple_codec_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./tuple/codec.js */ "./node_modules/parity-scale-codec/esm/tuple/codec.js");
/* harmony import */ var _union_codec_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./union/codec.js */ "./node_modules/parity-scale-codec/esm/union/codec.js");























//# sourceMappingURL=mod.js.map

/***/ }),

/***/ "./node_modules/parity-scale-codec/esm/never/codec.js":
/*!************************************************************!*\
  !*** ./node_modules/parity-scale-codec/esm/never/codec.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "never": function() { return /* binding */ never; }
/* harmony export */ });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common.js */ "./node_modules/parity-scale-codec/esm/common.js");

const never = (0,_common_js__WEBPACK_IMPORTED_MODULE_0__.createCodec)({
    name: "never",
    _metadata: null,
    _staticSize: 0,
    _encode(value) {
        throw new _common_js__WEBPACK_IMPORTED_MODULE_0__.EncodeError(this, value, "Cannot encode $.never");
    },
    _decode(buffer) {
        throw new _common_js__WEBPACK_IMPORTED_MODULE_0__.DecodeError(this, buffer, "Cannot decode $.never");
    },
});
//# sourceMappingURL=codec.js.map

/***/ }),

/***/ "./node_modules/parity-scale-codec/esm/object/codec.js":
/*!*************************************************************!*\
  !*** ./node_modules/parity-scale-codec/esm/object/codec.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "object": function() { return /* binding */ object; }
/* harmony export */ });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common.js */ "./node_modules/parity-scale-codec/esm/common.js");

function object(...fields) {
    return (0,_common_js__WEBPACK_IMPORTED_MODULE_0__.createCodec)({
        name: "object",
        _metadata: [object, ...fields],
        _staticSize: fields.map((x) => x[1]._staticSize).reduce((a, b) => a + b, 0),
        _encode(buffer, value) {
            fields.forEach(([key, fieldEncoder]) => {
                fieldEncoder._encode(buffer, value[key]);
            });
        },
        _decode(buffer) {
            const obj = {};
            for (let i = 0; i < fields.length; i++) {
                const [key, field] = fields[i];
                obj[key] = field._decode(buffer);
            }
            return obj;
        },
    });
}
//# sourceMappingURL=codec.js.map

/***/ }),

/***/ "./node_modules/parity-scale-codec/esm/option/codec.js":
/*!*************************************************************!*\
  !*** ./node_modules/parity-scale-codec/esm/option/codec.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "option": function() { return /* binding */ option; }
/* harmony export */ });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common.js */ "./node_modules/parity-scale-codec/esm/common.js");

function option($some) {
    return (0,_common_js__WEBPACK_IMPORTED_MODULE_0__.createCodec)({
        name: "option",
        _metadata: [option, $some],
        _staticSize: 1 + $some._staticSize,
        _encode(buffer, value) {
            buffer.array[buffer.index++] = +(value !== undefined);
            if (value !== undefined) {
                $some._encode(buffer, value);
            }
        },
        _decode(buffer) {
            switch (buffer.array[buffer.index++]) {
                case 0: {
                    return undefined;
                }
                case 1: {
                    return $some._decode(buffer);
                }
                default: {
                    throw new _common_js__WEBPACK_IMPORTED_MODULE_0__.DecodeError($some, buffer, "Could not decode Option as `Some(_)` nor `None`");
                }
            }
        },
    });
}
//# sourceMappingURL=codec.js.map

/***/ }),

/***/ "./node_modules/parity-scale-codec/esm/option/optionBool/codec.js":
/*!************************************************************************!*\
  !*** ./node_modules/parity-scale-codec/esm/option/optionBool/codec.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "optionBool": function() { return /* binding */ optionBool; }
/* harmony export */ });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../common.js */ "./node_modules/parity-scale-codec/esm/common.js");

const optionBool = (0,_common_js__WEBPACK_IMPORTED_MODULE_0__.createCodec)({
    name: "optionBool",
    _metadata: null,
    _staticSize: 1,
    _encode(buffer, value) {
        buffer.array[buffer.index++] = value === undefined ? 0 : 1 + +!value;
    },
    _decode(buffer) {
        const byte = buffer.array[buffer.index++];
        return byte === 0 ? undefined : !(byte - 1);
    },
});
//# sourceMappingURL=codec.js.map

/***/ }),

/***/ "./node_modules/parity-scale-codec/esm/promise/codec.js":
/*!**************************************************************!*\
  !*** ./node_modules/parity-scale-codec/esm/promise/codec.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "promise": function() { return /* binding */ promise; }
/* harmony export */ });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common.js */ "./node_modules/parity-scale-codec/esm/common.js");

function promise($value) {
    return (0,_common_js__WEBPACK_IMPORTED_MODULE_0__.createAsyncCodec)({
        name: "promise",
        _metadata: [promise, $value],
        _staticSize: $value._staticSize,
        async _encodeAsync(buffer, value) {
            $value._encode(buffer, await value);
        },
        _decode(buffer) {
            return Promise.resolve($value._decode(buffer));
        },
    });
}
//# sourceMappingURL=codec.js.map

/***/ }),

/***/ "./node_modules/parity-scale-codec/esm/result/codec.js":
/*!*************************************************************!*\
  !*** ./node_modules/parity-scale-codec/esm/result/codec.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "result": function() { return /* binding */ result; }
/* harmony export */ });
/* harmony import */ var _union_codec_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../union/codec.js */ "./node_modules/parity-scale-codec/esm/union/codec.js");

function result($ok, $err) {
    return Object.assign((0,_union_codec_js__WEBPACK_IMPORTED_MODULE_0__.union)((value) => value instanceof Error ? 1 : 0, [$ok, $err]), {
        _metadata: [result, $ok, $err],
    });
}
//# sourceMappingURL=codec.js.map

/***/ }),

/***/ "./node_modules/parity-scale-codec/esm/spread/codec.js":
/*!*************************************************************!*\
  !*** ./node_modules/parity-scale-codec/esm/spread/codec.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "spread": function() { return /* binding */ spread; }
/* harmony export */ });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common.js */ "./node_modules/parity-scale-codec/esm/common.js");

function spread($a, $b) {
    return (0,_common_js__WEBPACK_IMPORTED_MODULE_0__.createCodec)({
        name: "spread",
        _metadata: [spread, $a, $b],
        _staticSize: $a._staticSize + $b._staticSize,
        _encode(buffer, value) {
            $a._encode(buffer, value);
            $b._encode(buffer, value);
        },
        _decode(buffer) {
            return { ...$a._decode(buffer), ...$b._decode(buffer) };
        },
    });
}
//# sourceMappingURL=codec.js.map

/***/ }),

/***/ "./node_modules/parity-scale-codec/esm/str/codec.js":
/*!**********************************************************!*\
  !*** ./node_modules/parity-scale-codec/esm/str/codec.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "str": function() { return /* binding */ str; }
/* harmony export */ });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common.js */ "./node_modules/parity-scale-codec/esm/common.js");
/* harmony import */ var _compact_codec_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../compact/codec.js */ "./node_modules/parity-scale-codec/esm/compact/codec.js");


const str = (0,_common_js__WEBPACK_IMPORTED_MODULE_0__.createCodec)({
    name: "str",
    _metadata: null,
    _staticSize: _compact_codec_js__WEBPACK_IMPORTED_MODULE_1__.compactU32._staticSize,
    _encode(buffer, value) {
        const array = new TextEncoder().encode(value);
        _compact_codec_js__WEBPACK_IMPORTED_MODULE_1__.compactU32._encode(buffer, array.length);
        buffer.insertArray(array);
    },
    _decode(buffer) {
        const len = _compact_codec_js__WEBPACK_IMPORTED_MODULE_1__.compactU32._decode(buffer);
        if (buffer.array.length < buffer.index + len) {
            throw new _common_js__WEBPACK_IMPORTED_MODULE_0__.DecodeError(this, buffer, "Attempting to `str`-decode beyond bounds of input bytes");
        }
        const slice = buffer.array.slice(buffer.index, buffer.index + len);
        buffer.index += len;
        return new TextDecoder().decode(slice);
    },
});
//# sourceMappingURL=codec.js.map

/***/ }),

/***/ "./node_modules/parity-scale-codec/esm/transform/codec.js":
/*!****************************************************************!*\
  !*** ./node_modules/parity-scale-codec/esm/transform/codec.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "transform": function() { return /* binding */ transform; }
/* harmony export */ });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common.js */ "./node_modules/parity-scale-codec/esm/common.js");

function transform($base, encode, decode) {
    return (0,_common_js__WEBPACK_IMPORTED_MODULE_0__.createCodec)({
        name: "transform",
        _metadata: [transform, $base, encode, decode],
        _staticSize: $base._staticSize,
        _encode(buffer, value) {
            $base._encode(buffer, encode(value));
        },
        _decode(buffer) {
            return decode($base._decode(buffer));
        },
    });
}
//# sourceMappingURL=codec.js.map

/***/ }),

/***/ "./node_modules/parity-scale-codec/esm/tuple/codec.js":
/*!************************************************************!*\
  !*** ./node_modules/parity-scale-codec/esm/tuple/codec.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "tuple": function() { return /* binding */ tuple; }
/* harmony export */ });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common.js */ "./node_modules/parity-scale-codec/esm/common.js");

function tuple(...codecs) {
    return (0,_common_js__WEBPACK_IMPORTED_MODULE_0__.createCodec)({
        name: "tuple",
        _metadata: [tuple, ...codecs],
        _staticSize: codecs.map((x) => x._staticSize).reduce((a, b) => a + b, 0),
        _encode(buffer, value) {
            for (let i = 0; i < codecs.length; i++) {
                codecs[i]._encode(buffer, value[i]);
            }
        },
        _decode(buffer) {
            const value = Array(codecs.length);
            for (let i = 0; i < codecs.length; i++) {
                value[i] = codecs[i]._decode(buffer);
            }
            return value;
        },
    });
}
//# sourceMappingURL=codec.js.map

/***/ }),

/***/ "./node_modules/parity-scale-codec/esm/union/codec.js":
/*!************************************************************!*\
  !*** ./node_modules/parity-scale-codec/esm/union/codec.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "stringUnion": function() { return /* binding */ stringUnion; },
/* harmony export */   "taggedUnion": function() { return /* binding */ taggedUnion; },
/* harmony export */   "union": function() { return /* binding */ union; }
/* harmony export */ });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common.js */ "./node_modules/parity-scale-codec/esm/common.js");
/* harmony import */ var _dummy_codec_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dummy/codec.js */ "./node_modules/parity-scale-codec/esm/dummy/codec.js");
/* harmony import */ var _object_codec_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../object/codec.js */ "./node_modules/parity-scale-codec/esm/object/codec.js");



function union(getIndex, $members) {
    return (0,_common_js__WEBPACK_IMPORTED_MODULE_0__.createCodec)({
        name: "union",
        _metadata: [union, getIndex, $members],
        _staticSize: 1 + Math.max(...Object.values($members).map((x) => x._staticSize)),
        _encode(buffer, value) {
            const discriminant = getIndex(value);
            const $member = $members[discriminant];
            buffer.array[buffer.index++] = discriminant;
            $member._encode(buffer, value);
        },
        _decode(buffer) {
            const discriminant = buffer.array[buffer.index++];
            const $member = $members[discriminant];
            if (!$member) {
                throw new _common_js__WEBPACK_IMPORTED_MODULE_0__.DecodeError(this, buffer, `No such member codec matching the discriminant \`${discriminant}\``);
            }
            return $member._decode(buffer);
        },
    });
}
function taggedUnion(tagKey, members) {
    const tagToDiscriminant = {};
    const discriminantToMember = {};
    for (const _discriminant in members) {
        const discriminant = +_discriminant;
        if (isNaN(discriminant))
            continue;
        const [tag, ...fields] = members[discriminant];
        tagToDiscriminant[tag] = discriminant;
        discriminantToMember[discriminant] = (0,_object_codec_js__WEBPACK_IMPORTED_MODULE_2__.object)([tagKey, (0,_dummy_codec_js__WEBPACK_IMPORTED_MODULE_1__.dummy)(tag)], ...fields);
    }
    return (0,_common_js__WEBPACK_IMPORTED_MODULE_0__.withMetadata)(union((value) => tagToDiscriminant[value[tagKey]], discriminantToMember), [taggedUnion, tagKey, members]);
}
function stringUnion(members) {
    const keyToDiscriminant = {};
    for (const _discriminant in members) {
        const discriminant = +_discriminant;
        if (isNaN(discriminant))
            continue;
        const key = members[discriminant];
        keyToDiscriminant[key] = discriminant;
    }
    return (0,_common_js__WEBPACK_IMPORTED_MODULE_0__.createCodec)({
        name: "stringUnion",
        _metadata: [stringUnion, members],
        _staticSize: 1,
        _encode(buffer, value) {
            const discriminant = keyToDiscriminant[value];
            buffer.array[buffer.index++] = discriminant;
        },
        _decode(buffer) {
            const discriminant = buffer.array[buffer.index++];
            return members[discriminant];
        },
    });
}
//# sourceMappingURL=codec.js.map

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			if (cachedModule.error !== undefined) throw cachedModule.error;
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		try {
/******/ 			var execOptions = { id: moduleId, module: module, factory: __webpack_modules__[moduleId], require: __webpack_require__ };
/******/ 			__webpack_require__.i.forEach(function(handler) { handler(execOptions); });
/******/ 			module = execOptions.module;
/******/ 			execOptions.factory.call(module.exports, module, module.exports, execOptions.require);
/******/ 		} catch(e) {
/******/ 			module.error = e;
/******/ 			throw e;
/******/ 		}
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = __webpack_module_cache__;
/******/ 	
/******/ 	// expose the module execution interceptor
/******/ 	__webpack_require__.i = [];
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	!function() {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = function(module) {
/******/ 			var getter = module && module.__esModule ?
/******/ 				function() { return module['default']; } :
/******/ 				function() { return module; };
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/ensure chunk */
/******/ 	!function() {
/******/ 		__webpack_require__.f = {};
/******/ 		// This file contains only the entry chunk.
/******/ 		// The chunk loading function for additional chunks
/******/ 		__webpack_require__.e = function(chunkId) {
/******/ 			return Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {
/******/ 				__webpack_require__.f[key](chunkId, promises);
/******/ 				return promises;
/******/ 			}, []));
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/get javascript chunk filename */
/******/ 	!function() {
/******/ 		// This function allow to reference async chunks
/******/ 		__webpack_require__.u = function(chunkId) {
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + ".js";
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/get javascript update chunk filename */
/******/ 	!function() {
/******/ 		// This function allow to reference all chunks
/******/ 		__webpack_require__.hu = function(chunkId) {
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + "." + __webpack_require__.h() + ".hot-update.js";
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/get update manifest filename */
/******/ 	!function() {
/******/ 		__webpack_require__.hmrF = function() { return "main." + __webpack_require__.h() + ".hot-update.json"; };
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/getFullHash */
/******/ 	!function() {
/******/ 		__webpack_require__.h = function() { return "9c07df4432b64b4a34ce"; }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	!function() {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/load script */
/******/ 	!function() {
/******/ 		var inProgress = {};
/******/ 		var dataWebpackPrefix = "capi-simple-demo:";
/******/ 		// loadScript function to load a script via script tag
/******/ 		__webpack_require__.l = function(url, done, key, chunkId) {
/******/ 			if(inProgress[url]) { inProgress[url].push(done); return; }
/******/ 			var script, needAttach;
/******/ 			if(key !== undefined) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				for(var i = 0; i < scripts.length; i++) {
/******/ 					var s = scripts[i];
/******/ 					if(s.getAttribute("src") == url || s.getAttribute("data-webpack") == dataWebpackPrefix + key) { script = s; break; }
/******/ 				}
/******/ 			}
/******/ 			if(!script) {
/******/ 				needAttach = true;
/******/ 				script = document.createElement('script');
/******/ 		
/******/ 				script.charset = 'utf-8';
/******/ 				script.timeout = 120;
/******/ 				if (__webpack_require__.nc) {
/******/ 					script.setAttribute("nonce", __webpack_require__.nc);
/******/ 				}
/******/ 				script.setAttribute("data-webpack", dataWebpackPrefix + key);
/******/ 				script.src = url;
/******/ 			}
/******/ 			inProgress[url] = [done];
/******/ 			var onScriptComplete = function(prev, event) {
/******/ 				// avoid mem leaks in IE.
/******/ 				script.onerror = script.onload = null;
/******/ 				clearTimeout(timeout);
/******/ 				var doneFns = inProgress[url];
/******/ 				delete inProgress[url];
/******/ 				script.parentNode && script.parentNode.removeChild(script);
/******/ 				doneFns && doneFns.forEach(function(fn) { return fn(event); });
/******/ 				if(prev) return prev(event);
/******/ 			}
/******/ 			;
/******/ 			var timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);
/******/ 			script.onerror = onScriptComplete.bind(null, script.onerror);
/******/ 			script.onload = onScriptComplete.bind(null, script.onload);
/******/ 			needAttach && document.head.appendChild(script);
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hot module replacement */
/******/ 	!function() {
/******/ 		var currentModuleData = {};
/******/ 		var installedModules = __webpack_require__.c;
/******/ 		
/******/ 		// module and require creation
/******/ 		var currentChildModule;
/******/ 		var currentParents = [];
/******/ 		
/******/ 		// status
/******/ 		var registeredStatusHandlers = [];
/******/ 		var currentStatus = "idle";
/******/ 		
/******/ 		// while downloading
/******/ 		var blockingPromises = 0;
/******/ 		var blockingPromisesWaiting = [];
/******/ 		
/******/ 		// The update info
/******/ 		var currentUpdateApplyHandlers;
/******/ 		var queuedInvalidatedModules;
/******/ 		
/******/ 		// eslint-disable-next-line no-unused-vars
/******/ 		__webpack_require__.hmrD = currentModuleData;
/******/ 		
/******/ 		__webpack_require__.i.push(function (options) {
/******/ 			var module = options.module;
/******/ 			var require = createRequire(options.require, options.id);
/******/ 			module.hot = createModuleHotObject(options.id, module);
/******/ 			module.parents = currentParents;
/******/ 			module.children = [];
/******/ 			currentParents = [];
/******/ 			options.require = require;
/******/ 		});
/******/ 		
/******/ 		__webpack_require__.hmrC = {};
/******/ 		__webpack_require__.hmrI = {};
/******/ 		
/******/ 		function createRequire(require, moduleId) {
/******/ 			var me = installedModules[moduleId];
/******/ 			if (!me) return require;
/******/ 			var fn = function (request) {
/******/ 				if (me.hot.active) {
/******/ 					if (installedModules[request]) {
/******/ 						var parents = installedModules[request].parents;
/******/ 						if (parents.indexOf(moduleId) === -1) {
/******/ 							parents.push(moduleId);
/******/ 						}
/******/ 					} else {
/******/ 						currentParents = [moduleId];
/******/ 						currentChildModule = request;
/******/ 					}
/******/ 					if (me.children.indexOf(request) === -1) {
/******/ 						me.children.push(request);
/******/ 					}
/******/ 				} else {
/******/ 					console.warn(
/******/ 						"[HMR] unexpected require(" +
/******/ 							request +
/******/ 							") from disposed module " +
/******/ 							moduleId
/******/ 					);
/******/ 					currentParents = [];
/******/ 				}
/******/ 				return require(request);
/******/ 			};
/******/ 			var createPropertyDescriptor = function (name) {
/******/ 				return {
/******/ 					configurable: true,
/******/ 					enumerable: true,
/******/ 					get: function () {
/******/ 						return require[name];
/******/ 					},
/******/ 					set: function (value) {
/******/ 						require[name] = value;
/******/ 					}
/******/ 				};
/******/ 			};
/******/ 			for (var name in require) {
/******/ 				if (Object.prototype.hasOwnProperty.call(require, name) && name !== "e") {
/******/ 					Object.defineProperty(fn, name, createPropertyDescriptor(name));
/******/ 				}
/******/ 			}
/******/ 			fn.e = function (chunkId) {
/******/ 				return trackBlockingPromise(require.e(chunkId));
/******/ 			};
/******/ 			return fn;
/******/ 		}
/******/ 		
/******/ 		function createModuleHotObject(moduleId, me) {
/******/ 			var _main = currentChildModule !== moduleId;
/******/ 			var hot = {
/******/ 				// private stuff
/******/ 				_acceptedDependencies: {},
/******/ 				_acceptedErrorHandlers: {},
/******/ 				_declinedDependencies: {},
/******/ 				_selfAccepted: false,
/******/ 				_selfDeclined: false,
/******/ 				_selfInvalidated: false,
/******/ 				_disposeHandlers: [],
/******/ 				_main: _main,
/******/ 				_requireSelf: function () {
/******/ 					currentParents = me.parents.slice();
/******/ 					currentChildModule = _main ? undefined : moduleId;
/******/ 					__webpack_require__(moduleId);
/******/ 				},
/******/ 		
/******/ 				// Module API
/******/ 				active: true,
/******/ 				accept: function (dep, callback, errorHandler) {
/******/ 					if (dep === undefined) hot._selfAccepted = true;
/******/ 					else if (typeof dep === "function") hot._selfAccepted = dep;
/******/ 					else if (typeof dep === "object" && dep !== null) {
/******/ 						for (var i = 0; i < dep.length; i++) {
/******/ 							hot._acceptedDependencies[dep[i]] = callback || function () {};
/******/ 							hot._acceptedErrorHandlers[dep[i]] = errorHandler;
/******/ 						}
/******/ 					} else {
/******/ 						hot._acceptedDependencies[dep] = callback || function () {};
/******/ 						hot._acceptedErrorHandlers[dep] = errorHandler;
/******/ 					}
/******/ 				},
/******/ 				decline: function (dep) {
/******/ 					if (dep === undefined) hot._selfDeclined = true;
/******/ 					else if (typeof dep === "object" && dep !== null)
/******/ 						for (var i = 0; i < dep.length; i++)
/******/ 							hot._declinedDependencies[dep[i]] = true;
/******/ 					else hot._declinedDependencies[dep] = true;
/******/ 				},
/******/ 				dispose: function (callback) {
/******/ 					hot._disposeHandlers.push(callback);
/******/ 				},
/******/ 				addDisposeHandler: function (callback) {
/******/ 					hot._disposeHandlers.push(callback);
/******/ 				},
/******/ 				removeDisposeHandler: function (callback) {
/******/ 					var idx = hot._disposeHandlers.indexOf(callback);
/******/ 					if (idx >= 0) hot._disposeHandlers.splice(idx, 1);
/******/ 				},
/******/ 				invalidate: function () {
/******/ 					this._selfInvalidated = true;
/******/ 					switch (currentStatus) {
/******/ 						case "idle":
/******/ 							currentUpdateApplyHandlers = [];
/******/ 							Object.keys(__webpack_require__.hmrI).forEach(function (key) {
/******/ 								__webpack_require__.hmrI[key](
/******/ 									moduleId,
/******/ 									currentUpdateApplyHandlers
/******/ 								);
/******/ 							});
/******/ 							setStatus("ready");
/******/ 							break;
/******/ 						case "ready":
/******/ 							Object.keys(__webpack_require__.hmrI).forEach(function (key) {
/******/ 								__webpack_require__.hmrI[key](
/******/ 									moduleId,
/******/ 									currentUpdateApplyHandlers
/******/ 								);
/******/ 							});
/******/ 							break;
/******/ 						case "prepare":
/******/ 						case "check":
/******/ 						case "dispose":
/******/ 						case "apply":
/******/ 							(queuedInvalidatedModules = queuedInvalidatedModules || []).push(
/******/ 								moduleId
/******/ 							);
/******/ 							break;
/******/ 						default:
/******/ 							// ignore requests in error states
/******/ 							break;
/******/ 					}
/******/ 				},
/******/ 		
/******/ 				// Management API
/******/ 				check: hotCheck,
/******/ 				apply: hotApply,
/******/ 				status: function (l) {
/******/ 					if (!l) return currentStatus;
/******/ 					registeredStatusHandlers.push(l);
/******/ 				},
/******/ 				addStatusHandler: function (l) {
/******/ 					registeredStatusHandlers.push(l);
/******/ 				},
/******/ 				removeStatusHandler: function (l) {
/******/ 					var idx = registeredStatusHandlers.indexOf(l);
/******/ 					if (idx >= 0) registeredStatusHandlers.splice(idx, 1);
/******/ 				},
/******/ 		
/******/ 				//inherit from previous dispose call
/******/ 				data: currentModuleData[moduleId]
/******/ 			};
/******/ 			currentChildModule = undefined;
/******/ 			return hot;
/******/ 		}
/******/ 		
/******/ 		function setStatus(newStatus) {
/******/ 			currentStatus = newStatus;
/******/ 			var results = [];
/******/ 		
/******/ 			for (var i = 0; i < registeredStatusHandlers.length; i++)
/******/ 				results[i] = registeredStatusHandlers[i].call(null, newStatus);
/******/ 		
/******/ 			return Promise.all(results);
/******/ 		}
/******/ 		
/******/ 		function unblock() {
/******/ 			if (--blockingPromises === 0) {
/******/ 				setStatus("ready").then(function () {
/******/ 					if (blockingPromises === 0) {
/******/ 						var list = blockingPromisesWaiting;
/******/ 						blockingPromisesWaiting = [];
/******/ 						for (var i = 0; i < list.length; i++) {
/******/ 							list[i]();
/******/ 						}
/******/ 					}
/******/ 				});
/******/ 			}
/******/ 		}
/******/ 		
/******/ 		function trackBlockingPromise(promise) {
/******/ 			switch (currentStatus) {
/******/ 				case "ready":
/******/ 					setStatus("prepare");
/******/ 				/* fallthrough */
/******/ 				case "prepare":
/******/ 					blockingPromises++;
/******/ 					promise.then(unblock, unblock);
/******/ 					return promise;
/******/ 				default:
/******/ 					return promise;
/******/ 			}
/******/ 		}
/******/ 		
/******/ 		function waitForBlockingPromises(fn) {
/******/ 			if (blockingPromises === 0) return fn();
/******/ 			return new Promise(function (resolve) {
/******/ 				blockingPromisesWaiting.push(function () {
/******/ 					resolve(fn());
/******/ 				});
/******/ 			});
/******/ 		}
/******/ 		
/******/ 		function hotCheck(applyOnUpdate) {
/******/ 			if (currentStatus !== "idle") {
/******/ 				throw new Error("check() is only allowed in idle status");
/******/ 			}
/******/ 			return setStatus("check")
/******/ 				.then(__webpack_require__.hmrM)
/******/ 				.then(function (update) {
/******/ 					if (!update) {
/******/ 						return setStatus(applyInvalidatedModules() ? "ready" : "idle").then(
/******/ 							function () {
/******/ 								return null;
/******/ 							}
/******/ 						);
/******/ 					}
/******/ 		
/******/ 					return setStatus("prepare").then(function () {
/******/ 						var updatedModules = [];
/******/ 						currentUpdateApplyHandlers = [];
/******/ 		
/******/ 						return Promise.all(
/******/ 							Object.keys(__webpack_require__.hmrC).reduce(function (
/******/ 								promises,
/******/ 								key
/******/ 							) {
/******/ 								__webpack_require__.hmrC[key](
/******/ 									update.c,
/******/ 									update.r,
/******/ 									update.m,
/******/ 									promises,
/******/ 									currentUpdateApplyHandlers,
/******/ 									updatedModules
/******/ 								);
/******/ 								return promises;
/******/ 							},
/******/ 							[])
/******/ 						).then(function () {
/******/ 							return waitForBlockingPromises(function () {
/******/ 								if (applyOnUpdate) {
/******/ 									return internalApply(applyOnUpdate);
/******/ 								} else {
/******/ 									return setStatus("ready").then(function () {
/******/ 										return updatedModules;
/******/ 									});
/******/ 								}
/******/ 							});
/******/ 						});
/******/ 					});
/******/ 				});
/******/ 		}
/******/ 		
/******/ 		function hotApply(options) {
/******/ 			if (currentStatus !== "ready") {
/******/ 				return Promise.resolve().then(function () {
/******/ 					throw new Error(
/******/ 						"apply() is only allowed in ready status (state: " +
/******/ 							currentStatus +
/******/ 							")"
/******/ 					);
/******/ 				});
/******/ 			}
/******/ 			return internalApply(options);
/******/ 		}
/******/ 		
/******/ 		function internalApply(options) {
/******/ 			options = options || {};
/******/ 		
/******/ 			applyInvalidatedModules();
/******/ 		
/******/ 			var results = currentUpdateApplyHandlers.map(function (handler) {
/******/ 				return handler(options);
/******/ 			});
/******/ 			currentUpdateApplyHandlers = undefined;
/******/ 		
/******/ 			var errors = results
/******/ 				.map(function (r) {
/******/ 					return r.error;
/******/ 				})
/******/ 				.filter(Boolean);
/******/ 		
/******/ 			if (errors.length > 0) {
/******/ 				return setStatus("abort").then(function () {
/******/ 					throw errors[0];
/******/ 				});
/******/ 			}
/******/ 		
/******/ 			// Now in "dispose" phase
/******/ 			var disposePromise = setStatus("dispose");
/******/ 		
/******/ 			results.forEach(function (result) {
/******/ 				if (result.dispose) result.dispose();
/******/ 			});
/******/ 		
/******/ 			// Now in "apply" phase
/******/ 			var applyPromise = setStatus("apply");
/******/ 		
/******/ 			var error;
/******/ 			var reportError = function (err) {
/******/ 				if (!error) error = err;
/******/ 			};
/******/ 		
/******/ 			var outdatedModules = [];
/******/ 			results.forEach(function (result) {
/******/ 				if (result.apply) {
/******/ 					var modules = result.apply(reportError);
/******/ 					if (modules) {
/******/ 						for (var i = 0; i < modules.length; i++) {
/******/ 							outdatedModules.push(modules[i]);
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 			});
/******/ 		
/******/ 			return Promise.all([disposePromise, applyPromise]).then(function () {
/******/ 				// handle errors in accept handlers and self accepted module load
/******/ 				if (error) {
/******/ 					return setStatus("fail").then(function () {
/******/ 						throw error;
/******/ 					});
/******/ 				}
/******/ 		
/******/ 				if (queuedInvalidatedModules) {
/******/ 					return internalApply(options).then(function (list) {
/******/ 						outdatedModules.forEach(function (moduleId) {
/******/ 							if (list.indexOf(moduleId) < 0) list.push(moduleId);
/******/ 						});
/******/ 						return list;
/******/ 					});
/******/ 				}
/******/ 		
/******/ 				return setStatus("idle").then(function () {
/******/ 					return outdatedModules;
/******/ 				});
/******/ 			});
/******/ 		}
/******/ 		
/******/ 		function applyInvalidatedModules() {
/******/ 			if (queuedInvalidatedModules) {
/******/ 				if (!currentUpdateApplyHandlers) currentUpdateApplyHandlers = [];
/******/ 				Object.keys(__webpack_require__.hmrI).forEach(function (key) {
/******/ 					queuedInvalidatedModules.forEach(function (moduleId) {
/******/ 						__webpack_require__.hmrI[key](
/******/ 							moduleId,
/******/ 							currentUpdateApplyHandlers
/******/ 						);
/******/ 					});
/******/ 				});
/******/ 				queuedInvalidatedModules = undefined;
/******/ 				return true;
/******/ 			}
/******/ 		}
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	!function() {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) scriptUrl = scripts[scripts.length - 1].src
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	!function() {
/******/ 		__webpack_require__.b = document.baseURI || self.location.href;
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = __webpack_require__.hmrS_jsonp = __webpack_require__.hmrS_jsonp || {
/******/ 			"main": 0
/******/ 		};
/******/ 		
/******/ 		__webpack_require__.f.j = function(chunkId, promises) {
/******/ 				// JSONP chunk loading for javascript
/******/ 				var installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;
/******/ 				if(installedChunkData !== 0) { // 0 means "already installed".
/******/ 		
/******/ 					// a Promise means "currently loading".
/******/ 					if(installedChunkData) {
/******/ 						promises.push(installedChunkData[2]);
/******/ 					} else {
/******/ 						if(true) { // all chunks have JS
/******/ 							// setup Promise in chunk cache
/******/ 							var promise = new Promise(function(resolve, reject) { installedChunkData = installedChunks[chunkId] = [resolve, reject]; });
/******/ 							promises.push(installedChunkData[2] = promise);
/******/ 		
/******/ 							// start chunk loading
/******/ 							var url = __webpack_require__.p + __webpack_require__.u(chunkId);
/******/ 							// create error before stack unwound to get useful stacktrace later
/******/ 							var error = new Error();
/******/ 							var loadingEnded = function(event) {
/******/ 								if(__webpack_require__.o(installedChunks, chunkId)) {
/******/ 									installedChunkData = installedChunks[chunkId];
/******/ 									if(installedChunkData !== 0) installedChunks[chunkId] = undefined;
/******/ 									if(installedChunkData) {
/******/ 										var errorType = event && (event.type === 'load' ? 'missing' : event.type);
/******/ 										var realSrc = event && event.target && event.target.src;
/******/ 										error.message = 'Loading chunk ' + chunkId + ' failed.\n(' + errorType + ': ' + realSrc + ')';
/******/ 										error.name = 'ChunkLoadError';
/******/ 										error.type = errorType;
/******/ 										error.request = realSrc;
/******/ 										installedChunkData[1](error);
/******/ 									}
/******/ 								}
/******/ 							};
/******/ 							__webpack_require__.l(url, loadingEnded, "chunk-" + chunkId, chunkId);
/******/ 						} else installedChunks[chunkId] = 0;
/******/ 					}
/******/ 				}
/******/ 		};
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		var currentUpdatedModulesList;
/******/ 		var waitingUpdateResolves = {};
/******/ 		function loadUpdateChunk(chunkId, updatedModulesList) {
/******/ 			currentUpdatedModulesList = updatedModulesList;
/******/ 			return new Promise(function(resolve, reject) {
/******/ 				waitingUpdateResolves[chunkId] = resolve;
/******/ 				// start update chunk loading
/******/ 				var url = __webpack_require__.p + __webpack_require__.hu(chunkId);
/******/ 				// create error before stack unwound to get useful stacktrace later
/******/ 				var error = new Error();
/******/ 				var loadingEnded = function(event) {
/******/ 					if(waitingUpdateResolves[chunkId]) {
/******/ 						waitingUpdateResolves[chunkId] = undefined
/******/ 						var errorType = event && (event.type === 'load' ? 'missing' : event.type);
/******/ 						var realSrc = event && event.target && event.target.src;
/******/ 						error.message = 'Loading hot update chunk ' + chunkId + ' failed.\n(' + errorType + ': ' + realSrc + ')';
/******/ 						error.name = 'ChunkLoadError';
/******/ 						error.type = errorType;
/******/ 						error.request = realSrc;
/******/ 						reject(error);
/******/ 					}
/******/ 				};
/******/ 				__webpack_require__.l(url, loadingEnded);
/******/ 			});
/******/ 		}
/******/ 		
/******/ 		self["webpackHotUpdatecapi_simple_demo"] = function(chunkId, moreModules, runtime) {
/******/ 			for(var moduleId in moreModules) {
/******/ 				if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 					currentUpdate[moduleId] = moreModules[moduleId];
/******/ 					if(currentUpdatedModulesList) currentUpdatedModulesList.push(moduleId);
/******/ 				}
/******/ 			}
/******/ 			if(runtime) currentUpdateRuntime.push(runtime);
/******/ 			if(waitingUpdateResolves[chunkId]) {
/******/ 				waitingUpdateResolves[chunkId]();
/******/ 				waitingUpdateResolves[chunkId] = undefined;
/******/ 			}
/******/ 		};
/******/ 		
/******/ 		var currentUpdateChunks;
/******/ 		var currentUpdate;
/******/ 		var currentUpdateRemovedChunks;
/******/ 		var currentUpdateRuntime;
/******/ 		function applyHandler(options) {
/******/ 			if (__webpack_require__.f) delete __webpack_require__.f.jsonpHmr;
/******/ 			currentUpdateChunks = undefined;
/******/ 			function getAffectedModuleEffects(updateModuleId) {
/******/ 				var outdatedModules = [updateModuleId];
/******/ 				var outdatedDependencies = {};
/******/ 		
/******/ 				var queue = outdatedModules.map(function (id) {
/******/ 					return {
/******/ 						chain: [id],
/******/ 						id: id
/******/ 					};
/******/ 				});
/******/ 				while (queue.length > 0) {
/******/ 					var queueItem = queue.pop();
/******/ 					var moduleId = queueItem.id;
/******/ 					var chain = queueItem.chain;
/******/ 					var module = __webpack_require__.c[moduleId];
/******/ 					if (
/******/ 						!module ||
/******/ 						(module.hot._selfAccepted && !module.hot._selfInvalidated)
/******/ 					)
/******/ 						continue;
/******/ 					if (module.hot._selfDeclined) {
/******/ 						return {
/******/ 							type: "self-declined",
/******/ 							chain: chain,
/******/ 							moduleId: moduleId
/******/ 						};
/******/ 					}
/******/ 					if (module.hot._main) {
/******/ 						return {
/******/ 							type: "unaccepted",
/******/ 							chain: chain,
/******/ 							moduleId: moduleId
/******/ 						};
/******/ 					}
/******/ 					for (var i = 0; i < module.parents.length; i++) {
/******/ 						var parentId = module.parents[i];
/******/ 						var parent = __webpack_require__.c[parentId];
/******/ 						if (!parent) continue;
/******/ 						if (parent.hot._declinedDependencies[moduleId]) {
/******/ 							return {
/******/ 								type: "declined",
/******/ 								chain: chain.concat([parentId]),
/******/ 								moduleId: moduleId,
/******/ 								parentId: parentId
/******/ 							};
/******/ 						}
/******/ 						if (outdatedModules.indexOf(parentId) !== -1) continue;
/******/ 						if (parent.hot._acceptedDependencies[moduleId]) {
/******/ 							if (!outdatedDependencies[parentId])
/******/ 								outdatedDependencies[parentId] = [];
/******/ 							addAllToSet(outdatedDependencies[parentId], [moduleId]);
/******/ 							continue;
/******/ 						}
/******/ 						delete outdatedDependencies[parentId];
/******/ 						outdatedModules.push(parentId);
/******/ 						queue.push({
/******/ 							chain: chain.concat([parentId]),
/******/ 							id: parentId
/******/ 						});
/******/ 					}
/******/ 				}
/******/ 		
/******/ 				return {
/******/ 					type: "accepted",
/******/ 					moduleId: updateModuleId,
/******/ 					outdatedModules: outdatedModules,
/******/ 					outdatedDependencies: outdatedDependencies
/******/ 				};
/******/ 			}
/******/ 		
/******/ 			function addAllToSet(a, b) {
/******/ 				for (var i = 0; i < b.length; i++) {
/******/ 					var item = b[i];
/******/ 					if (a.indexOf(item) === -1) a.push(item);
/******/ 				}
/******/ 			}
/******/ 		
/******/ 			// at begin all updates modules are outdated
/******/ 			// the "outdated" status can propagate to parents if they don't accept the children
/******/ 			var outdatedDependencies = {};
/******/ 			var outdatedModules = [];
/******/ 			var appliedUpdate = {};
/******/ 		
/******/ 			var warnUnexpectedRequire = function warnUnexpectedRequire(module) {
/******/ 				console.warn(
/******/ 					"[HMR] unexpected require(" + module.id + ") to disposed module"
/******/ 				);
/******/ 			};
/******/ 		
/******/ 			for (var moduleId in currentUpdate) {
/******/ 				if (__webpack_require__.o(currentUpdate, moduleId)) {
/******/ 					var newModuleFactory = currentUpdate[moduleId];
/******/ 					/** @type {TODO} */
/******/ 					var result;
/******/ 					if (newModuleFactory) {
/******/ 						result = getAffectedModuleEffects(moduleId);
/******/ 					} else {
/******/ 						result = {
/******/ 							type: "disposed",
/******/ 							moduleId: moduleId
/******/ 						};
/******/ 					}
/******/ 					/** @type {Error|false} */
/******/ 					var abortError = false;
/******/ 					var doApply = false;
/******/ 					var doDispose = false;
/******/ 					var chainInfo = "";
/******/ 					if (result.chain) {
/******/ 						chainInfo = "\nUpdate propagation: " + result.chain.join(" -> ");
/******/ 					}
/******/ 					switch (result.type) {
/******/ 						case "self-declined":
/******/ 							if (options.onDeclined) options.onDeclined(result);
/******/ 							if (!options.ignoreDeclined)
/******/ 								abortError = new Error(
/******/ 									"Aborted because of self decline: " +
/******/ 										result.moduleId +
/******/ 										chainInfo
/******/ 								);
/******/ 							break;
/******/ 						case "declined":
/******/ 							if (options.onDeclined) options.onDeclined(result);
/******/ 							if (!options.ignoreDeclined)
/******/ 								abortError = new Error(
/******/ 									"Aborted because of declined dependency: " +
/******/ 										result.moduleId +
/******/ 										" in " +
/******/ 										result.parentId +
/******/ 										chainInfo
/******/ 								);
/******/ 							break;
/******/ 						case "unaccepted":
/******/ 							if (options.onUnaccepted) options.onUnaccepted(result);
/******/ 							if (!options.ignoreUnaccepted)
/******/ 								abortError = new Error(
/******/ 									"Aborted because " + moduleId + " is not accepted" + chainInfo
/******/ 								);
/******/ 							break;
/******/ 						case "accepted":
/******/ 							if (options.onAccepted) options.onAccepted(result);
/******/ 							doApply = true;
/******/ 							break;
/******/ 						case "disposed":
/******/ 							if (options.onDisposed) options.onDisposed(result);
/******/ 							doDispose = true;
/******/ 							break;
/******/ 						default:
/******/ 							throw new Error("Unexception type " + result.type);
/******/ 					}
/******/ 					if (abortError) {
/******/ 						return {
/******/ 							error: abortError
/******/ 						};
/******/ 					}
/******/ 					if (doApply) {
/******/ 						appliedUpdate[moduleId] = newModuleFactory;
/******/ 						addAllToSet(outdatedModules, result.outdatedModules);
/******/ 						for (moduleId in result.outdatedDependencies) {
/******/ 							if (__webpack_require__.o(result.outdatedDependencies, moduleId)) {
/******/ 								if (!outdatedDependencies[moduleId])
/******/ 									outdatedDependencies[moduleId] = [];
/******/ 								addAllToSet(
/******/ 									outdatedDependencies[moduleId],
/******/ 									result.outdatedDependencies[moduleId]
/******/ 								);
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 					if (doDispose) {
/******/ 						addAllToSet(outdatedModules, [result.moduleId]);
/******/ 						appliedUpdate[moduleId] = warnUnexpectedRequire;
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 			currentUpdate = undefined;
/******/ 		
/******/ 			// Store self accepted outdated modules to require them later by the module system
/******/ 			var outdatedSelfAcceptedModules = [];
/******/ 			for (var j = 0; j < outdatedModules.length; j++) {
/******/ 				var outdatedModuleId = outdatedModules[j];
/******/ 				var module = __webpack_require__.c[outdatedModuleId];
/******/ 				if (
/******/ 					module &&
/******/ 					(module.hot._selfAccepted || module.hot._main) &&
/******/ 					// removed self-accepted modules should not be required
/******/ 					appliedUpdate[outdatedModuleId] !== warnUnexpectedRequire &&
/******/ 					// when called invalidate self-accepting is not possible
/******/ 					!module.hot._selfInvalidated
/******/ 				) {
/******/ 					outdatedSelfAcceptedModules.push({
/******/ 						module: outdatedModuleId,
/******/ 						require: module.hot._requireSelf,
/******/ 						errorHandler: module.hot._selfAccepted
/******/ 					});
/******/ 				}
/******/ 			}
/******/ 		
/******/ 			var moduleOutdatedDependencies;
/******/ 		
/******/ 			return {
/******/ 				dispose: function () {
/******/ 					currentUpdateRemovedChunks.forEach(function (chunkId) {
/******/ 						delete installedChunks[chunkId];
/******/ 					});
/******/ 					currentUpdateRemovedChunks = undefined;
/******/ 		
/******/ 					var idx;
/******/ 					var queue = outdatedModules.slice();
/******/ 					while (queue.length > 0) {
/******/ 						var moduleId = queue.pop();
/******/ 						var module = __webpack_require__.c[moduleId];
/******/ 						if (!module) continue;
/******/ 		
/******/ 						var data = {};
/******/ 		
/******/ 						// Call dispose handlers
/******/ 						var disposeHandlers = module.hot._disposeHandlers;
/******/ 						for (j = 0; j < disposeHandlers.length; j++) {
/******/ 							disposeHandlers[j].call(null, data);
/******/ 						}
/******/ 						__webpack_require__.hmrD[moduleId] = data;
/******/ 		
/******/ 						// disable module (this disables requires from this module)
/******/ 						module.hot.active = false;
/******/ 		
/******/ 						// remove module from cache
/******/ 						delete __webpack_require__.c[moduleId];
/******/ 		
/******/ 						// when disposing there is no need to call dispose handler
/******/ 						delete outdatedDependencies[moduleId];
/******/ 		
/******/ 						// remove "parents" references from all children
/******/ 						for (j = 0; j < module.children.length; j++) {
/******/ 							var child = __webpack_require__.c[module.children[j]];
/******/ 							if (!child) continue;
/******/ 							idx = child.parents.indexOf(moduleId);
/******/ 							if (idx >= 0) {
/******/ 								child.parents.splice(idx, 1);
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 		
/******/ 					// remove outdated dependency from module children
/******/ 					var dependency;
/******/ 					for (var outdatedModuleId in outdatedDependencies) {
/******/ 						if (__webpack_require__.o(outdatedDependencies, outdatedModuleId)) {
/******/ 							module = __webpack_require__.c[outdatedModuleId];
/******/ 							if (module) {
/******/ 								moduleOutdatedDependencies =
/******/ 									outdatedDependencies[outdatedModuleId];
/******/ 								for (j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 									dependency = moduleOutdatedDependencies[j];
/******/ 									idx = module.children.indexOf(dependency);
/******/ 									if (idx >= 0) module.children.splice(idx, 1);
/******/ 								}
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 				},
/******/ 				apply: function (reportError) {
/******/ 					// insert new code
/******/ 					for (var updateModuleId in appliedUpdate) {
/******/ 						if (__webpack_require__.o(appliedUpdate, updateModuleId)) {
/******/ 							__webpack_require__.m[updateModuleId] = appliedUpdate[updateModuleId];
/******/ 						}
/******/ 					}
/******/ 		
/******/ 					// run new runtime modules
/******/ 					for (var i = 0; i < currentUpdateRuntime.length; i++) {
/******/ 						currentUpdateRuntime[i](__webpack_require__);
/******/ 					}
/******/ 		
/******/ 					// call accept handlers
/******/ 					for (var outdatedModuleId in outdatedDependencies) {
/******/ 						if (__webpack_require__.o(outdatedDependencies, outdatedModuleId)) {
/******/ 							var module = __webpack_require__.c[outdatedModuleId];
/******/ 							if (module) {
/******/ 								moduleOutdatedDependencies =
/******/ 									outdatedDependencies[outdatedModuleId];
/******/ 								var callbacks = [];
/******/ 								var errorHandlers = [];
/******/ 								var dependenciesForCallbacks = [];
/******/ 								for (var j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 									var dependency = moduleOutdatedDependencies[j];
/******/ 									var acceptCallback =
/******/ 										module.hot._acceptedDependencies[dependency];
/******/ 									var errorHandler =
/******/ 										module.hot._acceptedErrorHandlers[dependency];
/******/ 									if (acceptCallback) {
/******/ 										if (callbacks.indexOf(acceptCallback) !== -1) continue;
/******/ 										callbacks.push(acceptCallback);
/******/ 										errorHandlers.push(errorHandler);
/******/ 										dependenciesForCallbacks.push(dependency);
/******/ 									}
/******/ 								}
/******/ 								for (var k = 0; k < callbacks.length; k++) {
/******/ 									try {
/******/ 										callbacks[k].call(null, moduleOutdatedDependencies);
/******/ 									} catch (err) {
/******/ 										if (typeof errorHandlers[k] === "function") {
/******/ 											try {
/******/ 												errorHandlers[k](err, {
/******/ 													moduleId: outdatedModuleId,
/******/ 													dependencyId: dependenciesForCallbacks[k]
/******/ 												});
/******/ 											} catch (err2) {
/******/ 												if (options.onErrored) {
/******/ 													options.onErrored({
/******/ 														type: "accept-error-handler-errored",
/******/ 														moduleId: outdatedModuleId,
/******/ 														dependencyId: dependenciesForCallbacks[k],
/******/ 														error: err2,
/******/ 														originalError: err
/******/ 													});
/******/ 												}
/******/ 												if (!options.ignoreErrored) {
/******/ 													reportError(err2);
/******/ 													reportError(err);
/******/ 												}
/******/ 											}
/******/ 										} else {
/******/ 											if (options.onErrored) {
/******/ 												options.onErrored({
/******/ 													type: "accept-errored",
/******/ 													moduleId: outdatedModuleId,
/******/ 													dependencyId: dependenciesForCallbacks[k],
/******/ 													error: err
/******/ 												});
/******/ 											}
/******/ 											if (!options.ignoreErrored) {
/******/ 												reportError(err);
/******/ 											}
/******/ 										}
/******/ 									}
/******/ 								}
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 		
/******/ 					// Load self accepted modules
/******/ 					for (var o = 0; o < outdatedSelfAcceptedModules.length; o++) {
/******/ 						var item = outdatedSelfAcceptedModules[o];
/******/ 						var moduleId = item.module;
/******/ 						try {
/******/ 							item.require(moduleId);
/******/ 						} catch (err) {
/******/ 							if (typeof item.errorHandler === "function") {
/******/ 								try {
/******/ 									item.errorHandler(err, {
/******/ 										moduleId: moduleId,
/******/ 										module: __webpack_require__.c[moduleId]
/******/ 									});
/******/ 								} catch (err2) {
/******/ 									if (options.onErrored) {
/******/ 										options.onErrored({
/******/ 											type: "self-accept-error-handler-errored",
/******/ 											moduleId: moduleId,
/******/ 											error: err2,
/******/ 											originalError: err
/******/ 										});
/******/ 									}
/******/ 									if (!options.ignoreErrored) {
/******/ 										reportError(err2);
/******/ 										reportError(err);
/******/ 									}
/******/ 								}
/******/ 							} else {
/******/ 								if (options.onErrored) {
/******/ 									options.onErrored({
/******/ 										type: "self-accept-errored",
/******/ 										moduleId: moduleId,
/******/ 										error: err
/******/ 									});
/******/ 								}
/******/ 								if (!options.ignoreErrored) {
/******/ 									reportError(err);
/******/ 								}
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 		
/******/ 					return outdatedModules;
/******/ 				}
/******/ 			};
/******/ 		}
/******/ 		__webpack_require__.hmrI.jsonp = function (moduleId, applyHandlers) {
/******/ 			if (!currentUpdate) {
/******/ 				currentUpdate = {};
/******/ 				currentUpdateRuntime = [];
/******/ 				currentUpdateRemovedChunks = [];
/******/ 				applyHandlers.push(applyHandler);
/******/ 			}
/******/ 			if (!__webpack_require__.o(currentUpdate, moduleId)) {
/******/ 				currentUpdate[moduleId] = __webpack_require__.m[moduleId];
/******/ 			}
/******/ 		};
/******/ 		__webpack_require__.hmrC.jsonp = function (
/******/ 			chunkIds,
/******/ 			removedChunks,
/******/ 			removedModules,
/******/ 			promises,
/******/ 			applyHandlers,
/******/ 			updatedModulesList
/******/ 		) {
/******/ 			applyHandlers.push(applyHandler);
/******/ 			currentUpdateChunks = {};
/******/ 			currentUpdateRemovedChunks = removedChunks;
/******/ 			currentUpdate = removedModules.reduce(function (obj, key) {
/******/ 				obj[key] = false;
/******/ 				return obj;
/******/ 			}, {});
/******/ 			currentUpdateRuntime = [];
/******/ 			chunkIds.forEach(function (chunkId) {
/******/ 				if (
/******/ 					__webpack_require__.o(installedChunks, chunkId) &&
/******/ 					installedChunks[chunkId] !== undefined
/******/ 				) {
/******/ 					promises.push(loadUpdateChunk(chunkId, updatedModulesList));
/******/ 					currentUpdateChunks[chunkId] = true;
/******/ 				} else {
/******/ 					currentUpdateChunks[chunkId] = false;
/******/ 				}
/******/ 			});
/******/ 			if (__webpack_require__.f) {
/******/ 				__webpack_require__.f.jsonpHmr = function (chunkId, promises) {
/******/ 					if (
/******/ 						currentUpdateChunks &&
/******/ 						__webpack_require__.o(currentUpdateChunks, chunkId) &&
/******/ 						!currentUpdateChunks[chunkId]
/******/ 					) {
/******/ 						promises.push(loadUpdateChunk(chunkId));
/******/ 						currentUpdateChunks[chunkId] = true;
/******/ 					}
/******/ 				};
/******/ 			}
/******/ 		};
/******/ 		
/******/ 		__webpack_require__.hmrM = function() {
/******/ 			if (typeof fetch === "undefined") throw new Error("No browser support: need fetch API");
/******/ 			return fetch(__webpack_require__.p + __webpack_require__.hmrF()).then(function(response) {
/******/ 				if(response.status === 404) return; // no update available
/******/ 				if(!response.ok) throw new Error("Failed to fetch update manifest " + response.statusText);
/******/ 				return response.json();
/******/ 			});
/******/ 		};
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = function(parentChunkLoadingFunction, data) {
/******/ 			var chunkIds = data[0];
/******/ 			var moreModules = data[1];
/******/ 			var runtime = data[2];
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 		
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunkcapi_simple_demo"] = self["webpackChunkcapi_simple_demo"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// module cache are used so entry inlining is disabled
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,